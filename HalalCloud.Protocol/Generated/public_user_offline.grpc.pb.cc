// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: public_user_offline.proto

#include "public_user_offline.pb.h"
#include "public_user_offline.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace v6 {
namespace services {
namespace pub {

static const char* PubOfflineTask_method_names[] = {
  "/v6.services.pub.PubOfflineTask/Parse",
  "/v6.services.pub.PubOfflineTask/Add",
};

std::unique_ptr< PubOfflineTask::Stub> PubOfflineTask::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< PubOfflineTask::Stub> stub(new PubOfflineTask::Stub(channel, options));
  return stub;
}

PubOfflineTask::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_Parse_(PubOfflineTask_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Add_(PubOfflineTask_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status PubOfflineTask::Stub::Parse(::grpc::ClientContext* context, const ::v6::services::pub::TaskParseRequest& request, ::v6::services::pub::TaskParseResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::v6::services::pub::TaskParseRequest, ::v6::services::pub::TaskParseResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Parse_, context, request, response);
}

void PubOfflineTask::Stub::async::Parse(::grpc::ClientContext* context, const ::v6::services::pub::TaskParseRequest* request, ::v6::services::pub::TaskParseResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::v6::services::pub::TaskParseRequest, ::v6::services::pub::TaskParseResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Parse_, context, request, response, std::move(f));
}

void PubOfflineTask::Stub::async::Parse(::grpc::ClientContext* context, const ::v6::services::pub::TaskParseRequest* request, ::v6::services::pub::TaskParseResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Parse_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::v6::services::pub::TaskParseResponse>* PubOfflineTask::Stub::PrepareAsyncParseRaw(::grpc::ClientContext* context, const ::v6::services::pub::TaskParseRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::v6::services::pub::TaskParseResponse, ::v6::services::pub::TaskParseRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Parse_, context, request);
}

::grpc::ClientAsyncResponseReader< ::v6::services::pub::TaskParseResponse>* PubOfflineTask::Stub::AsyncParseRaw(::grpc::ClientContext* context, const ::v6::services::pub::TaskParseRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncParseRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status PubOfflineTask::Stub::Add(::grpc::ClientContext* context, const ::v6::services::pub::TaskAddRequest& request, ::v6::services::pub::TaskAddResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::v6::services::pub::TaskAddRequest, ::v6::services::pub::TaskAddResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Add_, context, request, response);
}

void PubOfflineTask::Stub::async::Add(::grpc::ClientContext* context, const ::v6::services::pub::TaskAddRequest* request, ::v6::services::pub::TaskAddResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::v6::services::pub::TaskAddRequest, ::v6::services::pub::TaskAddResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Add_, context, request, response, std::move(f));
}

void PubOfflineTask::Stub::async::Add(::grpc::ClientContext* context, const ::v6::services::pub::TaskAddRequest* request, ::v6::services::pub::TaskAddResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Add_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::v6::services::pub::TaskAddResponse>* PubOfflineTask::Stub::PrepareAsyncAddRaw(::grpc::ClientContext* context, const ::v6::services::pub::TaskAddRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::v6::services::pub::TaskAddResponse, ::v6::services::pub::TaskAddRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Add_, context, request);
}

::grpc::ClientAsyncResponseReader< ::v6::services::pub::TaskAddResponse>* PubOfflineTask::Stub::AsyncAddRaw(::grpc::ClientContext* context, const ::v6::services::pub::TaskAddRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncAddRaw(context, request, cq);
  result->StartCall();
  return result;
}

PubOfflineTask::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      PubOfflineTask_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< PubOfflineTask::Service, ::v6::services::pub::TaskParseRequest, ::v6::services::pub::TaskParseResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](PubOfflineTask::Service* service,
             ::grpc::ServerContext* ctx,
             const ::v6::services::pub::TaskParseRequest* req,
             ::v6::services::pub::TaskParseResponse* resp) {
               return service->Parse(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      PubOfflineTask_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< PubOfflineTask::Service, ::v6::services::pub::TaskAddRequest, ::v6::services::pub::TaskAddResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](PubOfflineTask::Service* service,
             ::grpc::ServerContext* ctx,
             const ::v6::services::pub::TaskAddRequest* req,
             ::v6::services::pub::TaskAddResponse* resp) {
               return service->Add(ctx, req, resp);
             }, this)));
}

PubOfflineTask::Service::~Service() {
}

::grpc::Status PubOfflineTask::Service::Parse(::grpc::ServerContext* context, const ::v6::services::pub::TaskParseRequest* request, ::v6::services::pub::TaskParseResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status PubOfflineTask::Service::Add(::grpc::ServerContext* context, const ::v6::services::pub::TaskAddRequest* request, ::v6::services::pub::TaskAddResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace v6
}  // namespace services
}  // namespace pub

