// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: pub_common.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_pub_5fcommon_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_pub_5fcommon_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_pub_5fcommon_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_pub_5fcommon_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_pub_5fcommon_2eproto;
namespace v6 {
namespace services {
namespace pub {
namespace common {
class ScanListRequest;
struct ScanListRequestDefaultTypeInternal;
extern ScanListRequestDefaultTypeInternal _ScanListRequest_default_instance_;
class ScanListRequest_OrderByEntry_DoNotUse;
struct ScanListRequest_OrderByEntry_DoNotUseDefaultTypeInternal;
extern ScanListRequest_OrderByEntry_DoNotUseDefaultTypeInternal _ScanListRequest_OrderByEntry_DoNotUse_default_instance_;
}  // namespace common
}  // namespace pub
}  // namespace services
}  // namespace v6
PROTOBUF_NAMESPACE_OPEN
template<> ::v6::services::pub::common::ScanListRequest* Arena::CreateMaybeMessage<::v6::services::pub::common::ScanListRequest>(Arena*);
template<> ::v6::services::pub::common::ScanListRequest_OrderByEntry_DoNotUse* Arena::CreateMaybeMessage<::v6::services::pub::common::ScanListRequest_OrderByEntry_DoNotUse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace v6 {
namespace services {
namespace pub {
namespace common {

// ===================================================================

class ScanListRequest_OrderByEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<ScanListRequest_OrderByEntry_DoNotUse, 
    std::string, bool,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<ScanListRequest_OrderByEntry_DoNotUse, 
    std::string, bool,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL> SuperType;
  ScanListRequest_OrderByEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR ScanListRequest_OrderByEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit ScanListRequest_OrderByEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const ScanListRequest_OrderByEntry_DoNotUse& other);
  static const ScanListRequest_OrderByEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const ScanListRequest_OrderByEntry_DoNotUse*>(&_ScanListRequest_OrderByEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "v6.services.pub.common.ScanListRequest.OrderByEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_pub_5fcommon_2eproto;
};

// -------------------------------------------------------------------

class ScanListRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:v6.services.pub.common.ScanListRequest) */ {
 public:
  inline ScanListRequest() : ScanListRequest(nullptr) {}
  ~ScanListRequest() override;
  explicit PROTOBUF_CONSTEXPR ScanListRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ScanListRequest(const ScanListRequest& from);
  ScanListRequest(ScanListRequest&& from) noexcept
    : ScanListRequest() {
    *this = ::std::move(from);
  }

  inline ScanListRequest& operator=(const ScanListRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ScanListRequest& operator=(ScanListRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ScanListRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ScanListRequest* internal_default_instance() {
    return reinterpret_cast<const ScanListRequest*>(
               &_ScanListRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ScanListRequest& a, ScanListRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ScanListRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ScanListRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ScanListRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ScanListRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ScanListRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ScanListRequest& from) {
    ScanListRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ScanListRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "v6.services.pub.common.ScanListRequest";
  }
  protected:
  explicit ScanListRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kOrderByFieldNumber = 3,
    kTokenFieldNumber = 1,
    kLimitFieldNumber = 2,
  };
  // map<string, bool> order_by = 3;
  int order_by_size() const;
  private:
  int _internal_order_by_size() const;
  public:
  void clear_order_by();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, bool >&
      _internal_order_by() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, bool >*
      _internal_mutable_order_by();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, bool >&
      order_by() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, bool >*
      mutable_order_by();

  // string token = 1;
  void clear_token();
  const std::string& token() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_token(ArgT0&& arg0, ArgT... args);
  std::string* mutable_token();
  PROTOBUF_NODISCARD std::string* release_token();
  void set_allocated_token(std::string* token);
  private:
  const std::string& _internal_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_token(const std::string& value);
  std::string* _internal_mutable_token();
  public:

  // int64 limit = 2;
  void clear_limit();
  int64_t limit() const;
  void set_limit(int64_t value);
  private:
  int64_t _internal_limit() const;
  void _internal_set_limit(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:v6.services.pub.common.ScanListRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::MapField<
        ScanListRequest_OrderByEntry_DoNotUse,
        std::string, bool,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL> order_by_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr token_;
    int64_t limit_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_pub_5fcommon_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// ScanListRequest

// string token = 1;
inline void ScanListRequest::clear_token() {
  _impl_.token_.ClearToEmpty();
}
inline const std::string& ScanListRequest::token() const {
  // @@protoc_insertion_point(field_get:v6.services.pub.common.ScanListRequest.token)
  return _internal_token();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ScanListRequest::set_token(ArgT0&& arg0, ArgT... args) {
 
 _impl_.token_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:v6.services.pub.common.ScanListRequest.token)
}
inline std::string* ScanListRequest::mutable_token() {
  std::string* _s = _internal_mutable_token();
  // @@protoc_insertion_point(field_mutable:v6.services.pub.common.ScanListRequest.token)
  return _s;
}
inline const std::string& ScanListRequest::_internal_token() const {
  return _impl_.token_.Get();
}
inline void ScanListRequest::_internal_set_token(const std::string& value) {
  
  _impl_.token_.Set(value, GetArenaForAllocation());
}
inline std::string* ScanListRequest::_internal_mutable_token() {
  
  return _impl_.token_.Mutable(GetArenaForAllocation());
}
inline std::string* ScanListRequest::release_token() {
  // @@protoc_insertion_point(field_release:v6.services.pub.common.ScanListRequest.token)
  return _impl_.token_.Release();
}
inline void ScanListRequest::set_allocated_token(std::string* token) {
  if (token != nullptr) {
    
  } else {
    
  }
  _impl_.token_.SetAllocated(token, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.token_.IsDefault()) {
    _impl_.token_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:v6.services.pub.common.ScanListRequest.token)
}

// int64 limit = 2;
inline void ScanListRequest::clear_limit() {
  _impl_.limit_ = int64_t{0};
}
inline int64_t ScanListRequest::_internal_limit() const {
  return _impl_.limit_;
}
inline int64_t ScanListRequest::limit() const {
  // @@protoc_insertion_point(field_get:v6.services.pub.common.ScanListRequest.limit)
  return _internal_limit();
}
inline void ScanListRequest::_internal_set_limit(int64_t value) {
  
  _impl_.limit_ = value;
}
inline void ScanListRequest::set_limit(int64_t value) {
  _internal_set_limit(value);
  // @@protoc_insertion_point(field_set:v6.services.pub.common.ScanListRequest.limit)
}

// map<string, bool> order_by = 3;
inline int ScanListRequest::_internal_order_by_size() const {
  return _impl_.order_by_.size();
}
inline int ScanListRequest::order_by_size() const {
  return _internal_order_by_size();
}
inline void ScanListRequest::clear_order_by() {
  _impl_.order_by_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, bool >&
ScanListRequest::_internal_order_by() const {
  return _impl_.order_by_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, bool >&
ScanListRequest::order_by() const {
  // @@protoc_insertion_point(field_map:v6.services.pub.common.ScanListRequest.order_by)
  return _internal_order_by();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, bool >*
ScanListRequest::_internal_mutable_order_by() {
  return _impl_.order_by_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, bool >*
ScanListRequest::mutable_order_by() {
  // @@protoc_insertion_point(field_mutable_map:v6.services.pub.common.ScanListRequest.order_by)
  return _internal_mutable_order_by();
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace common
}  // namespace pub
}  // namespace services
}  // namespace v6

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_pub_5fcommon_2eproto
