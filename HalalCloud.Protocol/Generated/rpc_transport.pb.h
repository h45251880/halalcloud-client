// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: rpc_transport.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_rpc_5ftransport_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_rpc_5ftransport_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/any.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_rpc_5ftransport_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_rpc_5ftransport_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_rpc_5ftransport_2eproto;
namespace v6 {
namespace rpc {
class RpcHeaderValue;
struct RpcHeaderValueDefaultTypeInternal;
extern RpcHeaderValueDefaultTypeInternal _RpcHeaderValue_default_instance_;
class RpcMetaData;
struct RpcMetaDataDefaultTypeInternal;
extern RpcMetaDataDefaultTypeInternal _RpcMetaData_default_instance_;
class RpcMetaData_HeaderEntry_DoNotUse;
struct RpcMetaData_HeaderEntry_DoNotUseDefaultTypeInternal;
extern RpcMetaData_HeaderEntry_DoNotUseDefaultTypeInternal _RpcMetaData_HeaderEntry_DoNotUse_default_instance_;
class RpcTransport;
struct RpcTransportDefaultTypeInternal;
extern RpcTransportDefaultTypeInternal _RpcTransport_default_instance_;
}  // namespace rpc
}  // namespace v6
PROTOBUF_NAMESPACE_OPEN
template<> ::v6::rpc::RpcHeaderValue* Arena::CreateMaybeMessage<::v6::rpc::RpcHeaderValue>(Arena*);
template<> ::v6::rpc::RpcMetaData* Arena::CreateMaybeMessage<::v6::rpc::RpcMetaData>(Arena*);
template<> ::v6::rpc::RpcMetaData_HeaderEntry_DoNotUse* Arena::CreateMaybeMessage<::v6::rpc::RpcMetaData_HeaderEntry_DoNotUse>(Arena*);
template<> ::v6::rpc::RpcTransport* Arena::CreateMaybeMessage<::v6::rpc::RpcTransport>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace v6 {
namespace rpc {

// ===================================================================

class RpcTransport final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:v6.rpc.RpcTransport) */ {
 public:
  inline RpcTransport() : RpcTransport(nullptr) {}
  ~RpcTransport() override;
  explicit PROTOBUF_CONSTEXPR RpcTransport(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RpcTransport(const RpcTransport& from);
  RpcTransport(RpcTransport&& from) noexcept
    : RpcTransport() {
    *this = ::std::move(from);
  }

  inline RpcTransport& operator=(const RpcTransport& from) {
    CopyFrom(from);
    return *this;
  }
  inline RpcTransport& operator=(RpcTransport&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RpcTransport& default_instance() {
    return *internal_default_instance();
  }
  static inline const RpcTransport* internal_default_instance() {
    return reinterpret_cast<const RpcTransport*>(
               &_RpcTransport_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(RpcTransport& a, RpcTransport& b) {
    a.Swap(&b);
  }
  inline void Swap(RpcTransport* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RpcTransport* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RpcTransport* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RpcTransport>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RpcTransport& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RpcTransport& from) {
    RpcTransport::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RpcTransport* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "v6.rpc.RpcTransport";
  }
  protected:
  explicit RpcTransport(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCommandFieldNumber = 1,
    kIdentityFieldNumber = 2,
    kMessageFieldNumber = 6,
    kDataFieldNumber = 4,
    kMetaFieldNumber = 7,
    kTypeFieldNumber = 3,
    kStatusFieldNumber = 5,
  };
  // string command = 1;
  void clear_command();
  const std::string& command() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_command(ArgT0&& arg0, ArgT... args);
  std::string* mutable_command();
  PROTOBUF_NODISCARD std::string* release_command();
  void set_allocated_command(std::string* command);
  private:
  const std::string& _internal_command() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_command(const std::string& value);
  std::string* _internal_mutable_command();
  public:

  // string identity = 2;
  void clear_identity();
  const std::string& identity() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_identity(ArgT0&& arg0, ArgT... args);
  std::string* mutable_identity();
  PROTOBUF_NODISCARD std::string* release_identity();
  void set_allocated_identity(std::string* identity);
  private:
  const std::string& _internal_identity() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_identity(const std::string& value);
  std::string* _internal_mutable_identity();
  public:

  // string message = 6;
  void clear_message();
  const std::string& message() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_message(ArgT0&& arg0, ArgT... args);
  std::string* mutable_message();
  PROTOBUF_NODISCARD std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // .google.protobuf.Any data = 4;
  bool has_data() const;
  private:
  bool _internal_has_data() const;
  public:
  void clear_data();
  const ::PROTOBUF_NAMESPACE_ID::Any& data() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Any* release_data();
  ::PROTOBUF_NAMESPACE_ID::Any* mutable_data();
  void set_allocated_data(::PROTOBUF_NAMESPACE_ID::Any* data);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Any& _internal_data() const;
  ::PROTOBUF_NAMESPACE_ID::Any* _internal_mutable_data();
  public:
  void unsafe_arena_set_allocated_data(
      ::PROTOBUF_NAMESPACE_ID::Any* data);
  ::PROTOBUF_NAMESPACE_ID::Any* unsafe_arena_release_data();

  // .v6.rpc.RpcMetaData meta = 7;
  bool has_meta() const;
  private:
  bool _internal_has_meta() const;
  public:
  void clear_meta();
  const ::v6::rpc::RpcMetaData& meta() const;
  PROTOBUF_NODISCARD ::v6::rpc::RpcMetaData* release_meta();
  ::v6::rpc::RpcMetaData* mutable_meta();
  void set_allocated_meta(::v6::rpc::RpcMetaData* meta);
  private:
  const ::v6::rpc::RpcMetaData& _internal_meta() const;
  ::v6::rpc::RpcMetaData* _internal_mutable_meta();
  public:
  void unsafe_arena_set_allocated_meta(
      ::v6::rpc::RpcMetaData* meta);
  ::v6::rpc::RpcMetaData* unsafe_arena_release_meta();

  // int32 type = 3;
  void clear_type();
  int32_t type() const;
  void set_type(int32_t value);
  private:
  int32_t _internal_type() const;
  void _internal_set_type(int32_t value);
  public:

  // int32 status = 5;
  void clear_status();
  int32_t status() const;
  void set_status(int32_t value);
  private:
  int32_t _internal_status() const;
  void _internal_set_status(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:v6.rpc.RpcTransport)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr command_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr identity_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
    ::PROTOBUF_NAMESPACE_ID::Any* data_;
    ::v6::rpc::RpcMetaData* meta_;
    int32_t type_;
    int32_t status_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_rpc_5ftransport_2eproto;
};
// -------------------------------------------------------------------

class RpcHeaderValue final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:v6.rpc.RpcHeaderValue) */ {
 public:
  inline RpcHeaderValue() : RpcHeaderValue(nullptr) {}
  ~RpcHeaderValue() override;
  explicit PROTOBUF_CONSTEXPR RpcHeaderValue(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RpcHeaderValue(const RpcHeaderValue& from);
  RpcHeaderValue(RpcHeaderValue&& from) noexcept
    : RpcHeaderValue() {
    *this = ::std::move(from);
  }

  inline RpcHeaderValue& operator=(const RpcHeaderValue& from) {
    CopyFrom(from);
    return *this;
  }
  inline RpcHeaderValue& operator=(RpcHeaderValue&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RpcHeaderValue& default_instance() {
    return *internal_default_instance();
  }
  static inline const RpcHeaderValue* internal_default_instance() {
    return reinterpret_cast<const RpcHeaderValue*>(
               &_RpcHeaderValue_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(RpcHeaderValue& a, RpcHeaderValue& b) {
    a.Swap(&b);
  }
  inline void Swap(RpcHeaderValue* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RpcHeaderValue* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RpcHeaderValue* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RpcHeaderValue>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RpcHeaderValue& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RpcHeaderValue& from) {
    RpcHeaderValue::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RpcHeaderValue* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "v6.rpc.RpcHeaderValue";
  }
  protected:
  explicit RpcHeaderValue(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 1,
  };
  // repeated string value = 1;
  int value_size() const;
  private:
  int _internal_value_size() const;
  public:
  void clear_value();
  const std::string& value(int index) const;
  std::string* mutable_value(int index);
  void set_value(int index, const std::string& value);
  void set_value(int index, std::string&& value);
  void set_value(int index, const char* value);
  void set_value(int index, const char* value, size_t size);
  std::string* add_value();
  void add_value(const std::string& value);
  void add_value(std::string&& value);
  void add_value(const char* value);
  void add_value(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& value() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_value();
  private:
  const std::string& _internal_value(int index) const;
  std::string* _internal_add_value();
  public:

  // @@protoc_insertion_point(class_scope:v6.rpc.RpcHeaderValue)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> value_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_rpc_5ftransport_2eproto;
};
// -------------------------------------------------------------------

class RpcMetaData_HeaderEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<RpcMetaData_HeaderEntry_DoNotUse, 
    std::string, ::v6::rpc::RpcHeaderValue,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<RpcMetaData_HeaderEntry_DoNotUse, 
    std::string, ::v6::rpc::RpcHeaderValue,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> SuperType;
  RpcMetaData_HeaderEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR RpcMetaData_HeaderEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit RpcMetaData_HeaderEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const RpcMetaData_HeaderEntry_DoNotUse& other);
  static const RpcMetaData_HeaderEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const RpcMetaData_HeaderEntry_DoNotUse*>(&_RpcMetaData_HeaderEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "v6.rpc.RpcMetaData.HeaderEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_rpc_5ftransport_2eproto;
};

// -------------------------------------------------------------------

class RpcMetaData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:v6.rpc.RpcMetaData) */ {
 public:
  inline RpcMetaData() : RpcMetaData(nullptr) {}
  ~RpcMetaData() override;
  explicit PROTOBUF_CONSTEXPR RpcMetaData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RpcMetaData(const RpcMetaData& from);
  RpcMetaData(RpcMetaData&& from) noexcept
    : RpcMetaData() {
    *this = ::std::move(from);
  }

  inline RpcMetaData& operator=(const RpcMetaData& from) {
    CopyFrom(from);
    return *this;
  }
  inline RpcMetaData& operator=(RpcMetaData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RpcMetaData& default_instance() {
    return *internal_default_instance();
  }
  static inline const RpcMetaData* internal_default_instance() {
    return reinterpret_cast<const RpcMetaData*>(
               &_RpcMetaData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(RpcMetaData& a, RpcMetaData& b) {
    a.Swap(&b);
  }
  inline void Swap(RpcMetaData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RpcMetaData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RpcMetaData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RpcMetaData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RpcMetaData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RpcMetaData& from) {
    RpcMetaData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RpcMetaData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "v6.rpc.RpcMetaData";
  }
  protected:
  explicit RpcMetaData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kHeaderFieldNumber = 4,
    kFromFieldNumber = 2,
    kTimestampFieldNumber = 1,
    kVersionFieldNumber = 3,
  };
  // map<string, .v6.rpc.RpcHeaderValue> header = 4;
  int header_size() const;
  private:
  int _internal_header_size() const;
  public:
  void clear_header();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::v6::rpc::RpcHeaderValue >&
      _internal_header() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::v6::rpc::RpcHeaderValue >*
      _internal_mutable_header();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::v6::rpc::RpcHeaderValue >&
      header() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::v6::rpc::RpcHeaderValue >*
      mutable_header();

  // string from = 2;
  void clear_from();
  const std::string& from() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_from(ArgT0&& arg0, ArgT... args);
  std::string* mutable_from();
  PROTOBUF_NODISCARD std::string* release_from();
  void set_allocated_from(std::string* from);
  private:
  const std::string& _internal_from() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_from(const std::string& value);
  std::string* _internal_mutable_from();
  public:

  // int64 timestamp = 1;
  void clear_timestamp();
  int64_t timestamp() const;
  void set_timestamp(int64_t value);
  private:
  int64_t _internal_timestamp() const;
  void _internal_set_timestamp(int64_t value);
  public:

  // int32 version = 3;
  void clear_version();
  int32_t version() const;
  void set_version(int32_t value);
  private:
  int32_t _internal_version() const;
  void _internal_set_version(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:v6.rpc.RpcMetaData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::MapField<
        RpcMetaData_HeaderEntry_DoNotUse,
        std::string, ::v6::rpc::RpcHeaderValue,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> header_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr from_;
    int64_t timestamp_;
    int32_t version_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_rpc_5ftransport_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// RpcTransport

// string command = 1;
inline void RpcTransport::clear_command() {
  _impl_.command_.ClearToEmpty();
}
inline const std::string& RpcTransport::command() const {
  // @@protoc_insertion_point(field_get:v6.rpc.RpcTransport.command)
  return _internal_command();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RpcTransport::set_command(ArgT0&& arg0, ArgT... args) {
 
 _impl_.command_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:v6.rpc.RpcTransport.command)
}
inline std::string* RpcTransport::mutable_command() {
  std::string* _s = _internal_mutable_command();
  // @@protoc_insertion_point(field_mutable:v6.rpc.RpcTransport.command)
  return _s;
}
inline const std::string& RpcTransport::_internal_command() const {
  return _impl_.command_.Get();
}
inline void RpcTransport::_internal_set_command(const std::string& value) {
  
  _impl_.command_.Set(value, GetArenaForAllocation());
}
inline std::string* RpcTransport::_internal_mutable_command() {
  
  return _impl_.command_.Mutable(GetArenaForAllocation());
}
inline std::string* RpcTransport::release_command() {
  // @@protoc_insertion_point(field_release:v6.rpc.RpcTransport.command)
  return _impl_.command_.Release();
}
inline void RpcTransport::set_allocated_command(std::string* command) {
  if (command != nullptr) {
    
  } else {
    
  }
  _impl_.command_.SetAllocated(command, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.command_.IsDefault()) {
    _impl_.command_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:v6.rpc.RpcTransport.command)
}

// string identity = 2;
inline void RpcTransport::clear_identity() {
  _impl_.identity_.ClearToEmpty();
}
inline const std::string& RpcTransport::identity() const {
  // @@protoc_insertion_point(field_get:v6.rpc.RpcTransport.identity)
  return _internal_identity();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RpcTransport::set_identity(ArgT0&& arg0, ArgT... args) {
 
 _impl_.identity_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:v6.rpc.RpcTransport.identity)
}
inline std::string* RpcTransport::mutable_identity() {
  std::string* _s = _internal_mutable_identity();
  // @@protoc_insertion_point(field_mutable:v6.rpc.RpcTransport.identity)
  return _s;
}
inline const std::string& RpcTransport::_internal_identity() const {
  return _impl_.identity_.Get();
}
inline void RpcTransport::_internal_set_identity(const std::string& value) {
  
  _impl_.identity_.Set(value, GetArenaForAllocation());
}
inline std::string* RpcTransport::_internal_mutable_identity() {
  
  return _impl_.identity_.Mutable(GetArenaForAllocation());
}
inline std::string* RpcTransport::release_identity() {
  // @@protoc_insertion_point(field_release:v6.rpc.RpcTransport.identity)
  return _impl_.identity_.Release();
}
inline void RpcTransport::set_allocated_identity(std::string* identity) {
  if (identity != nullptr) {
    
  } else {
    
  }
  _impl_.identity_.SetAllocated(identity, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.identity_.IsDefault()) {
    _impl_.identity_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:v6.rpc.RpcTransport.identity)
}

// int32 type = 3;
inline void RpcTransport::clear_type() {
  _impl_.type_ = 0;
}
inline int32_t RpcTransport::_internal_type() const {
  return _impl_.type_;
}
inline int32_t RpcTransport::type() const {
  // @@protoc_insertion_point(field_get:v6.rpc.RpcTransport.type)
  return _internal_type();
}
inline void RpcTransport::_internal_set_type(int32_t value) {
  
  _impl_.type_ = value;
}
inline void RpcTransport::set_type(int32_t value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:v6.rpc.RpcTransport.type)
}

// .google.protobuf.Any data = 4;
inline bool RpcTransport::_internal_has_data() const {
  return this != internal_default_instance() && _impl_.data_ != nullptr;
}
inline bool RpcTransport::has_data() const {
  return _internal_has_data();
}
inline const ::PROTOBUF_NAMESPACE_ID::Any& RpcTransport::_internal_data() const {
  const ::PROTOBUF_NAMESPACE_ID::Any* p = _impl_.data_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Any&>(
      ::PROTOBUF_NAMESPACE_ID::_Any_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Any& RpcTransport::data() const {
  // @@protoc_insertion_point(field_get:v6.rpc.RpcTransport.data)
  return _internal_data();
}
inline void RpcTransport::unsafe_arena_set_allocated_data(
    ::PROTOBUF_NAMESPACE_ID::Any* data) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.data_);
  }
  _impl_.data_ = data;
  if (data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:v6.rpc.RpcTransport.data)
}
inline ::PROTOBUF_NAMESPACE_ID::Any* RpcTransport::release_data() {
  
  ::PROTOBUF_NAMESPACE_ID::Any* temp = _impl_.data_;
  _impl_.data_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Any* RpcTransport::unsafe_arena_release_data() {
  // @@protoc_insertion_point(field_release:v6.rpc.RpcTransport.data)
  
  ::PROTOBUF_NAMESPACE_ID::Any* temp = _impl_.data_;
  _impl_.data_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Any* RpcTransport::_internal_mutable_data() {
  
  if (_impl_.data_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Any>(GetArenaForAllocation());
    _impl_.data_ = p;
  }
  return _impl_.data_;
}
inline ::PROTOBUF_NAMESPACE_ID::Any* RpcTransport::mutable_data() {
  ::PROTOBUF_NAMESPACE_ID::Any* _msg = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:v6.rpc.RpcTransport.data)
  return _msg;
}
inline void RpcTransport::set_allocated_data(::PROTOBUF_NAMESPACE_ID::Any* data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.data_);
  }
  if (data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(data));
    if (message_arena != submessage_arena) {
      data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, data, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.data_ = data;
  // @@protoc_insertion_point(field_set_allocated:v6.rpc.RpcTransport.data)
}

// int32 status = 5;
inline void RpcTransport::clear_status() {
  _impl_.status_ = 0;
}
inline int32_t RpcTransport::_internal_status() const {
  return _impl_.status_;
}
inline int32_t RpcTransport::status() const {
  // @@protoc_insertion_point(field_get:v6.rpc.RpcTransport.status)
  return _internal_status();
}
inline void RpcTransport::_internal_set_status(int32_t value) {
  
  _impl_.status_ = value;
}
inline void RpcTransport::set_status(int32_t value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:v6.rpc.RpcTransport.status)
}

// string message = 6;
inline void RpcTransport::clear_message() {
  _impl_.message_.ClearToEmpty();
}
inline const std::string& RpcTransport::message() const {
  // @@protoc_insertion_point(field_get:v6.rpc.RpcTransport.message)
  return _internal_message();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RpcTransport::set_message(ArgT0&& arg0, ArgT... args) {
 
 _impl_.message_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:v6.rpc.RpcTransport.message)
}
inline std::string* RpcTransport::mutable_message() {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:v6.rpc.RpcTransport.message)
  return _s;
}
inline const std::string& RpcTransport::_internal_message() const {
  return _impl_.message_.Get();
}
inline void RpcTransport::_internal_set_message(const std::string& value) {
  
  _impl_.message_.Set(value, GetArenaForAllocation());
}
inline std::string* RpcTransport::_internal_mutable_message() {
  
  return _impl_.message_.Mutable(GetArenaForAllocation());
}
inline std::string* RpcTransport::release_message() {
  // @@protoc_insertion_point(field_release:v6.rpc.RpcTransport.message)
  return _impl_.message_.Release();
}
inline void RpcTransport::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  _impl_.message_.SetAllocated(message, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.message_.IsDefault()) {
    _impl_.message_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:v6.rpc.RpcTransport.message)
}

// .v6.rpc.RpcMetaData meta = 7;
inline bool RpcTransport::_internal_has_meta() const {
  return this != internal_default_instance() && _impl_.meta_ != nullptr;
}
inline bool RpcTransport::has_meta() const {
  return _internal_has_meta();
}
inline void RpcTransport::clear_meta() {
  if (GetArenaForAllocation() == nullptr && _impl_.meta_ != nullptr) {
    delete _impl_.meta_;
  }
  _impl_.meta_ = nullptr;
}
inline const ::v6::rpc::RpcMetaData& RpcTransport::_internal_meta() const {
  const ::v6::rpc::RpcMetaData* p = _impl_.meta_;
  return p != nullptr ? *p : reinterpret_cast<const ::v6::rpc::RpcMetaData&>(
      ::v6::rpc::_RpcMetaData_default_instance_);
}
inline const ::v6::rpc::RpcMetaData& RpcTransport::meta() const {
  // @@protoc_insertion_point(field_get:v6.rpc.RpcTransport.meta)
  return _internal_meta();
}
inline void RpcTransport::unsafe_arena_set_allocated_meta(
    ::v6::rpc::RpcMetaData* meta) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.meta_);
  }
  _impl_.meta_ = meta;
  if (meta) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:v6.rpc.RpcTransport.meta)
}
inline ::v6::rpc::RpcMetaData* RpcTransport::release_meta() {
  
  ::v6::rpc::RpcMetaData* temp = _impl_.meta_;
  _impl_.meta_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::v6::rpc::RpcMetaData* RpcTransport::unsafe_arena_release_meta() {
  // @@protoc_insertion_point(field_release:v6.rpc.RpcTransport.meta)
  
  ::v6::rpc::RpcMetaData* temp = _impl_.meta_;
  _impl_.meta_ = nullptr;
  return temp;
}
inline ::v6::rpc::RpcMetaData* RpcTransport::_internal_mutable_meta() {
  
  if (_impl_.meta_ == nullptr) {
    auto* p = CreateMaybeMessage<::v6::rpc::RpcMetaData>(GetArenaForAllocation());
    _impl_.meta_ = p;
  }
  return _impl_.meta_;
}
inline ::v6::rpc::RpcMetaData* RpcTransport::mutable_meta() {
  ::v6::rpc::RpcMetaData* _msg = _internal_mutable_meta();
  // @@protoc_insertion_point(field_mutable:v6.rpc.RpcTransport.meta)
  return _msg;
}
inline void RpcTransport::set_allocated_meta(::v6::rpc::RpcMetaData* meta) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.meta_;
  }
  if (meta) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(meta);
    if (message_arena != submessage_arena) {
      meta = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, meta, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.meta_ = meta;
  // @@protoc_insertion_point(field_set_allocated:v6.rpc.RpcTransport.meta)
}

// -------------------------------------------------------------------

// RpcHeaderValue

// repeated string value = 1;
inline int RpcHeaderValue::_internal_value_size() const {
  return _impl_.value_.size();
}
inline int RpcHeaderValue::value_size() const {
  return _internal_value_size();
}
inline void RpcHeaderValue::clear_value() {
  _impl_.value_.Clear();
}
inline std::string* RpcHeaderValue::add_value() {
  std::string* _s = _internal_add_value();
  // @@protoc_insertion_point(field_add_mutable:v6.rpc.RpcHeaderValue.value)
  return _s;
}
inline const std::string& RpcHeaderValue::_internal_value(int index) const {
  return _impl_.value_.Get(index);
}
inline const std::string& RpcHeaderValue::value(int index) const {
  // @@protoc_insertion_point(field_get:v6.rpc.RpcHeaderValue.value)
  return _internal_value(index);
}
inline std::string* RpcHeaderValue::mutable_value(int index) {
  // @@protoc_insertion_point(field_mutable:v6.rpc.RpcHeaderValue.value)
  return _impl_.value_.Mutable(index);
}
inline void RpcHeaderValue::set_value(int index, const std::string& value) {
  _impl_.value_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:v6.rpc.RpcHeaderValue.value)
}
inline void RpcHeaderValue::set_value(int index, std::string&& value) {
  _impl_.value_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:v6.rpc.RpcHeaderValue.value)
}
inline void RpcHeaderValue::set_value(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.value_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:v6.rpc.RpcHeaderValue.value)
}
inline void RpcHeaderValue::set_value(int index, const char* value, size_t size) {
  _impl_.value_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:v6.rpc.RpcHeaderValue.value)
}
inline std::string* RpcHeaderValue::_internal_add_value() {
  return _impl_.value_.Add();
}
inline void RpcHeaderValue::add_value(const std::string& value) {
  _impl_.value_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:v6.rpc.RpcHeaderValue.value)
}
inline void RpcHeaderValue::add_value(std::string&& value) {
  _impl_.value_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:v6.rpc.RpcHeaderValue.value)
}
inline void RpcHeaderValue::add_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.value_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:v6.rpc.RpcHeaderValue.value)
}
inline void RpcHeaderValue::add_value(const char* value, size_t size) {
  _impl_.value_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:v6.rpc.RpcHeaderValue.value)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
RpcHeaderValue::value() const {
  // @@protoc_insertion_point(field_list:v6.rpc.RpcHeaderValue.value)
  return _impl_.value_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
RpcHeaderValue::mutable_value() {
  // @@protoc_insertion_point(field_mutable_list:v6.rpc.RpcHeaderValue.value)
  return &_impl_.value_;
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// RpcMetaData

// int64 timestamp = 1;
inline void RpcMetaData::clear_timestamp() {
  _impl_.timestamp_ = int64_t{0};
}
inline int64_t RpcMetaData::_internal_timestamp() const {
  return _impl_.timestamp_;
}
inline int64_t RpcMetaData::timestamp() const {
  // @@protoc_insertion_point(field_get:v6.rpc.RpcMetaData.timestamp)
  return _internal_timestamp();
}
inline void RpcMetaData::_internal_set_timestamp(int64_t value) {
  
  _impl_.timestamp_ = value;
}
inline void RpcMetaData::set_timestamp(int64_t value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:v6.rpc.RpcMetaData.timestamp)
}

// string from = 2;
inline void RpcMetaData::clear_from() {
  _impl_.from_.ClearToEmpty();
}
inline const std::string& RpcMetaData::from() const {
  // @@protoc_insertion_point(field_get:v6.rpc.RpcMetaData.from)
  return _internal_from();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RpcMetaData::set_from(ArgT0&& arg0, ArgT... args) {
 
 _impl_.from_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:v6.rpc.RpcMetaData.from)
}
inline std::string* RpcMetaData::mutable_from() {
  std::string* _s = _internal_mutable_from();
  // @@protoc_insertion_point(field_mutable:v6.rpc.RpcMetaData.from)
  return _s;
}
inline const std::string& RpcMetaData::_internal_from() const {
  return _impl_.from_.Get();
}
inline void RpcMetaData::_internal_set_from(const std::string& value) {
  
  _impl_.from_.Set(value, GetArenaForAllocation());
}
inline std::string* RpcMetaData::_internal_mutable_from() {
  
  return _impl_.from_.Mutable(GetArenaForAllocation());
}
inline std::string* RpcMetaData::release_from() {
  // @@protoc_insertion_point(field_release:v6.rpc.RpcMetaData.from)
  return _impl_.from_.Release();
}
inline void RpcMetaData::set_allocated_from(std::string* from) {
  if (from != nullptr) {
    
  } else {
    
  }
  _impl_.from_.SetAllocated(from, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.from_.IsDefault()) {
    _impl_.from_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:v6.rpc.RpcMetaData.from)
}

// int32 version = 3;
inline void RpcMetaData::clear_version() {
  _impl_.version_ = 0;
}
inline int32_t RpcMetaData::_internal_version() const {
  return _impl_.version_;
}
inline int32_t RpcMetaData::version() const {
  // @@protoc_insertion_point(field_get:v6.rpc.RpcMetaData.version)
  return _internal_version();
}
inline void RpcMetaData::_internal_set_version(int32_t value) {
  
  _impl_.version_ = value;
}
inline void RpcMetaData::set_version(int32_t value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:v6.rpc.RpcMetaData.version)
}

// map<string, .v6.rpc.RpcHeaderValue> header = 4;
inline int RpcMetaData::_internal_header_size() const {
  return _impl_.header_.size();
}
inline int RpcMetaData::header_size() const {
  return _internal_header_size();
}
inline void RpcMetaData::clear_header() {
  _impl_.header_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::v6::rpc::RpcHeaderValue >&
RpcMetaData::_internal_header() const {
  return _impl_.header_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::v6::rpc::RpcHeaderValue >&
RpcMetaData::header() const {
  // @@protoc_insertion_point(field_map:v6.rpc.RpcMetaData.header)
  return _internal_header();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::v6::rpc::RpcHeaderValue >*
RpcMetaData::_internal_mutable_header() {
  return _impl_.header_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::v6::rpc::RpcHeaderValue >*
RpcMetaData::mutable_header() {
  // @@protoc_insertion_point(field_mutable_map:v6.rpc.RpcMetaData.header)
  return _internal_mutable_header();
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace rpc
}  // namespace v6

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_rpc_5ftransport_2eproto
