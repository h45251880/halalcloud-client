// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: public_user_offline.proto

#include "public_user_offline.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace v6 {
namespace services {
namespace pub {
PROTOBUF_CONSTEXPR TaskParseRequest::TaskParseRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.url_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.file_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TaskParseRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TaskParseRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TaskParseRequestDefaultTypeInternal() {}
  union {
    TaskParseRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TaskParseRequestDefaultTypeInternal _TaskParseRequest_default_instance_;
PROTOBUF_CONSTEXPR TaskMeta::TaskMeta(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.identity_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.file_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.url_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.lock_by_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.message_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.addon_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.type_)*/0
  , /*decltype(_impl_.status_)*/0
  , /*decltype(_impl_.update_ts_)*/int64_t{0}
  , /*decltype(_impl_.create_ts_)*/int64_t{0}
  , /*decltype(_impl_.locked_)*/false
  , /*decltype(_impl_.code_)*/0
  , /*decltype(_impl_.size_)*/uint64_t{0u}
  , /*decltype(_impl_.retries_)*/uint64_t{0u}
  , /*decltype(_impl_.progress_)*/uint64_t{0u}
  , /*decltype(_impl_.bytes_total_)*/uint64_t{0u}
  , /*decltype(_impl_.bytes_processed_)*/uint64_t{0u}
  , /*decltype(_impl_.flag_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TaskMetaDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TaskMetaDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TaskMetaDefaultTypeInternal() {}
  union {
    TaskMeta _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TaskMetaDefaultTypeInternal _TaskMeta_default_instance_;
PROTOBUF_CONSTEXPR TaskFile::TaskFile(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.identity_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.path_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.update_ts_)*/int64_t{0}
  , /*decltype(_impl_.create_ts_)*/int64_t{0}
  , /*decltype(_impl_.size_)*/uint64_t{0u}
  , /*decltype(_impl_.status_)*/0
  , /*decltype(_impl_.index_)*/0
  , /*decltype(_impl_.bytes_total_)*/uint64_t{0u}
  , /*decltype(_impl_.directory_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TaskFileDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TaskFileDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TaskFileDefaultTypeInternal() {}
  union {
    TaskFile _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TaskFileDefaultTypeInternal _TaskFile_default_instance_;
PROTOBUF_CONSTEXPR TaskParseResponse::TaskParseResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.task_files_)*/{}
  , /*decltype(_impl_.meta_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TaskParseResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TaskParseResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TaskParseResponseDefaultTypeInternal() {}
  union {
    TaskParseResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TaskParseResponseDefaultTypeInternal _TaskParseResponse_default_instance_;
PROTOBUF_CONSTEXPR TaskAddRequest::TaskAddRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.url_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.file_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TaskAddRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TaskAddRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TaskAddRequestDefaultTypeInternal() {}
  union {
    TaskAddRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TaskAddRequestDefaultTypeInternal _TaskAddRequest_default_instance_;
PROTOBUF_CONSTEXPR TaskAddResponse::TaskAddResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.meta_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TaskAddResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TaskAddResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TaskAddResponseDefaultTypeInternal() {}
  union {
    TaskAddResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TaskAddResponseDefaultTypeInternal _TaskAddResponse_default_instance_;
}  // namespace pub
}  // namespace services
}  // namespace v6
static ::_pb::Metadata file_level_metadata_public_5fuser_5foffline_2eproto[6];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_public_5fuser_5foffline_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_public_5fuser_5foffline_2eproto = nullptr;

const uint32_t TableStruct_public_5fuser_5foffline_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::v6::services::pub::TaskParseRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::v6::services::pub::TaskParseRequest, _impl_.url_),
  PROTOBUF_FIELD_OFFSET(::v6::services::pub::TaskParseRequest, _impl_.file_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::v6::services::pub::TaskMeta, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::v6::services::pub::TaskMeta, _impl_.identity_),
  PROTOBUF_FIELD_OFFSET(::v6::services::pub::TaskMeta, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::v6::services::pub::TaskMeta, _impl_.status_),
  PROTOBUF_FIELD_OFFSET(::v6::services::pub::TaskMeta, _impl_.locked_),
  PROTOBUF_FIELD_OFFSET(::v6::services::pub::TaskMeta, _impl_.update_ts_),
  PROTOBUF_FIELD_OFFSET(::v6::services::pub::TaskMeta, _impl_.file_),
  PROTOBUF_FIELD_OFFSET(::v6::services::pub::TaskMeta, _impl_.create_ts_),
  PROTOBUF_FIELD_OFFSET(::v6::services::pub::TaskMeta, _impl_.url_),
  PROTOBUF_FIELD_OFFSET(::v6::services::pub::TaskMeta, _impl_.size_),
  PROTOBUF_FIELD_OFFSET(::v6::services::pub::TaskMeta, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::v6::services::pub::TaskMeta, _impl_.lock_by_),
  PROTOBUF_FIELD_OFFSET(::v6::services::pub::TaskMeta, _impl_.code_),
  PROTOBUF_FIELD_OFFSET(::v6::services::pub::TaskMeta, _impl_.message_),
  PROTOBUF_FIELD_OFFSET(::v6::services::pub::TaskMeta, _impl_.addon_),
  PROTOBUF_FIELD_OFFSET(::v6::services::pub::TaskMeta, _impl_.retries_),
  PROTOBUF_FIELD_OFFSET(::v6::services::pub::TaskMeta, _impl_.progress_),
  PROTOBUF_FIELD_OFFSET(::v6::services::pub::TaskMeta, _impl_.bytes_total_),
  PROTOBUF_FIELD_OFFSET(::v6::services::pub::TaskMeta, _impl_.bytes_processed_),
  PROTOBUF_FIELD_OFFSET(::v6::services::pub::TaskMeta, _impl_.flag_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::v6::services::pub::TaskFile, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::v6::services::pub::TaskFile, _impl_.identity_),
  PROTOBUF_FIELD_OFFSET(::v6::services::pub::TaskFile, _impl_.path_),
  PROTOBUF_FIELD_OFFSET(::v6::services::pub::TaskFile, _impl_.status_),
  PROTOBUF_FIELD_OFFSET(::v6::services::pub::TaskFile, _impl_.update_ts_),
  PROTOBUF_FIELD_OFFSET(::v6::services::pub::TaskFile, _impl_.create_ts_),
  PROTOBUF_FIELD_OFFSET(::v6::services::pub::TaskFile, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::v6::services::pub::TaskFile, _impl_.size_),
  PROTOBUF_FIELD_OFFSET(::v6::services::pub::TaskFile, _impl_.bytes_total_),
  PROTOBUF_FIELD_OFFSET(::v6::services::pub::TaskFile, _impl_.index_),
  PROTOBUF_FIELD_OFFSET(::v6::services::pub::TaskFile, _impl_.directory_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::v6::services::pub::TaskParseResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::v6::services::pub::TaskParseResponse, _impl_.meta_),
  PROTOBUF_FIELD_OFFSET(::v6::services::pub::TaskParseResponse, _impl_.task_files_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::v6::services::pub::TaskAddRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::v6::services::pub::TaskAddRequest, _impl_.url_),
  PROTOBUF_FIELD_OFFSET(::v6::services::pub::TaskAddRequest, _impl_.file_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::v6::services::pub::TaskAddResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::v6::services::pub::TaskAddResponse, _impl_.meta_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::v6::services::pub::TaskParseRequest)},
  { 8, -1, -1, sizeof(::v6::services::pub::TaskMeta)},
  { 33, -1, -1, sizeof(::v6::services::pub::TaskFile)},
  { 49, -1, -1, sizeof(::v6::services::pub::TaskParseResponse)},
  { 57, -1, -1, sizeof(::v6::services::pub::TaskAddRequest)},
  { 65, -1, -1, sizeof(::v6::services::pub::TaskAddResponse)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::v6::services::pub::_TaskParseRequest_default_instance_._instance,
  &::v6::services::pub::_TaskMeta_default_instance_._instance,
  &::v6::services::pub::_TaskFile_default_instance_._instance,
  &::v6::services::pub::_TaskParseResponse_default_instance_._instance,
  &::v6::services::pub::_TaskAddRequest_default_instance_._instance,
  &::v6::services::pub::_TaskAddResponse_default_instance_._instance,
};

const char descriptor_table_protodef_public_5fuser_5foffline_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\031public_user_offline.proto\022\017v6.services"
  ".pub\"-\n\020TaskParseRequest\022\013\n\003url\030\001 \001(\t\022\014\n"
  "\004file\030\002 \001(\t\"\305\002\n\010TaskMeta\022\020\n\010identity\030\001 \001"
  "(\t\022\014\n\004type\030\002 \001(\005\022\016\n\006status\030\003 \001(\005\022\016\n\006lock"
  "ed\030\004 \001(\010\022\021\n\tupdate_ts\030\005 \001(\003\022\014\n\004file\030\006 \001("
  "\t\022\021\n\tcreate_ts\030\007 \001(\003\022\013\n\003url\030\010 \001(\t\022\014\n\004siz"
  "e\030\t \001(\004\022\014\n\004name\030\n \001(\t\022\017\n\007lock_by\030\013 \001(\t\022\014"
  "\n\004code\030\014 \001(\005\022\017\n\007message\030\r \001(\t\022\r\n\005addon\030\016"
  " \001(\t\022\017\n\007retries\030\017 \001(\004\022\020\n\010progress\030\020 \001(\004\022"
  "\023\n\013bytes_total\030\021 \001(\004\022\027\n\017bytes_processed\030"
  "\022 \001(\004\022\014\n\004flag\030\023 \001(\005\"\263\001\n\010TaskFile\022\020\n\010iden"
  "tity\030\001 \001(\t\022\014\n\004path\030\004 \001(\t\022\016\n\006status\030\005 \001(\005"
  "\022\021\n\tupdate_ts\030\006 \001(\003\022\021\n\tcreate_ts\030\007 \001(\003\022\014"
  "\n\004name\030\010 \001(\t\022\014\n\004size\030\t \001(\004\022\023\n\013bytes_tota"
  "l\030\r \001(\004\022\r\n\005index\030\017 \001(\005\022\021\n\tdirectory\030\020 \001("
  "\010\"k\n\021TaskParseResponse\022\'\n\004meta\030\001 \001(\0132\031.v"
  "6.services.pub.TaskMeta\022-\n\ntask_files\030\002 "
  "\003(\0132\031.v6.services.pub.TaskFile\"+\n\016TaskAd"
  "dRequest\022\013\n\003url\030\001 \001(\t\022\014\n\004file\030\002 \001(\t\":\n\017T"
  "askAddResponse\022\'\n\004meta\030\001 \001(\0132\031.v6.servic"
  "es.pub.TaskMeta2\256\001\n\016PubOfflineTask\022P\n\005Pa"
  "rse\022!.v6.services.pub.TaskParseRequest\032\""
  ".v6.services.pub.TaskParseResponse\"\000\022J\n\003"
  "Add\022\037.v6.services.pub.TaskAddRequest\032 .v"
  "6.services.pub.TaskAddResponse\"\000B6Z4gith"
  "ub.com/city404/v6-public-rpc-proto/go/v6"
  "/offlineb\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_public_5fuser_5foffline_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_public_5fuser_5foffline_2eproto = {
    false, false, 1056, descriptor_table_protodef_public_5fuser_5foffline_2eproto,
    "public_user_offline.proto",
    &descriptor_table_public_5fuser_5foffline_2eproto_once, nullptr, 0, 6,
    schemas, file_default_instances, TableStruct_public_5fuser_5foffline_2eproto::offsets,
    file_level_metadata_public_5fuser_5foffline_2eproto, file_level_enum_descriptors_public_5fuser_5foffline_2eproto,
    file_level_service_descriptors_public_5fuser_5foffline_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_public_5fuser_5foffline_2eproto_getter() {
  return &descriptor_table_public_5fuser_5foffline_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_public_5fuser_5foffline_2eproto(&descriptor_table_public_5fuser_5foffline_2eproto);
namespace v6 {
namespace services {
namespace pub {

// ===================================================================

class TaskParseRequest::_Internal {
 public:
};

TaskParseRequest::TaskParseRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:v6.services.pub.TaskParseRequest)
}
TaskParseRequest::TaskParseRequest(const TaskParseRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TaskParseRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.url_){}
    , decltype(_impl_.file_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.url_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_url().empty()) {
    _this->_impl_.url_.Set(from._internal_url(), 
      _this->GetArenaForAllocation());
  }
  _impl_.file_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.file_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_file().empty()) {
    _this->_impl_.file_.Set(from._internal_file(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:v6.services.pub.TaskParseRequest)
}

inline void TaskParseRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.url_){}
    , decltype(_impl_.file_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.url_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.file_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.file_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

TaskParseRequest::~TaskParseRequest() {
  // @@protoc_insertion_point(destructor:v6.services.pub.TaskParseRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TaskParseRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.url_.Destroy();
  _impl_.file_.Destroy();
}

void TaskParseRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TaskParseRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:v6.services.pub.TaskParseRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.url_.ClearToEmpty();
  _impl_.file_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TaskParseRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string url = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_url();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "v6.services.pub.TaskParseRequest.url"));
        } else
          goto handle_unusual;
        continue;
      // string file = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_file();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "v6.services.pub.TaskParseRequest.file"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TaskParseRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:v6.services.pub.TaskParseRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string url = 1;
  if (!this->_internal_url().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_url().data(), static_cast<int>(this->_internal_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "v6.services.pub.TaskParseRequest.url");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_url(), target);
  }

  // string file = 2;
  if (!this->_internal_file().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_file().data(), static_cast<int>(this->_internal_file().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "v6.services.pub.TaskParseRequest.file");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_file(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:v6.services.pub.TaskParseRequest)
  return target;
}

size_t TaskParseRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:v6.services.pub.TaskParseRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string url = 1;
  if (!this->_internal_url().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_url());
  }

  // string file = 2;
  if (!this->_internal_file().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_file());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TaskParseRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TaskParseRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TaskParseRequest::GetClassData() const { return &_class_data_; }


void TaskParseRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TaskParseRequest*>(&to_msg);
  auto& from = static_cast<const TaskParseRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:v6.services.pub.TaskParseRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_url().empty()) {
    _this->_internal_set_url(from._internal_url());
  }
  if (!from._internal_file().empty()) {
    _this->_internal_set_file(from._internal_file());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TaskParseRequest::CopyFrom(const TaskParseRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:v6.services.pub.TaskParseRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TaskParseRequest::IsInitialized() const {
  return true;
}

void TaskParseRequest::InternalSwap(TaskParseRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.url_, lhs_arena,
      &other->_impl_.url_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.file_, lhs_arena,
      &other->_impl_.file_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata TaskParseRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_public_5fuser_5foffline_2eproto_getter, &descriptor_table_public_5fuser_5foffline_2eproto_once,
      file_level_metadata_public_5fuser_5foffline_2eproto[0]);
}

// ===================================================================

class TaskMeta::_Internal {
 public:
};

TaskMeta::TaskMeta(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:v6.services.pub.TaskMeta)
}
TaskMeta::TaskMeta(const TaskMeta& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TaskMeta* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.identity_){}
    , decltype(_impl_.file_){}
    , decltype(_impl_.url_){}
    , decltype(_impl_.name_){}
    , decltype(_impl_.lock_by_){}
    , decltype(_impl_.message_){}
    , decltype(_impl_.addon_){}
    , decltype(_impl_.type_){}
    , decltype(_impl_.status_){}
    , decltype(_impl_.update_ts_){}
    , decltype(_impl_.create_ts_){}
    , decltype(_impl_.locked_){}
    , decltype(_impl_.code_){}
    , decltype(_impl_.size_){}
    , decltype(_impl_.retries_){}
    , decltype(_impl_.progress_){}
    , decltype(_impl_.bytes_total_){}
    , decltype(_impl_.bytes_processed_){}
    , decltype(_impl_.flag_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.identity_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.identity_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_identity().empty()) {
    _this->_impl_.identity_.Set(from._internal_identity(), 
      _this->GetArenaForAllocation());
  }
  _impl_.file_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.file_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_file().empty()) {
    _this->_impl_.file_.Set(from._internal_file(), 
      _this->GetArenaForAllocation());
  }
  _impl_.url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.url_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_url().empty()) {
    _this->_impl_.url_.Set(from._internal_url(), 
      _this->GetArenaForAllocation());
  }
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.lock_by_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.lock_by_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_lock_by().empty()) {
    _this->_impl_.lock_by_.Set(from._internal_lock_by(), 
      _this->GetArenaForAllocation());
  }
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_message().empty()) {
    _this->_impl_.message_.Set(from._internal_message(), 
      _this->GetArenaForAllocation());
  }
  _impl_.addon_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.addon_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_addon().empty()) {
    _this->_impl_.addon_.Set(from._internal_addon(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.type_, &from._impl_.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.flag_) -
    reinterpret_cast<char*>(&_impl_.type_)) + sizeof(_impl_.flag_));
  // @@protoc_insertion_point(copy_constructor:v6.services.pub.TaskMeta)
}

inline void TaskMeta::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.identity_){}
    , decltype(_impl_.file_){}
    , decltype(_impl_.url_){}
    , decltype(_impl_.name_){}
    , decltype(_impl_.lock_by_){}
    , decltype(_impl_.message_){}
    , decltype(_impl_.addon_){}
    , decltype(_impl_.type_){0}
    , decltype(_impl_.status_){0}
    , decltype(_impl_.update_ts_){int64_t{0}}
    , decltype(_impl_.create_ts_){int64_t{0}}
    , decltype(_impl_.locked_){false}
    , decltype(_impl_.code_){0}
    , decltype(_impl_.size_){uint64_t{0u}}
    , decltype(_impl_.retries_){uint64_t{0u}}
    , decltype(_impl_.progress_){uint64_t{0u}}
    , decltype(_impl_.bytes_total_){uint64_t{0u}}
    , decltype(_impl_.bytes_processed_){uint64_t{0u}}
    , decltype(_impl_.flag_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.identity_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.identity_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.file_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.file_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.url_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.lock_by_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.lock_by_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.addon_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.addon_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

TaskMeta::~TaskMeta() {
  // @@protoc_insertion_point(destructor:v6.services.pub.TaskMeta)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TaskMeta::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.identity_.Destroy();
  _impl_.file_.Destroy();
  _impl_.url_.Destroy();
  _impl_.name_.Destroy();
  _impl_.lock_by_.Destroy();
  _impl_.message_.Destroy();
  _impl_.addon_.Destroy();
}

void TaskMeta::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TaskMeta::Clear() {
// @@protoc_insertion_point(message_clear_start:v6.services.pub.TaskMeta)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.identity_.ClearToEmpty();
  _impl_.file_.ClearToEmpty();
  _impl_.url_.ClearToEmpty();
  _impl_.name_.ClearToEmpty();
  _impl_.lock_by_.ClearToEmpty();
  _impl_.message_.ClearToEmpty();
  _impl_.addon_.ClearToEmpty();
  ::memset(&_impl_.type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.flag_) -
      reinterpret_cast<char*>(&_impl_.type_)) + sizeof(_impl_.flag_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TaskMeta::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string identity = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_identity();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "v6.services.pub.TaskMeta.identity"));
        } else
          goto handle_unusual;
        continue;
      // int32 type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 status = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool locked = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.locked_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 update_ts = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.update_ts_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string file = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_file();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "v6.services.pub.TaskMeta.file"));
        } else
          goto handle_unusual;
        continue;
      // int64 create_ts = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.create_ts_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string url = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_url();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "v6.services.pub.TaskMeta.url"));
        } else
          goto handle_unusual;
        continue;
      // uint64 size = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _impl_.size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string name = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "v6.services.pub.TaskMeta.name"));
        } else
          goto handle_unusual;
        continue;
      // string lock_by = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          auto str = _internal_mutable_lock_by();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "v6.services.pub.TaskMeta.lock_by"));
        } else
          goto handle_unusual;
        continue;
      // int32 code = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _impl_.code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string message = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          auto str = _internal_mutable_message();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "v6.services.pub.TaskMeta.message"));
        } else
          goto handle_unusual;
        continue;
      // string addon = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          auto str = _internal_mutable_addon();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "v6.services.pub.TaskMeta.addon"));
        } else
          goto handle_unusual;
        continue;
      // uint64 retries = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 120)) {
          _impl_.retries_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 progress = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 128)) {
          _impl_.progress_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 bytes_total = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 136)) {
          _impl_.bytes_total_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 bytes_processed = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 144)) {
          _impl_.bytes_processed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 flag = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 152)) {
          _impl_.flag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TaskMeta::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:v6.services.pub.TaskMeta)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string identity = 1;
  if (!this->_internal_identity().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_identity().data(), static_cast<int>(this->_internal_identity().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "v6.services.pub.TaskMeta.identity");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_identity(), target);
  }

  // int32 type = 2;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_type(), target);
  }

  // int32 status = 3;
  if (this->_internal_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_status(), target);
  }

  // bool locked = 4;
  if (this->_internal_locked() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_locked(), target);
  }

  // int64 update_ts = 5;
  if (this->_internal_update_ts() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(5, this->_internal_update_ts(), target);
  }

  // string file = 6;
  if (!this->_internal_file().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_file().data(), static_cast<int>(this->_internal_file().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "v6.services.pub.TaskMeta.file");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_file(), target);
  }

  // int64 create_ts = 7;
  if (this->_internal_create_ts() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(7, this->_internal_create_ts(), target);
  }

  // string url = 8;
  if (!this->_internal_url().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_url().data(), static_cast<int>(this->_internal_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "v6.services.pub.TaskMeta.url");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_url(), target);
  }

  // uint64 size = 9;
  if (this->_internal_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(9, this->_internal_size(), target);
  }

  // string name = 10;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "v6.services.pub.TaskMeta.name");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_name(), target);
  }

  // string lock_by = 11;
  if (!this->_internal_lock_by().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_lock_by().data(), static_cast<int>(this->_internal_lock_by().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "v6.services.pub.TaskMeta.lock_by");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_lock_by(), target);
  }

  // int32 code = 12;
  if (this->_internal_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(12, this->_internal_code(), target);
  }

  // string message = 13;
  if (!this->_internal_message().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "v6.services.pub.TaskMeta.message");
    target = stream->WriteStringMaybeAliased(
        13, this->_internal_message(), target);
  }

  // string addon = 14;
  if (!this->_internal_addon().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_addon().data(), static_cast<int>(this->_internal_addon().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "v6.services.pub.TaskMeta.addon");
    target = stream->WriteStringMaybeAliased(
        14, this->_internal_addon(), target);
  }

  // uint64 retries = 15;
  if (this->_internal_retries() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(15, this->_internal_retries(), target);
  }

  // uint64 progress = 16;
  if (this->_internal_progress() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(16, this->_internal_progress(), target);
  }

  // uint64 bytes_total = 17;
  if (this->_internal_bytes_total() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(17, this->_internal_bytes_total(), target);
  }

  // uint64 bytes_processed = 18;
  if (this->_internal_bytes_processed() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(18, this->_internal_bytes_processed(), target);
  }

  // int32 flag = 19;
  if (this->_internal_flag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(19, this->_internal_flag(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:v6.services.pub.TaskMeta)
  return target;
}

size_t TaskMeta::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:v6.services.pub.TaskMeta)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string identity = 1;
  if (!this->_internal_identity().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_identity());
  }

  // string file = 6;
  if (!this->_internal_file().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_file());
  }

  // string url = 8;
  if (!this->_internal_url().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_url());
  }

  // string name = 10;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string lock_by = 11;
  if (!this->_internal_lock_by().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_lock_by());
  }

  // string message = 13;
  if (!this->_internal_message().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message());
  }

  // string addon = 14;
  if (!this->_internal_addon().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_addon());
  }

  // int32 type = 2;
  if (this->_internal_type() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_type());
  }

  // int32 status = 3;
  if (this->_internal_status() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_status());
  }

  // int64 update_ts = 5;
  if (this->_internal_update_ts() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_update_ts());
  }

  // int64 create_ts = 7;
  if (this->_internal_create_ts() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_create_ts());
  }

  // bool locked = 4;
  if (this->_internal_locked() != 0) {
    total_size += 1 + 1;
  }

  // int32 code = 12;
  if (this->_internal_code() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_code());
  }

  // uint64 size = 9;
  if (this->_internal_size() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_size());
  }

  // uint64 retries = 15;
  if (this->_internal_retries() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_retries());
  }

  // uint64 progress = 16;
  if (this->_internal_progress() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt64Size(
        this->_internal_progress());
  }

  // uint64 bytes_total = 17;
  if (this->_internal_bytes_total() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt64Size(
        this->_internal_bytes_total());
  }

  // uint64 bytes_processed = 18;
  if (this->_internal_bytes_processed() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt64Size(
        this->_internal_bytes_processed());
  }

  // int32 flag = 19;
  if (this->_internal_flag() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_flag());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TaskMeta::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TaskMeta::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TaskMeta::GetClassData() const { return &_class_data_; }


void TaskMeta::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TaskMeta*>(&to_msg);
  auto& from = static_cast<const TaskMeta&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:v6.services.pub.TaskMeta)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_identity().empty()) {
    _this->_internal_set_identity(from._internal_identity());
  }
  if (!from._internal_file().empty()) {
    _this->_internal_set_file(from._internal_file());
  }
  if (!from._internal_url().empty()) {
    _this->_internal_set_url(from._internal_url());
  }
  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (!from._internal_lock_by().empty()) {
    _this->_internal_set_lock_by(from._internal_lock_by());
  }
  if (!from._internal_message().empty()) {
    _this->_internal_set_message(from._internal_message());
  }
  if (!from._internal_addon().empty()) {
    _this->_internal_set_addon(from._internal_addon());
  }
  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  if (from._internal_status() != 0) {
    _this->_internal_set_status(from._internal_status());
  }
  if (from._internal_update_ts() != 0) {
    _this->_internal_set_update_ts(from._internal_update_ts());
  }
  if (from._internal_create_ts() != 0) {
    _this->_internal_set_create_ts(from._internal_create_ts());
  }
  if (from._internal_locked() != 0) {
    _this->_internal_set_locked(from._internal_locked());
  }
  if (from._internal_code() != 0) {
    _this->_internal_set_code(from._internal_code());
  }
  if (from._internal_size() != 0) {
    _this->_internal_set_size(from._internal_size());
  }
  if (from._internal_retries() != 0) {
    _this->_internal_set_retries(from._internal_retries());
  }
  if (from._internal_progress() != 0) {
    _this->_internal_set_progress(from._internal_progress());
  }
  if (from._internal_bytes_total() != 0) {
    _this->_internal_set_bytes_total(from._internal_bytes_total());
  }
  if (from._internal_bytes_processed() != 0) {
    _this->_internal_set_bytes_processed(from._internal_bytes_processed());
  }
  if (from._internal_flag() != 0) {
    _this->_internal_set_flag(from._internal_flag());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TaskMeta::CopyFrom(const TaskMeta& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:v6.services.pub.TaskMeta)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TaskMeta::IsInitialized() const {
  return true;
}

void TaskMeta::InternalSwap(TaskMeta* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.identity_, lhs_arena,
      &other->_impl_.identity_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.file_, lhs_arena,
      &other->_impl_.file_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.url_, lhs_arena,
      &other->_impl_.url_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.lock_by_, lhs_arena,
      &other->_impl_.lock_by_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.message_, lhs_arena,
      &other->_impl_.message_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.addon_, lhs_arena,
      &other->_impl_.addon_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TaskMeta, _impl_.flag_)
      + sizeof(TaskMeta::_impl_.flag_)
      - PROTOBUF_FIELD_OFFSET(TaskMeta, _impl_.type_)>(
          reinterpret_cast<char*>(&_impl_.type_),
          reinterpret_cast<char*>(&other->_impl_.type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TaskMeta::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_public_5fuser_5foffline_2eproto_getter, &descriptor_table_public_5fuser_5foffline_2eproto_once,
      file_level_metadata_public_5fuser_5foffline_2eproto[1]);
}

// ===================================================================

class TaskFile::_Internal {
 public:
};

TaskFile::TaskFile(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:v6.services.pub.TaskFile)
}
TaskFile::TaskFile(const TaskFile& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TaskFile* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.identity_){}
    , decltype(_impl_.path_){}
    , decltype(_impl_.name_){}
    , decltype(_impl_.update_ts_){}
    , decltype(_impl_.create_ts_){}
    , decltype(_impl_.size_){}
    , decltype(_impl_.status_){}
    , decltype(_impl_.index_){}
    , decltype(_impl_.bytes_total_){}
    , decltype(_impl_.directory_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.identity_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.identity_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_identity().empty()) {
    _this->_impl_.identity_.Set(from._internal_identity(), 
      _this->GetArenaForAllocation());
  }
  _impl_.path_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.path_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_path().empty()) {
    _this->_impl_.path_.Set(from._internal_path(), 
      _this->GetArenaForAllocation());
  }
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.update_ts_, &from._impl_.update_ts_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.directory_) -
    reinterpret_cast<char*>(&_impl_.update_ts_)) + sizeof(_impl_.directory_));
  // @@protoc_insertion_point(copy_constructor:v6.services.pub.TaskFile)
}

inline void TaskFile::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.identity_){}
    , decltype(_impl_.path_){}
    , decltype(_impl_.name_){}
    , decltype(_impl_.update_ts_){int64_t{0}}
    , decltype(_impl_.create_ts_){int64_t{0}}
    , decltype(_impl_.size_){uint64_t{0u}}
    , decltype(_impl_.status_){0}
    , decltype(_impl_.index_){0}
    , decltype(_impl_.bytes_total_){uint64_t{0u}}
    , decltype(_impl_.directory_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.identity_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.identity_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.path_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.path_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

TaskFile::~TaskFile() {
  // @@protoc_insertion_point(destructor:v6.services.pub.TaskFile)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TaskFile::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.identity_.Destroy();
  _impl_.path_.Destroy();
  _impl_.name_.Destroy();
}

void TaskFile::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TaskFile::Clear() {
// @@protoc_insertion_point(message_clear_start:v6.services.pub.TaskFile)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.identity_.ClearToEmpty();
  _impl_.path_.ClearToEmpty();
  _impl_.name_.ClearToEmpty();
  ::memset(&_impl_.update_ts_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.directory_) -
      reinterpret_cast<char*>(&_impl_.update_ts_)) + sizeof(_impl_.directory_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TaskFile::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string identity = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_identity();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "v6.services.pub.TaskFile.identity"));
        } else
          goto handle_unusual;
        continue;
      // string path = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_path();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "v6.services.pub.TaskFile.path"));
        } else
          goto handle_unusual;
        continue;
      // int32 status = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 update_ts = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.update_ts_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 create_ts = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.create_ts_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string name = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "v6.services.pub.TaskFile.name"));
        } else
          goto handle_unusual;
        continue;
      // uint64 size = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _impl_.size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 bytes_total = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          _impl_.bytes_total_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 index = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 120)) {
          _impl_.index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool directory = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 128)) {
          _impl_.directory_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TaskFile::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:v6.services.pub.TaskFile)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string identity = 1;
  if (!this->_internal_identity().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_identity().data(), static_cast<int>(this->_internal_identity().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "v6.services.pub.TaskFile.identity");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_identity(), target);
  }

  // string path = 4;
  if (!this->_internal_path().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_path().data(), static_cast<int>(this->_internal_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "v6.services.pub.TaskFile.path");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_path(), target);
  }

  // int32 status = 5;
  if (this->_internal_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_status(), target);
  }

  // int64 update_ts = 6;
  if (this->_internal_update_ts() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(6, this->_internal_update_ts(), target);
  }

  // int64 create_ts = 7;
  if (this->_internal_create_ts() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(7, this->_internal_create_ts(), target);
  }

  // string name = 8;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "v6.services.pub.TaskFile.name");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_name(), target);
  }

  // uint64 size = 9;
  if (this->_internal_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(9, this->_internal_size(), target);
  }

  // uint64 bytes_total = 13;
  if (this->_internal_bytes_total() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(13, this->_internal_bytes_total(), target);
  }

  // int32 index = 15;
  if (this->_internal_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(15, this->_internal_index(), target);
  }

  // bool directory = 16;
  if (this->_internal_directory() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(16, this->_internal_directory(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:v6.services.pub.TaskFile)
  return target;
}

size_t TaskFile::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:v6.services.pub.TaskFile)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string identity = 1;
  if (!this->_internal_identity().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_identity());
  }

  // string path = 4;
  if (!this->_internal_path().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_path());
  }

  // string name = 8;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // int64 update_ts = 6;
  if (this->_internal_update_ts() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_update_ts());
  }

  // int64 create_ts = 7;
  if (this->_internal_create_ts() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_create_ts());
  }

  // uint64 size = 9;
  if (this->_internal_size() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_size());
  }

  // int32 status = 5;
  if (this->_internal_status() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_status());
  }

  // int32 index = 15;
  if (this->_internal_index() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_index());
  }

  // uint64 bytes_total = 13;
  if (this->_internal_bytes_total() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_bytes_total());
  }

  // bool directory = 16;
  if (this->_internal_directory() != 0) {
    total_size += 2 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TaskFile::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TaskFile::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TaskFile::GetClassData() const { return &_class_data_; }


void TaskFile::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TaskFile*>(&to_msg);
  auto& from = static_cast<const TaskFile&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:v6.services.pub.TaskFile)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_identity().empty()) {
    _this->_internal_set_identity(from._internal_identity());
  }
  if (!from._internal_path().empty()) {
    _this->_internal_set_path(from._internal_path());
  }
  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (from._internal_update_ts() != 0) {
    _this->_internal_set_update_ts(from._internal_update_ts());
  }
  if (from._internal_create_ts() != 0) {
    _this->_internal_set_create_ts(from._internal_create_ts());
  }
  if (from._internal_size() != 0) {
    _this->_internal_set_size(from._internal_size());
  }
  if (from._internal_status() != 0) {
    _this->_internal_set_status(from._internal_status());
  }
  if (from._internal_index() != 0) {
    _this->_internal_set_index(from._internal_index());
  }
  if (from._internal_bytes_total() != 0) {
    _this->_internal_set_bytes_total(from._internal_bytes_total());
  }
  if (from._internal_directory() != 0) {
    _this->_internal_set_directory(from._internal_directory());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TaskFile::CopyFrom(const TaskFile& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:v6.services.pub.TaskFile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TaskFile::IsInitialized() const {
  return true;
}

void TaskFile::InternalSwap(TaskFile* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.identity_, lhs_arena,
      &other->_impl_.identity_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.path_, lhs_arena,
      &other->_impl_.path_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TaskFile, _impl_.directory_)
      + sizeof(TaskFile::_impl_.directory_)
      - PROTOBUF_FIELD_OFFSET(TaskFile, _impl_.update_ts_)>(
          reinterpret_cast<char*>(&_impl_.update_ts_),
          reinterpret_cast<char*>(&other->_impl_.update_ts_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TaskFile::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_public_5fuser_5foffline_2eproto_getter, &descriptor_table_public_5fuser_5foffline_2eproto_once,
      file_level_metadata_public_5fuser_5foffline_2eproto[2]);
}

// ===================================================================

class TaskParseResponse::_Internal {
 public:
  static const ::v6::services::pub::TaskMeta& meta(const TaskParseResponse* msg);
};

const ::v6::services::pub::TaskMeta&
TaskParseResponse::_Internal::meta(const TaskParseResponse* msg) {
  return *msg->_impl_.meta_;
}
TaskParseResponse::TaskParseResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:v6.services.pub.TaskParseResponse)
}
TaskParseResponse::TaskParseResponse(const TaskParseResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TaskParseResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.task_files_){from._impl_.task_files_}
    , decltype(_impl_.meta_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_meta()) {
    _this->_impl_.meta_ = new ::v6::services::pub::TaskMeta(*from._impl_.meta_);
  }
  // @@protoc_insertion_point(copy_constructor:v6.services.pub.TaskParseResponse)
}

inline void TaskParseResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.task_files_){arena}
    , decltype(_impl_.meta_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

TaskParseResponse::~TaskParseResponse() {
  // @@protoc_insertion_point(destructor:v6.services.pub.TaskParseResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TaskParseResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.task_files_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.meta_;
}

void TaskParseResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TaskParseResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:v6.services.pub.TaskParseResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.task_files_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.meta_ != nullptr) {
    delete _impl_.meta_;
  }
  _impl_.meta_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TaskParseResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .v6.services.pub.TaskMeta meta = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_meta(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .v6.services.pub.TaskFile task_files = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_task_files(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TaskParseResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:v6.services.pub.TaskParseResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .v6.services.pub.TaskMeta meta = 1;
  if (this->_internal_has_meta()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::meta(this),
        _Internal::meta(this).GetCachedSize(), target, stream);
  }

  // repeated .v6.services.pub.TaskFile task_files = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_task_files_size()); i < n; i++) {
    const auto& repfield = this->_internal_task_files(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:v6.services.pub.TaskParseResponse)
  return target;
}

size_t TaskParseResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:v6.services.pub.TaskParseResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .v6.services.pub.TaskFile task_files = 2;
  total_size += 1UL * this->_internal_task_files_size();
  for (const auto& msg : this->_impl_.task_files_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .v6.services.pub.TaskMeta meta = 1;
  if (this->_internal_has_meta()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.meta_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TaskParseResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TaskParseResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TaskParseResponse::GetClassData() const { return &_class_data_; }


void TaskParseResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TaskParseResponse*>(&to_msg);
  auto& from = static_cast<const TaskParseResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:v6.services.pub.TaskParseResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.task_files_.MergeFrom(from._impl_.task_files_);
  if (from._internal_has_meta()) {
    _this->_internal_mutable_meta()->::v6::services::pub::TaskMeta::MergeFrom(
        from._internal_meta());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TaskParseResponse::CopyFrom(const TaskParseResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:v6.services.pub.TaskParseResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TaskParseResponse::IsInitialized() const {
  return true;
}

void TaskParseResponse::InternalSwap(TaskParseResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.task_files_.InternalSwap(&other->_impl_.task_files_);
  swap(_impl_.meta_, other->_impl_.meta_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TaskParseResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_public_5fuser_5foffline_2eproto_getter, &descriptor_table_public_5fuser_5foffline_2eproto_once,
      file_level_metadata_public_5fuser_5foffline_2eproto[3]);
}

// ===================================================================

class TaskAddRequest::_Internal {
 public:
};

TaskAddRequest::TaskAddRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:v6.services.pub.TaskAddRequest)
}
TaskAddRequest::TaskAddRequest(const TaskAddRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TaskAddRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.url_){}
    , decltype(_impl_.file_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.url_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_url().empty()) {
    _this->_impl_.url_.Set(from._internal_url(), 
      _this->GetArenaForAllocation());
  }
  _impl_.file_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.file_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_file().empty()) {
    _this->_impl_.file_.Set(from._internal_file(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:v6.services.pub.TaskAddRequest)
}

inline void TaskAddRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.url_){}
    , decltype(_impl_.file_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.url_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.file_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.file_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

TaskAddRequest::~TaskAddRequest() {
  // @@protoc_insertion_point(destructor:v6.services.pub.TaskAddRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TaskAddRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.url_.Destroy();
  _impl_.file_.Destroy();
}

void TaskAddRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TaskAddRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:v6.services.pub.TaskAddRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.url_.ClearToEmpty();
  _impl_.file_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TaskAddRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string url = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_url();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "v6.services.pub.TaskAddRequest.url"));
        } else
          goto handle_unusual;
        continue;
      // string file = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_file();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "v6.services.pub.TaskAddRequest.file"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TaskAddRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:v6.services.pub.TaskAddRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string url = 1;
  if (!this->_internal_url().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_url().data(), static_cast<int>(this->_internal_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "v6.services.pub.TaskAddRequest.url");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_url(), target);
  }

  // string file = 2;
  if (!this->_internal_file().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_file().data(), static_cast<int>(this->_internal_file().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "v6.services.pub.TaskAddRequest.file");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_file(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:v6.services.pub.TaskAddRequest)
  return target;
}

size_t TaskAddRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:v6.services.pub.TaskAddRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string url = 1;
  if (!this->_internal_url().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_url());
  }

  // string file = 2;
  if (!this->_internal_file().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_file());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TaskAddRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TaskAddRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TaskAddRequest::GetClassData() const { return &_class_data_; }


void TaskAddRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TaskAddRequest*>(&to_msg);
  auto& from = static_cast<const TaskAddRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:v6.services.pub.TaskAddRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_url().empty()) {
    _this->_internal_set_url(from._internal_url());
  }
  if (!from._internal_file().empty()) {
    _this->_internal_set_file(from._internal_file());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TaskAddRequest::CopyFrom(const TaskAddRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:v6.services.pub.TaskAddRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TaskAddRequest::IsInitialized() const {
  return true;
}

void TaskAddRequest::InternalSwap(TaskAddRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.url_, lhs_arena,
      &other->_impl_.url_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.file_, lhs_arena,
      &other->_impl_.file_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata TaskAddRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_public_5fuser_5foffline_2eproto_getter, &descriptor_table_public_5fuser_5foffline_2eproto_once,
      file_level_metadata_public_5fuser_5foffline_2eproto[4]);
}

// ===================================================================

class TaskAddResponse::_Internal {
 public:
  static const ::v6::services::pub::TaskMeta& meta(const TaskAddResponse* msg);
};

const ::v6::services::pub::TaskMeta&
TaskAddResponse::_Internal::meta(const TaskAddResponse* msg) {
  return *msg->_impl_.meta_;
}
TaskAddResponse::TaskAddResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:v6.services.pub.TaskAddResponse)
}
TaskAddResponse::TaskAddResponse(const TaskAddResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TaskAddResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.meta_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_meta()) {
    _this->_impl_.meta_ = new ::v6::services::pub::TaskMeta(*from._impl_.meta_);
  }
  // @@protoc_insertion_point(copy_constructor:v6.services.pub.TaskAddResponse)
}

inline void TaskAddResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.meta_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

TaskAddResponse::~TaskAddResponse() {
  // @@protoc_insertion_point(destructor:v6.services.pub.TaskAddResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TaskAddResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.meta_;
}

void TaskAddResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TaskAddResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:v6.services.pub.TaskAddResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.meta_ != nullptr) {
    delete _impl_.meta_;
  }
  _impl_.meta_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TaskAddResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .v6.services.pub.TaskMeta meta = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_meta(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TaskAddResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:v6.services.pub.TaskAddResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .v6.services.pub.TaskMeta meta = 1;
  if (this->_internal_has_meta()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::meta(this),
        _Internal::meta(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:v6.services.pub.TaskAddResponse)
  return target;
}

size_t TaskAddResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:v6.services.pub.TaskAddResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .v6.services.pub.TaskMeta meta = 1;
  if (this->_internal_has_meta()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.meta_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TaskAddResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TaskAddResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TaskAddResponse::GetClassData() const { return &_class_data_; }


void TaskAddResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TaskAddResponse*>(&to_msg);
  auto& from = static_cast<const TaskAddResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:v6.services.pub.TaskAddResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_meta()) {
    _this->_internal_mutable_meta()->::v6::services::pub::TaskMeta::MergeFrom(
        from._internal_meta());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TaskAddResponse::CopyFrom(const TaskAddResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:v6.services.pub.TaskAddResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TaskAddResponse::IsInitialized() const {
  return true;
}

void TaskAddResponse::InternalSwap(TaskAddResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.meta_, other->_impl_.meta_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TaskAddResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_public_5fuser_5foffline_2eproto_getter, &descriptor_table_public_5fuser_5foffline_2eproto_once,
      file_level_metadata_public_5fuser_5foffline_2eproto[5]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace pub
}  // namespace services
}  // namespace v6
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::v6::services::pub::TaskParseRequest*
Arena::CreateMaybeMessage< ::v6::services::pub::TaskParseRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::v6::services::pub::TaskParseRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::v6::services::pub::TaskMeta*
Arena::CreateMaybeMessage< ::v6::services::pub::TaskMeta >(Arena* arena) {
  return Arena::CreateMessageInternal< ::v6::services::pub::TaskMeta >(arena);
}
template<> PROTOBUF_NOINLINE ::v6::services::pub::TaskFile*
Arena::CreateMaybeMessage< ::v6::services::pub::TaskFile >(Arena* arena) {
  return Arena::CreateMessageInternal< ::v6::services::pub::TaskFile >(arena);
}
template<> PROTOBUF_NOINLINE ::v6::services::pub::TaskParseResponse*
Arena::CreateMaybeMessage< ::v6::services::pub::TaskParseResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::v6::services::pub::TaskParseResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::v6::services::pub::TaskAddRequest*
Arena::CreateMaybeMessage< ::v6::services::pub::TaskAddRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::v6::services::pub::TaskAddRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::v6::services::pub::TaskAddResponse*
Arena::CreateMaybeMessage< ::v6::services::pub::TaskAddResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::v6::services::pub::TaskAddResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
