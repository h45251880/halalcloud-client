// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: public_user_offline.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_public_5fuser_5foffline_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_public_5fuser_5foffline_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_public_5fuser_5foffline_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_public_5fuser_5foffline_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_public_5fuser_5foffline_2eproto;
namespace v6 {
namespace services {
namespace pub {
class TaskAddRequest;
struct TaskAddRequestDefaultTypeInternal;
extern TaskAddRequestDefaultTypeInternal _TaskAddRequest_default_instance_;
class TaskAddResponse;
struct TaskAddResponseDefaultTypeInternal;
extern TaskAddResponseDefaultTypeInternal _TaskAddResponse_default_instance_;
class TaskFile;
struct TaskFileDefaultTypeInternal;
extern TaskFileDefaultTypeInternal _TaskFile_default_instance_;
class TaskMeta;
struct TaskMetaDefaultTypeInternal;
extern TaskMetaDefaultTypeInternal _TaskMeta_default_instance_;
class TaskParseRequest;
struct TaskParseRequestDefaultTypeInternal;
extern TaskParseRequestDefaultTypeInternal _TaskParseRequest_default_instance_;
class TaskParseResponse;
struct TaskParseResponseDefaultTypeInternal;
extern TaskParseResponseDefaultTypeInternal _TaskParseResponse_default_instance_;
}  // namespace pub
}  // namespace services
}  // namespace v6
PROTOBUF_NAMESPACE_OPEN
template<> ::v6::services::pub::TaskAddRequest* Arena::CreateMaybeMessage<::v6::services::pub::TaskAddRequest>(Arena*);
template<> ::v6::services::pub::TaskAddResponse* Arena::CreateMaybeMessage<::v6::services::pub::TaskAddResponse>(Arena*);
template<> ::v6::services::pub::TaskFile* Arena::CreateMaybeMessage<::v6::services::pub::TaskFile>(Arena*);
template<> ::v6::services::pub::TaskMeta* Arena::CreateMaybeMessage<::v6::services::pub::TaskMeta>(Arena*);
template<> ::v6::services::pub::TaskParseRequest* Arena::CreateMaybeMessage<::v6::services::pub::TaskParseRequest>(Arena*);
template<> ::v6::services::pub::TaskParseResponse* Arena::CreateMaybeMessage<::v6::services::pub::TaskParseResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace v6 {
namespace services {
namespace pub {

// ===================================================================

class TaskParseRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:v6.services.pub.TaskParseRequest) */ {
 public:
  inline TaskParseRequest() : TaskParseRequest(nullptr) {}
  ~TaskParseRequest() override;
  explicit PROTOBUF_CONSTEXPR TaskParseRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TaskParseRequest(const TaskParseRequest& from);
  TaskParseRequest(TaskParseRequest&& from) noexcept
    : TaskParseRequest() {
    *this = ::std::move(from);
  }

  inline TaskParseRequest& operator=(const TaskParseRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline TaskParseRequest& operator=(TaskParseRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TaskParseRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const TaskParseRequest* internal_default_instance() {
    return reinterpret_cast<const TaskParseRequest*>(
               &_TaskParseRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(TaskParseRequest& a, TaskParseRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(TaskParseRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TaskParseRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TaskParseRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TaskParseRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TaskParseRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TaskParseRequest& from) {
    TaskParseRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TaskParseRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "v6.services.pub.TaskParseRequest";
  }
  protected:
  explicit TaskParseRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUrlFieldNumber = 1,
    kFileFieldNumber = 2,
  };
  // string url = 1;
  void clear_url();
  const std::string& url() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_url(ArgT0&& arg0, ArgT... args);
  std::string* mutable_url();
  PROTOBUF_NODISCARD std::string* release_url();
  void set_allocated_url(std::string* url);
  private:
  const std::string& _internal_url() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_url(const std::string& value);
  std::string* _internal_mutable_url();
  public:

  // string file = 2;
  void clear_file();
  const std::string& file() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_file(ArgT0&& arg0, ArgT... args);
  std::string* mutable_file();
  PROTOBUF_NODISCARD std::string* release_file();
  void set_allocated_file(std::string* file);
  private:
  const std::string& _internal_file() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_file(const std::string& value);
  std::string* _internal_mutable_file();
  public:

  // @@protoc_insertion_point(class_scope:v6.services.pub.TaskParseRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr url_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr file_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_public_5fuser_5foffline_2eproto;
};
// -------------------------------------------------------------------

class TaskMeta final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:v6.services.pub.TaskMeta) */ {
 public:
  inline TaskMeta() : TaskMeta(nullptr) {}
  ~TaskMeta() override;
  explicit PROTOBUF_CONSTEXPR TaskMeta(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TaskMeta(const TaskMeta& from);
  TaskMeta(TaskMeta&& from) noexcept
    : TaskMeta() {
    *this = ::std::move(from);
  }

  inline TaskMeta& operator=(const TaskMeta& from) {
    CopyFrom(from);
    return *this;
  }
  inline TaskMeta& operator=(TaskMeta&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TaskMeta& default_instance() {
    return *internal_default_instance();
  }
  static inline const TaskMeta* internal_default_instance() {
    return reinterpret_cast<const TaskMeta*>(
               &_TaskMeta_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(TaskMeta& a, TaskMeta& b) {
    a.Swap(&b);
  }
  inline void Swap(TaskMeta* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TaskMeta* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TaskMeta* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TaskMeta>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TaskMeta& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TaskMeta& from) {
    TaskMeta::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TaskMeta* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "v6.services.pub.TaskMeta";
  }
  protected:
  explicit TaskMeta(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdentityFieldNumber = 1,
    kFileFieldNumber = 6,
    kUrlFieldNumber = 8,
    kNameFieldNumber = 10,
    kLockByFieldNumber = 11,
    kMessageFieldNumber = 13,
    kAddonFieldNumber = 14,
    kTypeFieldNumber = 2,
    kStatusFieldNumber = 3,
    kUpdateTsFieldNumber = 5,
    kCreateTsFieldNumber = 7,
    kLockedFieldNumber = 4,
    kCodeFieldNumber = 12,
    kSizeFieldNumber = 9,
    kRetriesFieldNumber = 15,
    kProgressFieldNumber = 16,
    kBytesTotalFieldNumber = 17,
    kBytesProcessedFieldNumber = 18,
    kFlagFieldNumber = 19,
  };
  // string identity = 1;
  void clear_identity();
  const std::string& identity() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_identity(ArgT0&& arg0, ArgT... args);
  std::string* mutable_identity();
  PROTOBUF_NODISCARD std::string* release_identity();
  void set_allocated_identity(std::string* identity);
  private:
  const std::string& _internal_identity() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_identity(const std::string& value);
  std::string* _internal_mutable_identity();
  public:

  // string file = 6;
  void clear_file();
  const std::string& file() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_file(ArgT0&& arg0, ArgT... args);
  std::string* mutable_file();
  PROTOBUF_NODISCARD std::string* release_file();
  void set_allocated_file(std::string* file);
  private:
  const std::string& _internal_file() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_file(const std::string& value);
  std::string* _internal_mutable_file();
  public:

  // string url = 8;
  void clear_url();
  const std::string& url() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_url(ArgT0&& arg0, ArgT... args);
  std::string* mutable_url();
  PROTOBUF_NODISCARD std::string* release_url();
  void set_allocated_url(std::string* url);
  private:
  const std::string& _internal_url() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_url(const std::string& value);
  std::string* _internal_mutable_url();
  public:

  // string name = 10;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string lock_by = 11;
  void clear_lock_by();
  const std::string& lock_by() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_lock_by(ArgT0&& arg0, ArgT... args);
  std::string* mutable_lock_by();
  PROTOBUF_NODISCARD std::string* release_lock_by();
  void set_allocated_lock_by(std::string* lock_by);
  private:
  const std::string& _internal_lock_by() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_lock_by(const std::string& value);
  std::string* _internal_mutable_lock_by();
  public:

  // string message = 13;
  void clear_message();
  const std::string& message() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_message(ArgT0&& arg0, ArgT... args);
  std::string* mutable_message();
  PROTOBUF_NODISCARD std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // string addon = 14;
  void clear_addon();
  const std::string& addon() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_addon(ArgT0&& arg0, ArgT... args);
  std::string* mutable_addon();
  PROTOBUF_NODISCARD std::string* release_addon();
  void set_allocated_addon(std::string* addon);
  private:
  const std::string& _internal_addon() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_addon(const std::string& value);
  std::string* _internal_mutable_addon();
  public:

  // int32 type = 2;
  void clear_type();
  int32_t type() const;
  void set_type(int32_t value);
  private:
  int32_t _internal_type() const;
  void _internal_set_type(int32_t value);
  public:

  // int32 status = 3;
  void clear_status();
  int32_t status() const;
  void set_status(int32_t value);
  private:
  int32_t _internal_status() const;
  void _internal_set_status(int32_t value);
  public:

  // int64 update_ts = 5;
  void clear_update_ts();
  int64_t update_ts() const;
  void set_update_ts(int64_t value);
  private:
  int64_t _internal_update_ts() const;
  void _internal_set_update_ts(int64_t value);
  public:

  // int64 create_ts = 7;
  void clear_create_ts();
  int64_t create_ts() const;
  void set_create_ts(int64_t value);
  private:
  int64_t _internal_create_ts() const;
  void _internal_set_create_ts(int64_t value);
  public:

  // bool locked = 4;
  void clear_locked();
  bool locked() const;
  void set_locked(bool value);
  private:
  bool _internal_locked() const;
  void _internal_set_locked(bool value);
  public:

  // int32 code = 12;
  void clear_code();
  int32_t code() const;
  void set_code(int32_t value);
  private:
  int32_t _internal_code() const;
  void _internal_set_code(int32_t value);
  public:

  // uint64 size = 9;
  void clear_size();
  uint64_t size() const;
  void set_size(uint64_t value);
  private:
  uint64_t _internal_size() const;
  void _internal_set_size(uint64_t value);
  public:

  // uint64 retries = 15;
  void clear_retries();
  uint64_t retries() const;
  void set_retries(uint64_t value);
  private:
  uint64_t _internal_retries() const;
  void _internal_set_retries(uint64_t value);
  public:

  // uint64 progress = 16;
  void clear_progress();
  uint64_t progress() const;
  void set_progress(uint64_t value);
  private:
  uint64_t _internal_progress() const;
  void _internal_set_progress(uint64_t value);
  public:

  // uint64 bytes_total = 17;
  void clear_bytes_total();
  uint64_t bytes_total() const;
  void set_bytes_total(uint64_t value);
  private:
  uint64_t _internal_bytes_total() const;
  void _internal_set_bytes_total(uint64_t value);
  public:

  // uint64 bytes_processed = 18;
  void clear_bytes_processed();
  uint64_t bytes_processed() const;
  void set_bytes_processed(uint64_t value);
  private:
  uint64_t _internal_bytes_processed() const;
  void _internal_set_bytes_processed(uint64_t value);
  public:

  // int32 flag = 19;
  void clear_flag();
  int32_t flag() const;
  void set_flag(int32_t value);
  private:
  int32_t _internal_flag() const;
  void _internal_set_flag(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:v6.services.pub.TaskMeta)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr identity_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr file_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr url_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr lock_by_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr addon_;
    int32_t type_;
    int32_t status_;
    int64_t update_ts_;
    int64_t create_ts_;
    bool locked_;
    int32_t code_;
    uint64_t size_;
    uint64_t retries_;
    uint64_t progress_;
    uint64_t bytes_total_;
    uint64_t bytes_processed_;
    int32_t flag_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_public_5fuser_5foffline_2eproto;
};
// -------------------------------------------------------------------

class TaskFile final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:v6.services.pub.TaskFile) */ {
 public:
  inline TaskFile() : TaskFile(nullptr) {}
  ~TaskFile() override;
  explicit PROTOBUF_CONSTEXPR TaskFile(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TaskFile(const TaskFile& from);
  TaskFile(TaskFile&& from) noexcept
    : TaskFile() {
    *this = ::std::move(from);
  }

  inline TaskFile& operator=(const TaskFile& from) {
    CopyFrom(from);
    return *this;
  }
  inline TaskFile& operator=(TaskFile&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TaskFile& default_instance() {
    return *internal_default_instance();
  }
  static inline const TaskFile* internal_default_instance() {
    return reinterpret_cast<const TaskFile*>(
               &_TaskFile_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(TaskFile& a, TaskFile& b) {
    a.Swap(&b);
  }
  inline void Swap(TaskFile* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TaskFile* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TaskFile* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TaskFile>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TaskFile& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TaskFile& from) {
    TaskFile::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TaskFile* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "v6.services.pub.TaskFile";
  }
  protected:
  explicit TaskFile(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdentityFieldNumber = 1,
    kPathFieldNumber = 4,
    kNameFieldNumber = 8,
    kUpdateTsFieldNumber = 6,
    kCreateTsFieldNumber = 7,
    kSizeFieldNumber = 9,
    kStatusFieldNumber = 5,
    kIndexFieldNumber = 15,
    kBytesTotalFieldNumber = 13,
    kDirectoryFieldNumber = 16,
  };
  // string identity = 1;
  void clear_identity();
  const std::string& identity() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_identity(ArgT0&& arg0, ArgT... args);
  std::string* mutable_identity();
  PROTOBUF_NODISCARD std::string* release_identity();
  void set_allocated_identity(std::string* identity);
  private:
  const std::string& _internal_identity() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_identity(const std::string& value);
  std::string* _internal_mutable_identity();
  public:

  // string path = 4;
  void clear_path();
  const std::string& path() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_path(ArgT0&& arg0, ArgT... args);
  std::string* mutable_path();
  PROTOBUF_NODISCARD std::string* release_path();
  void set_allocated_path(std::string* path);
  private:
  const std::string& _internal_path() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_path(const std::string& value);
  std::string* _internal_mutable_path();
  public:

  // string name = 8;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // int64 update_ts = 6;
  void clear_update_ts();
  int64_t update_ts() const;
  void set_update_ts(int64_t value);
  private:
  int64_t _internal_update_ts() const;
  void _internal_set_update_ts(int64_t value);
  public:

  // int64 create_ts = 7;
  void clear_create_ts();
  int64_t create_ts() const;
  void set_create_ts(int64_t value);
  private:
  int64_t _internal_create_ts() const;
  void _internal_set_create_ts(int64_t value);
  public:

  // uint64 size = 9;
  void clear_size();
  uint64_t size() const;
  void set_size(uint64_t value);
  private:
  uint64_t _internal_size() const;
  void _internal_set_size(uint64_t value);
  public:

  // int32 status = 5;
  void clear_status();
  int32_t status() const;
  void set_status(int32_t value);
  private:
  int32_t _internal_status() const;
  void _internal_set_status(int32_t value);
  public:

  // int32 index = 15;
  void clear_index();
  int32_t index() const;
  void set_index(int32_t value);
  private:
  int32_t _internal_index() const;
  void _internal_set_index(int32_t value);
  public:

  // uint64 bytes_total = 13;
  void clear_bytes_total();
  uint64_t bytes_total() const;
  void set_bytes_total(uint64_t value);
  private:
  uint64_t _internal_bytes_total() const;
  void _internal_set_bytes_total(uint64_t value);
  public:

  // bool directory = 16;
  void clear_directory();
  bool directory() const;
  void set_directory(bool value);
  private:
  bool _internal_directory() const;
  void _internal_set_directory(bool value);
  public:

  // @@protoc_insertion_point(class_scope:v6.services.pub.TaskFile)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr identity_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr path_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    int64_t update_ts_;
    int64_t create_ts_;
    uint64_t size_;
    int32_t status_;
    int32_t index_;
    uint64_t bytes_total_;
    bool directory_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_public_5fuser_5foffline_2eproto;
};
// -------------------------------------------------------------------

class TaskParseResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:v6.services.pub.TaskParseResponse) */ {
 public:
  inline TaskParseResponse() : TaskParseResponse(nullptr) {}
  ~TaskParseResponse() override;
  explicit PROTOBUF_CONSTEXPR TaskParseResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TaskParseResponse(const TaskParseResponse& from);
  TaskParseResponse(TaskParseResponse&& from) noexcept
    : TaskParseResponse() {
    *this = ::std::move(from);
  }

  inline TaskParseResponse& operator=(const TaskParseResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline TaskParseResponse& operator=(TaskParseResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TaskParseResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const TaskParseResponse* internal_default_instance() {
    return reinterpret_cast<const TaskParseResponse*>(
               &_TaskParseResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(TaskParseResponse& a, TaskParseResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(TaskParseResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TaskParseResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TaskParseResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TaskParseResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TaskParseResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TaskParseResponse& from) {
    TaskParseResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TaskParseResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "v6.services.pub.TaskParseResponse";
  }
  protected:
  explicit TaskParseResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTaskFilesFieldNumber = 2,
    kMetaFieldNumber = 1,
  };
  // repeated .v6.services.pub.TaskFile task_files = 2;
  int task_files_size() const;
  private:
  int _internal_task_files_size() const;
  public:
  void clear_task_files();
  ::v6::services::pub::TaskFile* mutable_task_files(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::v6::services::pub::TaskFile >*
      mutable_task_files();
  private:
  const ::v6::services::pub::TaskFile& _internal_task_files(int index) const;
  ::v6::services::pub::TaskFile* _internal_add_task_files();
  public:
  const ::v6::services::pub::TaskFile& task_files(int index) const;
  ::v6::services::pub::TaskFile* add_task_files();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::v6::services::pub::TaskFile >&
      task_files() const;

  // .v6.services.pub.TaskMeta meta = 1;
  bool has_meta() const;
  private:
  bool _internal_has_meta() const;
  public:
  void clear_meta();
  const ::v6::services::pub::TaskMeta& meta() const;
  PROTOBUF_NODISCARD ::v6::services::pub::TaskMeta* release_meta();
  ::v6::services::pub::TaskMeta* mutable_meta();
  void set_allocated_meta(::v6::services::pub::TaskMeta* meta);
  private:
  const ::v6::services::pub::TaskMeta& _internal_meta() const;
  ::v6::services::pub::TaskMeta* _internal_mutable_meta();
  public:
  void unsafe_arena_set_allocated_meta(
      ::v6::services::pub::TaskMeta* meta);
  ::v6::services::pub::TaskMeta* unsafe_arena_release_meta();

  // @@protoc_insertion_point(class_scope:v6.services.pub.TaskParseResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::v6::services::pub::TaskFile > task_files_;
    ::v6::services::pub::TaskMeta* meta_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_public_5fuser_5foffline_2eproto;
};
// -------------------------------------------------------------------

class TaskAddRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:v6.services.pub.TaskAddRequest) */ {
 public:
  inline TaskAddRequest() : TaskAddRequest(nullptr) {}
  ~TaskAddRequest() override;
  explicit PROTOBUF_CONSTEXPR TaskAddRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TaskAddRequest(const TaskAddRequest& from);
  TaskAddRequest(TaskAddRequest&& from) noexcept
    : TaskAddRequest() {
    *this = ::std::move(from);
  }

  inline TaskAddRequest& operator=(const TaskAddRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline TaskAddRequest& operator=(TaskAddRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TaskAddRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const TaskAddRequest* internal_default_instance() {
    return reinterpret_cast<const TaskAddRequest*>(
               &_TaskAddRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(TaskAddRequest& a, TaskAddRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(TaskAddRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TaskAddRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TaskAddRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TaskAddRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TaskAddRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TaskAddRequest& from) {
    TaskAddRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TaskAddRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "v6.services.pub.TaskAddRequest";
  }
  protected:
  explicit TaskAddRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUrlFieldNumber = 1,
    kFileFieldNumber = 2,
  };
  // string url = 1;
  void clear_url();
  const std::string& url() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_url(ArgT0&& arg0, ArgT... args);
  std::string* mutable_url();
  PROTOBUF_NODISCARD std::string* release_url();
  void set_allocated_url(std::string* url);
  private:
  const std::string& _internal_url() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_url(const std::string& value);
  std::string* _internal_mutable_url();
  public:

  // string file = 2;
  void clear_file();
  const std::string& file() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_file(ArgT0&& arg0, ArgT... args);
  std::string* mutable_file();
  PROTOBUF_NODISCARD std::string* release_file();
  void set_allocated_file(std::string* file);
  private:
  const std::string& _internal_file() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_file(const std::string& value);
  std::string* _internal_mutable_file();
  public:

  // @@protoc_insertion_point(class_scope:v6.services.pub.TaskAddRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr url_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr file_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_public_5fuser_5foffline_2eproto;
};
// -------------------------------------------------------------------

class TaskAddResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:v6.services.pub.TaskAddResponse) */ {
 public:
  inline TaskAddResponse() : TaskAddResponse(nullptr) {}
  ~TaskAddResponse() override;
  explicit PROTOBUF_CONSTEXPR TaskAddResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TaskAddResponse(const TaskAddResponse& from);
  TaskAddResponse(TaskAddResponse&& from) noexcept
    : TaskAddResponse() {
    *this = ::std::move(from);
  }

  inline TaskAddResponse& operator=(const TaskAddResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline TaskAddResponse& operator=(TaskAddResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TaskAddResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const TaskAddResponse* internal_default_instance() {
    return reinterpret_cast<const TaskAddResponse*>(
               &_TaskAddResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(TaskAddResponse& a, TaskAddResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(TaskAddResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TaskAddResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TaskAddResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TaskAddResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TaskAddResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TaskAddResponse& from) {
    TaskAddResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TaskAddResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "v6.services.pub.TaskAddResponse";
  }
  protected:
  explicit TaskAddResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMetaFieldNumber = 1,
  };
  // .v6.services.pub.TaskMeta meta = 1;
  bool has_meta() const;
  private:
  bool _internal_has_meta() const;
  public:
  void clear_meta();
  const ::v6::services::pub::TaskMeta& meta() const;
  PROTOBUF_NODISCARD ::v6::services::pub::TaskMeta* release_meta();
  ::v6::services::pub::TaskMeta* mutable_meta();
  void set_allocated_meta(::v6::services::pub::TaskMeta* meta);
  private:
  const ::v6::services::pub::TaskMeta& _internal_meta() const;
  ::v6::services::pub::TaskMeta* _internal_mutable_meta();
  public:
  void unsafe_arena_set_allocated_meta(
      ::v6::services::pub::TaskMeta* meta);
  ::v6::services::pub::TaskMeta* unsafe_arena_release_meta();

  // @@protoc_insertion_point(class_scope:v6.services.pub.TaskAddResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::v6::services::pub::TaskMeta* meta_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_public_5fuser_5foffline_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// TaskParseRequest

// string url = 1;
inline void TaskParseRequest::clear_url() {
  _impl_.url_.ClearToEmpty();
}
inline const std::string& TaskParseRequest::url() const {
  // @@protoc_insertion_point(field_get:v6.services.pub.TaskParseRequest.url)
  return _internal_url();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TaskParseRequest::set_url(ArgT0&& arg0, ArgT... args) {
 
 _impl_.url_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:v6.services.pub.TaskParseRequest.url)
}
inline std::string* TaskParseRequest::mutable_url() {
  std::string* _s = _internal_mutable_url();
  // @@protoc_insertion_point(field_mutable:v6.services.pub.TaskParseRequest.url)
  return _s;
}
inline const std::string& TaskParseRequest::_internal_url() const {
  return _impl_.url_.Get();
}
inline void TaskParseRequest::_internal_set_url(const std::string& value) {
  
  _impl_.url_.Set(value, GetArenaForAllocation());
}
inline std::string* TaskParseRequest::_internal_mutable_url() {
  
  return _impl_.url_.Mutable(GetArenaForAllocation());
}
inline std::string* TaskParseRequest::release_url() {
  // @@protoc_insertion_point(field_release:v6.services.pub.TaskParseRequest.url)
  return _impl_.url_.Release();
}
inline void TaskParseRequest::set_allocated_url(std::string* url) {
  if (url != nullptr) {
    
  } else {
    
  }
  _impl_.url_.SetAllocated(url, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.url_.IsDefault()) {
    _impl_.url_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:v6.services.pub.TaskParseRequest.url)
}

// string file = 2;
inline void TaskParseRequest::clear_file() {
  _impl_.file_.ClearToEmpty();
}
inline const std::string& TaskParseRequest::file() const {
  // @@protoc_insertion_point(field_get:v6.services.pub.TaskParseRequest.file)
  return _internal_file();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TaskParseRequest::set_file(ArgT0&& arg0, ArgT... args) {
 
 _impl_.file_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:v6.services.pub.TaskParseRequest.file)
}
inline std::string* TaskParseRequest::mutable_file() {
  std::string* _s = _internal_mutable_file();
  // @@protoc_insertion_point(field_mutable:v6.services.pub.TaskParseRequest.file)
  return _s;
}
inline const std::string& TaskParseRequest::_internal_file() const {
  return _impl_.file_.Get();
}
inline void TaskParseRequest::_internal_set_file(const std::string& value) {
  
  _impl_.file_.Set(value, GetArenaForAllocation());
}
inline std::string* TaskParseRequest::_internal_mutable_file() {
  
  return _impl_.file_.Mutable(GetArenaForAllocation());
}
inline std::string* TaskParseRequest::release_file() {
  // @@protoc_insertion_point(field_release:v6.services.pub.TaskParseRequest.file)
  return _impl_.file_.Release();
}
inline void TaskParseRequest::set_allocated_file(std::string* file) {
  if (file != nullptr) {
    
  } else {
    
  }
  _impl_.file_.SetAllocated(file, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.file_.IsDefault()) {
    _impl_.file_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:v6.services.pub.TaskParseRequest.file)
}

// -------------------------------------------------------------------

// TaskMeta

// string identity = 1;
inline void TaskMeta::clear_identity() {
  _impl_.identity_.ClearToEmpty();
}
inline const std::string& TaskMeta::identity() const {
  // @@protoc_insertion_point(field_get:v6.services.pub.TaskMeta.identity)
  return _internal_identity();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TaskMeta::set_identity(ArgT0&& arg0, ArgT... args) {
 
 _impl_.identity_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:v6.services.pub.TaskMeta.identity)
}
inline std::string* TaskMeta::mutable_identity() {
  std::string* _s = _internal_mutable_identity();
  // @@protoc_insertion_point(field_mutable:v6.services.pub.TaskMeta.identity)
  return _s;
}
inline const std::string& TaskMeta::_internal_identity() const {
  return _impl_.identity_.Get();
}
inline void TaskMeta::_internal_set_identity(const std::string& value) {
  
  _impl_.identity_.Set(value, GetArenaForAllocation());
}
inline std::string* TaskMeta::_internal_mutable_identity() {
  
  return _impl_.identity_.Mutable(GetArenaForAllocation());
}
inline std::string* TaskMeta::release_identity() {
  // @@protoc_insertion_point(field_release:v6.services.pub.TaskMeta.identity)
  return _impl_.identity_.Release();
}
inline void TaskMeta::set_allocated_identity(std::string* identity) {
  if (identity != nullptr) {
    
  } else {
    
  }
  _impl_.identity_.SetAllocated(identity, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.identity_.IsDefault()) {
    _impl_.identity_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:v6.services.pub.TaskMeta.identity)
}

// int32 type = 2;
inline void TaskMeta::clear_type() {
  _impl_.type_ = 0;
}
inline int32_t TaskMeta::_internal_type() const {
  return _impl_.type_;
}
inline int32_t TaskMeta::type() const {
  // @@protoc_insertion_point(field_get:v6.services.pub.TaskMeta.type)
  return _internal_type();
}
inline void TaskMeta::_internal_set_type(int32_t value) {
  
  _impl_.type_ = value;
}
inline void TaskMeta::set_type(int32_t value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:v6.services.pub.TaskMeta.type)
}

// int32 status = 3;
inline void TaskMeta::clear_status() {
  _impl_.status_ = 0;
}
inline int32_t TaskMeta::_internal_status() const {
  return _impl_.status_;
}
inline int32_t TaskMeta::status() const {
  // @@protoc_insertion_point(field_get:v6.services.pub.TaskMeta.status)
  return _internal_status();
}
inline void TaskMeta::_internal_set_status(int32_t value) {
  
  _impl_.status_ = value;
}
inline void TaskMeta::set_status(int32_t value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:v6.services.pub.TaskMeta.status)
}

// bool locked = 4;
inline void TaskMeta::clear_locked() {
  _impl_.locked_ = false;
}
inline bool TaskMeta::_internal_locked() const {
  return _impl_.locked_;
}
inline bool TaskMeta::locked() const {
  // @@protoc_insertion_point(field_get:v6.services.pub.TaskMeta.locked)
  return _internal_locked();
}
inline void TaskMeta::_internal_set_locked(bool value) {
  
  _impl_.locked_ = value;
}
inline void TaskMeta::set_locked(bool value) {
  _internal_set_locked(value);
  // @@protoc_insertion_point(field_set:v6.services.pub.TaskMeta.locked)
}

// int64 update_ts = 5;
inline void TaskMeta::clear_update_ts() {
  _impl_.update_ts_ = int64_t{0};
}
inline int64_t TaskMeta::_internal_update_ts() const {
  return _impl_.update_ts_;
}
inline int64_t TaskMeta::update_ts() const {
  // @@protoc_insertion_point(field_get:v6.services.pub.TaskMeta.update_ts)
  return _internal_update_ts();
}
inline void TaskMeta::_internal_set_update_ts(int64_t value) {
  
  _impl_.update_ts_ = value;
}
inline void TaskMeta::set_update_ts(int64_t value) {
  _internal_set_update_ts(value);
  // @@protoc_insertion_point(field_set:v6.services.pub.TaskMeta.update_ts)
}

// string file = 6;
inline void TaskMeta::clear_file() {
  _impl_.file_.ClearToEmpty();
}
inline const std::string& TaskMeta::file() const {
  // @@protoc_insertion_point(field_get:v6.services.pub.TaskMeta.file)
  return _internal_file();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TaskMeta::set_file(ArgT0&& arg0, ArgT... args) {
 
 _impl_.file_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:v6.services.pub.TaskMeta.file)
}
inline std::string* TaskMeta::mutable_file() {
  std::string* _s = _internal_mutable_file();
  // @@protoc_insertion_point(field_mutable:v6.services.pub.TaskMeta.file)
  return _s;
}
inline const std::string& TaskMeta::_internal_file() const {
  return _impl_.file_.Get();
}
inline void TaskMeta::_internal_set_file(const std::string& value) {
  
  _impl_.file_.Set(value, GetArenaForAllocation());
}
inline std::string* TaskMeta::_internal_mutable_file() {
  
  return _impl_.file_.Mutable(GetArenaForAllocation());
}
inline std::string* TaskMeta::release_file() {
  // @@protoc_insertion_point(field_release:v6.services.pub.TaskMeta.file)
  return _impl_.file_.Release();
}
inline void TaskMeta::set_allocated_file(std::string* file) {
  if (file != nullptr) {
    
  } else {
    
  }
  _impl_.file_.SetAllocated(file, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.file_.IsDefault()) {
    _impl_.file_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:v6.services.pub.TaskMeta.file)
}

// int64 create_ts = 7;
inline void TaskMeta::clear_create_ts() {
  _impl_.create_ts_ = int64_t{0};
}
inline int64_t TaskMeta::_internal_create_ts() const {
  return _impl_.create_ts_;
}
inline int64_t TaskMeta::create_ts() const {
  // @@protoc_insertion_point(field_get:v6.services.pub.TaskMeta.create_ts)
  return _internal_create_ts();
}
inline void TaskMeta::_internal_set_create_ts(int64_t value) {
  
  _impl_.create_ts_ = value;
}
inline void TaskMeta::set_create_ts(int64_t value) {
  _internal_set_create_ts(value);
  // @@protoc_insertion_point(field_set:v6.services.pub.TaskMeta.create_ts)
}

// string url = 8;
inline void TaskMeta::clear_url() {
  _impl_.url_.ClearToEmpty();
}
inline const std::string& TaskMeta::url() const {
  // @@protoc_insertion_point(field_get:v6.services.pub.TaskMeta.url)
  return _internal_url();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TaskMeta::set_url(ArgT0&& arg0, ArgT... args) {
 
 _impl_.url_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:v6.services.pub.TaskMeta.url)
}
inline std::string* TaskMeta::mutable_url() {
  std::string* _s = _internal_mutable_url();
  // @@protoc_insertion_point(field_mutable:v6.services.pub.TaskMeta.url)
  return _s;
}
inline const std::string& TaskMeta::_internal_url() const {
  return _impl_.url_.Get();
}
inline void TaskMeta::_internal_set_url(const std::string& value) {
  
  _impl_.url_.Set(value, GetArenaForAllocation());
}
inline std::string* TaskMeta::_internal_mutable_url() {
  
  return _impl_.url_.Mutable(GetArenaForAllocation());
}
inline std::string* TaskMeta::release_url() {
  // @@protoc_insertion_point(field_release:v6.services.pub.TaskMeta.url)
  return _impl_.url_.Release();
}
inline void TaskMeta::set_allocated_url(std::string* url) {
  if (url != nullptr) {
    
  } else {
    
  }
  _impl_.url_.SetAllocated(url, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.url_.IsDefault()) {
    _impl_.url_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:v6.services.pub.TaskMeta.url)
}

// uint64 size = 9;
inline void TaskMeta::clear_size() {
  _impl_.size_ = uint64_t{0u};
}
inline uint64_t TaskMeta::_internal_size() const {
  return _impl_.size_;
}
inline uint64_t TaskMeta::size() const {
  // @@protoc_insertion_point(field_get:v6.services.pub.TaskMeta.size)
  return _internal_size();
}
inline void TaskMeta::_internal_set_size(uint64_t value) {
  
  _impl_.size_ = value;
}
inline void TaskMeta::set_size(uint64_t value) {
  _internal_set_size(value);
  // @@protoc_insertion_point(field_set:v6.services.pub.TaskMeta.size)
}

// string name = 10;
inline void TaskMeta::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& TaskMeta::name() const {
  // @@protoc_insertion_point(field_get:v6.services.pub.TaskMeta.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TaskMeta::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:v6.services.pub.TaskMeta.name)
}
inline std::string* TaskMeta::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:v6.services.pub.TaskMeta.name)
  return _s;
}
inline const std::string& TaskMeta::_internal_name() const {
  return _impl_.name_.Get();
}
inline void TaskMeta::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* TaskMeta::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* TaskMeta::release_name() {
  // @@protoc_insertion_point(field_release:v6.services.pub.TaskMeta.name)
  return _impl_.name_.Release();
}
inline void TaskMeta::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:v6.services.pub.TaskMeta.name)
}

// string lock_by = 11;
inline void TaskMeta::clear_lock_by() {
  _impl_.lock_by_.ClearToEmpty();
}
inline const std::string& TaskMeta::lock_by() const {
  // @@protoc_insertion_point(field_get:v6.services.pub.TaskMeta.lock_by)
  return _internal_lock_by();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TaskMeta::set_lock_by(ArgT0&& arg0, ArgT... args) {
 
 _impl_.lock_by_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:v6.services.pub.TaskMeta.lock_by)
}
inline std::string* TaskMeta::mutable_lock_by() {
  std::string* _s = _internal_mutable_lock_by();
  // @@protoc_insertion_point(field_mutable:v6.services.pub.TaskMeta.lock_by)
  return _s;
}
inline const std::string& TaskMeta::_internal_lock_by() const {
  return _impl_.lock_by_.Get();
}
inline void TaskMeta::_internal_set_lock_by(const std::string& value) {
  
  _impl_.lock_by_.Set(value, GetArenaForAllocation());
}
inline std::string* TaskMeta::_internal_mutable_lock_by() {
  
  return _impl_.lock_by_.Mutable(GetArenaForAllocation());
}
inline std::string* TaskMeta::release_lock_by() {
  // @@protoc_insertion_point(field_release:v6.services.pub.TaskMeta.lock_by)
  return _impl_.lock_by_.Release();
}
inline void TaskMeta::set_allocated_lock_by(std::string* lock_by) {
  if (lock_by != nullptr) {
    
  } else {
    
  }
  _impl_.lock_by_.SetAllocated(lock_by, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.lock_by_.IsDefault()) {
    _impl_.lock_by_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:v6.services.pub.TaskMeta.lock_by)
}

// int32 code = 12;
inline void TaskMeta::clear_code() {
  _impl_.code_ = 0;
}
inline int32_t TaskMeta::_internal_code() const {
  return _impl_.code_;
}
inline int32_t TaskMeta::code() const {
  // @@protoc_insertion_point(field_get:v6.services.pub.TaskMeta.code)
  return _internal_code();
}
inline void TaskMeta::_internal_set_code(int32_t value) {
  
  _impl_.code_ = value;
}
inline void TaskMeta::set_code(int32_t value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:v6.services.pub.TaskMeta.code)
}

// string message = 13;
inline void TaskMeta::clear_message() {
  _impl_.message_.ClearToEmpty();
}
inline const std::string& TaskMeta::message() const {
  // @@protoc_insertion_point(field_get:v6.services.pub.TaskMeta.message)
  return _internal_message();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TaskMeta::set_message(ArgT0&& arg0, ArgT... args) {
 
 _impl_.message_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:v6.services.pub.TaskMeta.message)
}
inline std::string* TaskMeta::mutable_message() {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:v6.services.pub.TaskMeta.message)
  return _s;
}
inline const std::string& TaskMeta::_internal_message() const {
  return _impl_.message_.Get();
}
inline void TaskMeta::_internal_set_message(const std::string& value) {
  
  _impl_.message_.Set(value, GetArenaForAllocation());
}
inline std::string* TaskMeta::_internal_mutable_message() {
  
  return _impl_.message_.Mutable(GetArenaForAllocation());
}
inline std::string* TaskMeta::release_message() {
  // @@protoc_insertion_point(field_release:v6.services.pub.TaskMeta.message)
  return _impl_.message_.Release();
}
inline void TaskMeta::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  _impl_.message_.SetAllocated(message, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.message_.IsDefault()) {
    _impl_.message_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:v6.services.pub.TaskMeta.message)
}

// string addon = 14;
inline void TaskMeta::clear_addon() {
  _impl_.addon_.ClearToEmpty();
}
inline const std::string& TaskMeta::addon() const {
  // @@protoc_insertion_point(field_get:v6.services.pub.TaskMeta.addon)
  return _internal_addon();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TaskMeta::set_addon(ArgT0&& arg0, ArgT... args) {
 
 _impl_.addon_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:v6.services.pub.TaskMeta.addon)
}
inline std::string* TaskMeta::mutable_addon() {
  std::string* _s = _internal_mutable_addon();
  // @@protoc_insertion_point(field_mutable:v6.services.pub.TaskMeta.addon)
  return _s;
}
inline const std::string& TaskMeta::_internal_addon() const {
  return _impl_.addon_.Get();
}
inline void TaskMeta::_internal_set_addon(const std::string& value) {
  
  _impl_.addon_.Set(value, GetArenaForAllocation());
}
inline std::string* TaskMeta::_internal_mutable_addon() {
  
  return _impl_.addon_.Mutable(GetArenaForAllocation());
}
inline std::string* TaskMeta::release_addon() {
  // @@protoc_insertion_point(field_release:v6.services.pub.TaskMeta.addon)
  return _impl_.addon_.Release();
}
inline void TaskMeta::set_allocated_addon(std::string* addon) {
  if (addon != nullptr) {
    
  } else {
    
  }
  _impl_.addon_.SetAllocated(addon, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.addon_.IsDefault()) {
    _impl_.addon_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:v6.services.pub.TaskMeta.addon)
}

// uint64 retries = 15;
inline void TaskMeta::clear_retries() {
  _impl_.retries_ = uint64_t{0u};
}
inline uint64_t TaskMeta::_internal_retries() const {
  return _impl_.retries_;
}
inline uint64_t TaskMeta::retries() const {
  // @@protoc_insertion_point(field_get:v6.services.pub.TaskMeta.retries)
  return _internal_retries();
}
inline void TaskMeta::_internal_set_retries(uint64_t value) {
  
  _impl_.retries_ = value;
}
inline void TaskMeta::set_retries(uint64_t value) {
  _internal_set_retries(value);
  // @@protoc_insertion_point(field_set:v6.services.pub.TaskMeta.retries)
}

// uint64 progress = 16;
inline void TaskMeta::clear_progress() {
  _impl_.progress_ = uint64_t{0u};
}
inline uint64_t TaskMeta::_internal_progress() const {
  return _impl_.progress_;
}
inline uint64_t TaskMeta::progress() const {
  // @@protoc_insertion_point(field_get:v6.services.pub.TaskMeta.progress)
  return _internal_progress();
}
inline void TaskMeta::_internal_set_progress(uint64_t value) {
  
  _impl_.progress_ = value;
}
inline void TaskMeta::set_progress(uint64_t value) {
  _internal_set_progress(value);
  // @@protoc_insertion_point(field_set:v6.services.pub.TaskMeta.progress)
}

// uint64 bytes_total = 17;
inline void TaskMeta::clear_bytes_total() {
  _impl_.bytes_total_ = uint64_t{0u};
}
inline uint64_t TaskMeta::_internal_bytes_total() const {
  return _impl_.bytes_total_;
}
inline uint64_t TaskMeta::bytes_total() const {
  // @@protoc_insertion_point(field_get:v6.services.pub.TaskMeta.bytes_total)
  return _internal_bytes_total();
}
inline void TaskMeta::_internal_set_bytes_total(uint64_t value) {
  
  _impl_.bytes_total_ = value;
}
inline void TaskMeta::set_bytes_total(uint64_t value) {
  _internal_set_bytes_total(value);
  // @@protoc_insertion_point(field_set:v6.services.pub.TaskMeta.bytes_total)
}

// uint64 bytes_processed = 18;
inline void TaskMeta::clear_bytes_processed() {
  _impl_.bytes_processed_ = uint64_t{0u};
}
inline uint64_t TaskMeta::_internal_bytes_processed() const {
  return _impl_.bytes_processed_;
}
inline uint64_t TaskMeta::bytes_processed() const {
  // @@protoc_insertion_point(field_get:v6.services.pub.TaskMeta.bytes_processed)
  return _internal_bytes_processed();
}
inline void TaskMeta::_internal_set_bytes_processed(uint64_t value) {
  
  _impl_.bytes_processed_ = value;
}
inline void TaskMeta::set_bytes_processed(uint64_t value) {
  _internal_set_bytes_processed(value);
  // @@protoc_insertion_point(field_set:v6.services.pub.TaskMeta.bytes_processed)
}

// int32 flag = 19;
inline void TaskMeta::clear_flag() {
  _impl_.flag_ = 0;
}
inline int32_t TaskMeta::_internal_flag() const {
  return _impl_.flag_;
}
inline int32_t TaskMeta::flag() const {
  // @@protoc_insertion_point(field_get:v6.services.pub.TaskMeta.flag)
  return _internal_flag();
}
inline void TaskMeta::_internal_set_flag(int32_t value) {
  
  _impl_.flag_ = value;
}
inline void TaskMeta::set_flag(int32_t value) {
  _internal_set_flag(value);
  // @@protoc_insertion_point(field_set:v6.services.pub.TaskMeta.flag)
}

// -------------------------------------------------------------------

// TaskFile

// string identity = 1;
inline void TaskFile::clear_identity() {
  _impl_.identity_.ClearToEmpty();
}
inline const std::string& TaskFile::identity() const {
  // @@protoc_insertion_point(field_get:v6.services.pub.TaskFile.identity)
  return _internal_identity();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TaskFile::set_identity(ArgT0&& arg0, ArgT... args) {
 
 _impl_.identity_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:v6.services.pub.TaskFile.identity)
}
inline std::string* TaskFile::mutable_identity() {
  std::string* _s = _internal_mutable_identity();
  // @@protoc_insertion_point(field_mutable:v6.services.pub.TaskFile.identity)
  return _s;
}
inline const std::string& TaskFile::_internal_identity() const {
  return _impl_.identity_.Get();
}
inline void TaskFile::_internal_set_identity(const std::string& value) {
  
  _impl_.identity_.Set(value, GetArenaForAllocation());
}
inline std::string* TaskFile::_internal_mutable_identity() {
  
  return _impl_.identity_.Mutable(GetArenaForAllocation());
}
inline std::string* TaskFile::release_identity() {
  // @@protoc_insertion_point(field_release:v6.services.pub.TaskFile.identity)
  return _impl_.identity_.Release();
}
inline void TaskFile::set_allocated_identity(std::string* identity) {
  if (identity != nullptr) {
    
  } else {
    
  }
  _impl_.identity_.SetAllocated(identity, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.identity_.IsDefault()) {
    _impl_.identity_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:v6.services.pub.TaskFile.identity)
}

// string path = 4;
inline void TaskFile::clear_path() {
  _impl_.path_.ClearToEmpty();
}
inline const std::string& TaskFile::path() const {
  // @@protoc_insertion_point(field_get:v6.services.pub.TaskFile.path)
  return _internal_path();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TaskFile::set_path(ArgT0&& arg0, ArgT... args) {
 
 _impl_.path_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:v6.services.pub.TaskFile.path)
}
inline std::string* TaskFile::mutable_path() {
  std::string* _s = _internal_mutable_path();
  // @@protoc_insertion_point(field_mutable:v6.services.pub.TaskFile.path)
  return _s;
}
inline const std::string& TaskFile::_internal_path() const {
  return _impl_.path_.Get();
}
inline void TaskFile::_internal_set_path(const std::string& value) {
  
  _impl_.path_.Set(value, GetArenaForAllocation());
}
inline std::string* TaskFile::_internal_mutable_path() {
  
  return _impl_.path_.Mutable(GetArenaForAllocation());
}
inline std::string* TaskFile::release_path() {
  // @@protoc_insertion_point(field_release:v6.services.pub.TaskFile.path)
  return _impl_.path_.Release();
}
inline void TaskFile::set_allocated_path(std::string* path) {
  if (path != nullptr) {
    
  } else {
    
  }
  _impl_.path_.SetAllocated(path, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.path_.IsDefault()) {
    _impl_.path_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:v6.services.pub.TaskFile.path)
}

// int32 status = 5;
inline void TaskFile::clear_status() {
  _impl_.status_ = 0;
}
inline int32_t TaskFile::_internal_status() const {
  return _impl_.status_;
}
inline int32_t TaskFile::status() const {
  // @@protoc_insertion_point(field_get:v6.services.pub.TaskFile.status)
  return _internal_status();
}
inline void TaskFile::_internal_set_status(int32_t value) {
  
  _impl_.status_ = value;
}
inline void TaskFile::set_status(int32_t value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:v6.services.pub.TaskFile.status)
}

// int64 update_ts = 6;
inline void TaskFile::clear_update_ts() {
  _impl_.update_ts_ = int64_t{0};
}
inline int64_t TaskFile::_internal_update_ts() const {
  return _impl_.update_ts_;
}
inline int64_t TaskFile::update_ts() const {
  // @@protoc_insertion_point(field_get:v6.services.pub.TaskFile.update_ts)
  return _internal_update_ts();
}
inline void TaskFile::_internal_set_update_ts(int64_t value) {
  
  _impl_.update_ts_ = value;
}
inline void TaskFile::set_update_ts(int64_t value) {
  _internal_set_update_ts(value);
  // @@protoc_insertion_point(field_set:v6.services.pub.TaskFile.update_ts)
}

// int64 create_ts = 7;
inline void TaskFile::clear_create_ts() {
  _impl_.create_ts_ = int64_t{0};
}
inline int64_t TaskFile::_internal_create_ts() const {
  return _impl_.create_ts_;
}
inline int64_t TaskFile::create_ts() const {
  // @@protoc_insertion_point(field_get:v6.services.pub.TaskFile.create_ts)
  return _internal_create_ts();
}
inline void TaskFile::_internal_set_create_ts(int64_t value) {
  
  _impl_.create_ts_ = value;
}
inline void TaskFile::set_create_ts(int64_t value) {
  _internal_set_create_ts(value);
  // @@protoc_insertion_point(field_set:v6.services.pub.TaskFile.create_ts)
}

// string name = 8;
inline void TaskFile::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& TaskFile::name() const {
  // @@protoc_insertion_point(field_get:v6.services.pub.TaskFile.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TaskFile::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:v6.services.pub.TaskFile.name)
}
inline std::string* TaskFile::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:v6.services.pub.TaskFile.name)
  return _s;
}
inline const std::string& TaskFile::_internal_name() const {
  return _impl_.name_.Get();
}
inline void TaskFile::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* TaskFile::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* TaskFile::release_name() {
  // @@protoc_insertion_point(field_release:v6.services.pub.TaskFile.name)
  return _impl_.name_.Release();
}
inline void TaskFile::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:v6.services.pub.TaskFile.name)
}

// uint64 size = 9;
inline void TaskFile::clear_size() {
  _impl_.size_ = uint64_t{0u};
}
inline uint64_t TaskFile::_internal_size() const {
  return _impl_.size_;
}
inline uint64_t TaskFile::size() const {
  // @@protoc_insertion_point(field_get:v6.services.pub.TaskFile.size)
  return _internal_size();
}
inline void TaskFile::_internal_set_size(uint64_t value) {
  
  _impl_.size_ = value;
}
inline void TaskFile::set_size(uint64_t value) {
  _internal_set_size(value);
  // @@protoc_insertion_point(field_set:v6.services.pub.TaskFile.size)
}

// uint64 bytes_total = 13;
inline void TaskFile::clear_bytes_total() {
  _impl_.bytes_total_ = uint64_t{0u};
}
inline uint64_t TaskFile::_internal_bytes_total() const {
  return _impl_.bytes_total_;
}
inline uint64_t TaskFile::bytes_total() const {
  // @@protoc_insertion_point(field_get:v6.services.pub.TaskFile.bytes_total)
  return _internal_bytes_total();
}
inline void TaskFile::_internal_set_bytes_total(uint64_t value) {
  
  _impl_.bytes_total_ = value;
}
inline void TaskFile::set_bytes_total(uint64_t value) {
  _internal_set_bytes_total(value);
  // @@protoc_insertion_point(field_set:v6.services.pub.TaskFile.bytes_total)
}

// int32 index = 15;
inline void TaskFile::clear_index() {
  _impl_.index_ = 0;
}
inline int32_t TaskFile::_internal_index() const {
  return _impl_.index_;
}
inline int32_t TaskFile::index() const {
  // @@protoc_insertion_point(field_get:v6.services.pub.TaskFile.index)
  return _internal_index();
}
inline void TaskFile::_internal_set_index(int32_t value) {
  
  _impl_.index_ = value;
}
inline void TaskFile::set_index(int32_t value) {
  _internal_set_index(value);
  // @@protoc_insertion_point(field_set:v6.services.pub.TaskFile.index)
}

// bool directory = 16;
inline void TaskFile::clear_directory() {
  _impl_.directory_ = false;
}
inline bool TaskFile::_internal_directory() const {
  return _impl_.directory_;
}
inline bool TaskFile::directory() const {
  // @@protoc_insertion_point(field_get:v6.services.pub.TaskFile.directory)
  return _internal_directory();
}
inline void TaskFile::_internal_set_directory(bool value) {
  
  _impl_.directory_ = value;
}
inline void TaskFile::set_directory(bool value) {
  _internal_set_directory(value);
  // @@protoc_insertion_point(field_set:v6.services.pub.TaskFile.directory)
}

// -------------------------------------------------------------------

// TaskParseResponse

// .v6.services.pub.TaskMeta meta = 1;
inline bool TaskParseResponse::_internal_has_meta() const {
  return this != internal_default_instance() && _impl_.meta_ != nullptr;
}
inline bool TaskParseResponse::has_meta() const {
  return _internal_has_meta();
}
inline void TaskParseResponse::clear_meta() {
  if (GetArenaForAllocation() == nullptr && _impl_.meta_ != nullptr) {
    delete _impl_.meta_;
  }
  _impl_.meta_ = nullptr;
}
inline const ::v6::services::pub::TaskMeta& TaskParseResponse::_internal_meta() const {
  const ::v6::services::pub::TaskMeta* p = _impl_.meta_;
  return p != nullptr ? *p : reinterpret_cast<const ::v6::services::pub::TaskMeta&>(
      ::v6::services::pub::_TaskMeta_default_instance_);
}
inline const ::v6::services::pub::TaskMeta& TaskParseResponse::meta() const {
  // @@protoc_insertion_point(field_get:v6.services.pub.TaskParseResponse.meta)
  return _internal_meta();
}
inline void TaskParseResponse::unsafe_arena_set_allocated_meta(
    ::v6::services::pub::TaskMeta* meta) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.meta_);
  }
  _impl_.meta_ = meta;
  if (meta) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:v6.services.pub.TaskParseResponse.meta)
}
inline ::v6::services::pub::TaskMeta* TaskParseResponse::release_meta() {
  
  ::v6::services::pub::TaskMeta* temp = _impl_.meta_;
  _impl_.meta_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::v6::services::pub::TaskMeta* TaskParseResponse::unsafe_arena_release_meta() {
  // @@protoc_insertion_point(field_release:v6.services.pub.TaskParseResponse.meta)
  
  ::v6::services::pub::TaskMeta* temp = _impl_.meta_;
  _impl_.meta_ = nullptr;
  return temp;
}
inline ::v6::services::pub::TaskMeta* TaskParseResponse::_internal_mutable_meta() {
  
  if (_impl_.meta_ == nullptr) {
    auto* p = CreateMaybeMessage<::v6::services::pub::TaskMeta>(GetArenaForAllocation());
    _impl_.meta_ = p;
  }
  return _impl_.meta_;
}
inline ::v6::services::pub::TaskMeta* TaskParseResponse::mutable_meta() {
  ::v6::services::pub::TaskMeta* _msg = _internal_mutable_meta();
  // @@protoc_insertion_point(field_mutable:v6.services.pub.TaskParseResponse.meta)
  return _msg;
}
inline void TaskParseResponse::set_allocated_meta(::v6::services::pub::TaskMeta* meta) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.meta_;
  }
  if (meta) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(meta);
    if (message_arena != submessage_arena) {
      meta = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, meta, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.meta_ = meta;
  // @@protoc_insertion_point(field_set_allocated:v6.services.pub.TaskParseResponse.meta)
}

// repeated .v6.services.pub.TaskFile task_files = 2;
inline int TaskParseResponse::_internal_task_files_size() const {
  return _impl_.task_files_.size();
}
inline int TaskParseResponse::task_files_size() const {
  return _internal_task_files_size();
}
inline void TaskParseResponse::clear_task_files() {
  _impl_.task_files_.Clear();
}
inline ::v6::services::pub::TaskFile* TaskParseResponse::mutable_task_files(int index) {
  // @@protoc_insertion_point(field_mutable:v6.services.pub.TaskParseResponse.task_files)
  return _impl_.task_files_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::v6::services::pub::TaskFile >*
TaskParseResponse::mutable_task_files() {
  // @@protoc_insertion_point(field_mutable_list:v6.services.pub.TaskParseResponse.task_files)
  return &_impl_.task_files_;
}
inline const ::v6::services::pub::TaskFile& TaskParseResponse::_internal_task_files(int index) const {
  return _impl_.task_files_.Get(index);
}
inline const ::v6::services::pub::TaskFile& TaskParseResponse::task_files(int index) const {
  // @@protoc_insertion_point(field_get:v6.services.pub.TaskParseResponse.task_files)
  return _internal_task_files(index);
}
inline ::v6::services::pub::TaskFile* TaskParseResponse::_internal_add_task_files() {
  return _impl_.task_files_.Add();
}
inline ::v6::services::pub::TaskFile* TaskParseResponse::add_task_files() {
  ::v6::services::pub::TaskFile* _add = _internal_add_task_files();
  // @@protoc_insertion_point(field_add:v6.services.pub.TaskParseResponse.task_files)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::v6::services::pub::TaskFile >&
TaskParseResponse::task_files() const {
  // @@protoc_insertion_point(field_list:v6.services.pub.TaskParseResponse.task_files)
  return _impl_.task_files_;
}

// -------------------------------------------------------------------

// TaskAddRequest

// string url = 1;
inline void TaskAddRequest::clear_url() {
  _impl_.url_.ClearToEmpty();
}
inline const std::string& TaskAddRequest::url() const {
  // @@protoc_insertion_point(field_get:v6.services.pub.TaskAddRequest.url)
  return _internal_url();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TaskAddRequest::set_url(ArgT0&& arg0, ArgT... args) {
 
 _impl_.url_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:v6.services.pub.TaskAddRequest.url)
}
inline std::string* TaskAddRequest::mutable_url() {
  std::string* _s = _internal_mutable_url();
  // @@protoc_insertion_point(field_mutable:v6.services.pub.TaskAddRequest.url)
  return _s;
}
inline const std::string& TaskAddRequest::_internal_url() const {
  return _impl_.url_.Get();
}
inline void TaskAddRequest::_internal_set_url(const std::string& value) {
  
  _impl_.url_.Set(value, GetArenaForAllocation());
}
inline std::string* TaskAddRequest::_internal_mutable_url() {
  
  return _impl_.url_.Mutable(GetArenaForAllocation());
}
inline std::string* TaskAddRequest::release_url() {
  // @@protoc_insertion_point(field_release:v6.services.pub.TaskAddRequest.url)
  return _impl_.url_.Release();
}
inline void TaskAddRequest::set_allocated_url(std::string* url) {
  if (url != nullptr) {
    
  } else {
    
  }
  _impl_.url_.SetAllocated(url, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.url_.IsDefault()) {
    _impl_.url_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:v6.services.pub.TaskAddRequest.url)
}

// string file = 2;
inline void TaskAddRequest::clear_file() {
  _impl_.file_.ClearToEmpty();
}
inline const std::string& TaskAddRequest::file() const {
  // @@protoc_insertion_point(field_get:v6.services.pub.TaskAddRequest.file)
  return _internal_file();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TaskAddRequest::set_file(ArgT0&& arg0, ArgT... args) {
 
 _impl_.file_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:v6.services.pub.TaskAddRequest.file)
}
inline std::string* TaskAddRequest::mutable_file() {
  std::string* _s = _internal_mutable_file();
  // @@protoc_insertion_point(field_mutable:v6.services.pub.TaskAddRequest.file)
  return _s;
}
inline const std::string& TaskAddRequest::_internal_file() const {
  return _impl_.file_.Get();
}
inline void TaskAddRequest::_internal_set_file(const std::string& value) {
  
  _impl_.file_.Set(value, GetArenaForAllocation());
}
inline std::string* TaskAddRequest::_internal_mutable_file() {
  
  return _impl_.file_.Mutable(GetArenaForAllocation());
}
inline std::string* TaskAddRequest::release_file() {
  // @@protoc_insertion_point(field_release:v6.services.pub.TaskAddRequest.file)
  return _impl_.file_.Release();
}
inline void TaskAddRequest::set_allocated_file(std::string* file) {
  if (file != nullptr) {
    
  } else {
    
  }
  _impl_.file_.SetAllocated(file, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.file_.IsDefault()) {
    _impl_.file_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:v6.services.pub.TaskAddRequest.file)
}

// -------------------------------------------------------------------

// TaskAddResponse

// .v6.services.pub.TaskMeta meta = 1;
inline bool TaskAddResponse::_internal_has_meta() const {
  return this != internal_default_instance() && _impl_.meta_ != nullptr;
}
inline bool TaskAddResponse::has_meta() const {
  return _internal_has_meta();
}
inline void TaskAddResponse::clear_meta() {
  if (GetArenaForAllocation() == nullptr && _impl_.meta_ != nullptr) {
    delete _impl_.meta_;
  }
  _impl_.meta_ = nullptr;
}
inline const ::v6::services::pub::TaskMeta& TaskAddResponse::_internal_meta() const {
  const ::v6::services::pub::TaskMeta* p = _impl_.meta_;
  return p != nullptr ? *p : reinterpret_cast<const ::v6::services::pub::TaskMeta&>(
      ::v6::services::pub::_TaskMeta_default_instance_);
}
inline const ::v6::services::pub::TaskMeta& TaskAddResponse::meta() const {
  // @@protoc_insertion_point(field_get:v6.services.pub.TaskAddResponse.meta)
  return _internal_meta();
}
inline void TaskAddResponse::unsafe_arena_set_allocated_meta(
    ::v6::services::pub::TaskMeta* meta) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.meta_);
  }
  _impl_.meta_ = meta;
  if (meta) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:v6.services.pub.TaskAddResponse.meta)
}
inline ::v6::services::pub::TaskMeta* TaskAddResponse::release_meta() {
  
  ::v6::services::pub::TaskMeta* temp = _impl_.meta_;
  _impl_.meta_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::v6::services::pub::TaskMeta* TaskAddResponse::unsafe_arena_release_meta() {
  // @@protoc_insertion_point(field_release:v6.services.pub.TaskAddResponse.meta)
  
  ::v6::services::pub::TaskMeta* temp = _impl_.meta_;
  _impl_.meta_ = nullptr;
  return temp;
}
inline ::v6::services::pub::TaskMeta* TaskAddResponse::_internal_mutable_meta() {
  
  if (_impl_.meta_ == nullptr) {
    auto* p = CreateMaybeMessage<::v6::services::pub::TaskMeta>(GetArenaForAllocation());
    _impl_.meta_ = p;
  }
  return _impl_.meta_;
}
inline ::v6::services::pub::TaskMeta* TaskAddResponse::mutable_meta() {
  ::v6::services::pub::TaskMeta* _msg = _internal_mutable_meta();
  // @@protoc_insertion_point(field_mutable:v6.services.pub.TaskAddResponse.meta)
  return _msg;
}
inline void TaskAddResponse::set_allocated_meta(::v6::services::pub::TaskMeta* meta) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.meta_;
  }
  if (meta) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(meta);
    if (message_arena != submessage_arena) {
      meta = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, meta, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.meta_ = meta;
  // @@protoc_insertion_point(field_set_allocated:v6.services.pub.TaskAddResponse.meta)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace pub
}  // namespace services
}  // namespace v6

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_public_5fuser_5foffline_2eproto
