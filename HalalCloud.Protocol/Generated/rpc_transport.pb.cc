// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: rpc_transport.proto

#include "rpc_transport.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace v6 {
namespace rpc {
PROTOBUF_CONSTEXPR RpcTransport::RpcTransport(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.command_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.identity_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.message_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.data_)*/nullptr
  , /*decltype(_impl_.meta_)*/nullptr
  , /*decltype(_impl_.type_)*/0
  , /*decltype(_impl_.status_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RpcTransportDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RpcTransportDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RpcTransportDefaultTypeInternal() {}
  union {
    RpcTransport _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RpcTransportDefaultTypeInternal _RpcTransport_default_instance_;
PROTOBUF_CONSTEXPR RpcHeaderValue::RpcHeaderValue(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.value_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RpcHeaderValueDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RpcHeaderValueDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RpcHeaderValueDefaultTypeInternal() {}
  union {
    RpcHeaderValue _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RpcHeaderValueDefaultTypeInternal _RpcHeaderValue_default_instance_;
PROTOBUF_CONSTEXPR RpcMetaData_HeaderEntry_DoNotUse::RpcMetaData_HeaderEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct RpcMetaData_HeaderEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RpcMetaData_HeaderEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RpcMetaData_HeaderEntry_DoNotUseDefaultTypeInternal() {}
  union {
    RpcMetaData_HeaderEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RpcMetaData_HeaderEntry_DoNotUseDefaultTypeInternal _RpcMetaData_HeaderEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR RpcMetaData::RpcMetaData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.header_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.from_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.timestamp_)*/int64_t{0}
  , /*decltype(_impl_.version_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RpcMetaDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RpcMetaDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RpcMetaDataDefaultTypeInternal() {}
  union {
    RpcMetaData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RpcMetaDataDefaultTypeInternal _RpcMetaData_default_instance_;
}  // namespace rpc
}  // namespace v6
static ::_pb::Metadata file_level_metadata_rpc_5ftransport_2eproto[4];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_rpc_5ftransport_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_rpc_5ftransport_2eproto = nullptr;

const uint32_t TableStruct_rpc_5ftransport_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::v6::rpc::RpcTransport, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::v6::rpc::RpcTransport, _impl_.command_),
  PROTOBUF_FIELD_OFFSET(::v6::rpc::RpcTransport, _impl_.identity_),
  PROTOBUF_FIELD_OFFSET(::v6::rpc::RpcTransport, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::v6::rpc::RpcTransport, _impl_.data_),
  PROTOBUF_FIELD_OFFSET(::v6::rpc::RpcTransport, _impl_.status_),
  PROTOBUF_FIELD_OFFSET(::v6::rpc::RpcTransport, _impl_.message_),
  PROTOBUF_FIELD_OFFSET(::v6::rpc::RpcTransport, _impl_.meta_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::v6::rpc::RpcHeaderValue, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::v6::rpc::RpcHeaderValue, _impl_.value_),
  PROTOBUF_FIELD_OFFSET(::v6::rpc::RpcMetaData_HeaderEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::v6::rpc::RpcMetaData_HeaderEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::v6::rpc::RpcMetaData_HeaderEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::v6::rpc::RpcMetaData_HeaderEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::v6::rpc::RpcMetaData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::v6::rpc::RpcMetaData, _impl_.timestamp_),
  PROTOBUF_FIELD_OFFSET(::v6::rpc::RpcMetaData, _impl_.from_),
  PROTOBUF_FIELD_OFFSET(::v6::rpc::RpcMetaData, _impl_.version_),
  PROTOBUF_FIELD_OFFSET(::v6::rpc::RpcMetaData, _impl_.header_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::v6::rpc::RpcTransport)},
  { 13, -1, -1, sizeof(::v6::rpc::RpcHeaderValue)},
  { 20, 28, -1, sizeof(::v6::rpc::RpcMetaData_HeaderEntry_DoNotUse)},
  { 30, -1, -1, sizeof(::v6::rpc::RpcMetaData)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::v6::rpc::_RpcTransport_default_instance_._instance,
  &::v6::rpc::_RpcHeaderValue_default_instance_._instance,
  &::v6::rpc::_RpcMetaData_HeaderEntry_DoNotUse_default_instance_._instance,
  &::v6::rpc::_RpcMetaData_default_instance_._instance,
};

const char descriptor_table_protodef_rpc_5ftransport_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\023rpc_transport.proto\022\006v6.rpc\032\031google/pr"
  "otobuf/any.proto\"\247\001\n\014RpcTransport\022\017\n\007com"
  "mand\030\001 \001(\t\022\020\n\010identity\030\002 \001(\t\022\014\n\004type\030\003 \001"
  "(\005\022\"\n\004data\030\004 \001(\0132\024.google.protobuf.Any\022\016"
  "\n\006status\030\005 \001(\005\022\017\n\007message\030\006 \001(\t\022!\n\004meta\030"
  "\007 \001(\0132\023.v6.rpc.RpcMetaData\"\037\n\016RpcHeaderV"
  "alue\022\r\n\005value\030\001 \003(\t\"\267\001\n\013RpcMetaData\022\021\n\tt"
  "imestamp\030\001 \001(\003\022\014\n\004from\030\002 \001(\t\022\017\n\007version\030"
  "\003 \001(\005\022/\n\006header\030\004 \003(\0132\037.v6.rpc.RpcMetaDa"
  "ta.HeaderEntry\032E\n\013HeaderEntry\022\013\n\003key\030\001 \001"
  "(\t\022%\n\005value\030\002 \001(\0132\026.v6.rpc.RpcHeaderValu"
  "e:\0028\001B3Z1github.com/city404/v6-public-rp"
  "c-proto/go/v6/rpcsb\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_rpc_5ftransport_2eproto_deps[1] = {
  &::descriptor_table_google_2fprotobuf_2fany_2eproto,
};
static ::_pbi::once_flag descriptor_table_rpc_5ftransport_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_rpc_5ftransport_2eproto = {
    false, false, 506, descriptor_table_protodef_rpc_5ftransport_2eproto,
    "rpc_transport.proto",
    &descriptor_table_rpc_5ftransport_2eproto_once, descriptor_table_rpc_5ftransport_2eproto_deps, 1, 4,
    schemas, file_default_instances, TableStruct_rpc_5ftransport_2eproto::offsets,
    file_level_metadata_rpc_5ftransport_2eproto, file_level_enum_descriptors_rpc_5ftransport_2eproto,
    file_level_service_descriptors_rpc_5ftransport_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_rpc_5ftransport_2eproto_getter() {
  return &descriptor_table_rpc_5ftransport_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_rpc_5ftransport_2eproto(&descriptor_table_rpc_5ftransport_2eproto);
namespace v6 {
namespace rpc {

// ===================================================================

class RpcTransport::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Any& data(const RpcTransport* msg);
  static const ::v6::rpc::RpcMetaData& meta(const RpcTransport* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Any&
RpcTransport::_Internal::data(const RpcTransport* msg) {
  return *msg->_impl_.data_;
}
const ::v6::rpc::RpcMetaData&
RpcTransport::_Internal::meta(const RpcTransport* msg) {
  return *msg->_impl_.meta_;
}
void RpcTransport::clear_data() {
  if (GetArenaForAllocation() == nullptr && _impl_.data_ != nullptr) {
    delete _impl_.data_;
  }
  _impl_.data_ = nullptr;
}
RpcTransport::RpcTransport(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:v6.rpc.RpcTransport)
}
RpcTransport::RpcTransport(const RpcTransport& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RpcTransport* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.command_){}
    , decltype(_impl_.identity_){}
    , decltype(_impl_.message_){}
    , decltype(_impl_.data_){nullptr}
    , decltype(_impl_.meta_){nullptr}
    , decltype(_impl_.type_){}
    , decltype(_impl_.status_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.command_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.command_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_command().empty()) {
    _this->_impl_.command_.Set(from._internal_command(), 
      _this->GetArenaForAllocation());
  }
  _impl_.identity_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.identity_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_identity().empty()) {
    _this->_impl_.identity_.Set(from._internal_identity(), 
      _this->GetArenaForAllocation());
  }
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_message().empty()) {
    _this->_impl_.message_.Set(from._internal_message(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_data()) {
    _this->_impl_.data_ = new ::PROTOBUF_NAMESPACE_ID::Any(*from._impl_.data_);
  }
  if (from._internal_has_meta()) {
    _this->_impl_.meta_ = new ::v6::rpc::RpcMetaData(*from._impl_.meta_);
  }
  ::memcpy(&_impl_.type_, &from._impl_.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.status_) -
    reinterpret_cast<char*>(&_impl_.type_)) + sizeof(_impl_.status_));
  // @@protoc_insertion_point(copy_constructor:v6.rpc.RpcTransport)
}

inline void RpcTransport::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.command_){}
    , decltype(_impl_.identity_){}
    , decltype(_impl_.message_){}
    , decltype(_impl_.data_){nullptr}
    , decltype(_impl_.meta_){nullptr}
    , decltype(_impl_.type_){0}
    , decltype(_impl_.status_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.command_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.command_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.identity_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.identity_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

RpcTransport::~RpcTransport() {
  // @@protoc_insertion_point(destructor:v6.rpc.RpcTransport)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RpcTransport::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.command_.Destroy();
  _impl_.identity_.Destroy();
  _impl_.message_.Destroy();
  if (this != internal_default_instance()) delete _impl_.data_;
  if (this != internal_default_instance()) delete _impl_.meta_;
}

void RpcTransport::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RpcTransport::Clear() {
// @@protoc_insertion_point(message_clear_start:v6.rpc.RpcTransport)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.command_.ClearToEmpty();
  _impl_.identity_.ClearToEmpty();
  _impl_.message_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.data_ != nullptr) {
    delete _impl_.data_;
  }
  _impl_.data_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.meta_ != nullptr) {
    delete _impl_.meta_;
  }
  _impl_.meta_ = nullptr;
  ::memset(&_impl_.type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.status_) -
      reinterpret_cast<char*>(&_impl_.type_)) + sizeof(_impl_.status_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RpcTransport::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string command = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_command();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "v6.rpc.RpcTransport.command"));
        } else
          goto handle_unusual;
        continue;
      // string identity = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_identity();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "v6.rpc.RpcTransport.identity"));
        } else
          goto handle_unusual;
        continue;
      // int32 type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Any data = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_data(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 status = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string message = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_message();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "v6.rpc.RpcTransport.message"));
        } else
          goto handle_unusual;
        continue;
      // .v6.rpc.RpcMetaData meta = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_meta(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RpcTransport::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:v6.rpc.RpcTransport)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string command = 1;
  if (!this->_internal_command().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_command().data(), static_cast<int>(this->_internal_command().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "v6.rpc.RpcTransport.command");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_command(), target);
  }

  // string identity = 2;
  if (!this->_internal_identity().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_identity().data(), static_cast<int>(this->_internal_identity().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "v6.rpc.RpcTransport.identity");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_identity(), target);
  }

  // int32 type = 3;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_type(), target);
  }

  // .google.protobuf.Any data = 4;
  if (this->_internal_has_data()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::data(this),
        _Internal::data(this).GetCachedSize(), target, stream);
  }

  // int32 status = 5;
  if (this->_internal_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_status(), target);
  }

  // string message = 6;
  if (!this->_internal_message().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "v6.rpc.RpcTransport.message");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_message(), target);
  }

  // .v6.rpc.RpcMetaData meta = 7;
  if (this->_internal_has_meta()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::meta(this),
        _Internal::meta(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:v6.rpc.RpcTransport)
  return target;
}

size_t RpcTransport::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:v6.rpc.RpcTransport)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string command = 1;
  if (!this->_internal_command().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_command());
  }

  // string identity = 2;
  if (!this->_internal_identity().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_identity());
  }

  // string message = 6;
  if (!this->_internal_message().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message());
  }

  // .google.protobuf.Any data = 4;
  if (this->_internal_has_data()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.data_);
  }

  // .v6.rpc.RpcMetaData meta = 7;
  if (this->_internal_has_meta()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.meta_);
  }

  // int32 type = 3;
  if (this->_internal_type() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_type());
  }

  // int32 status = 5;
  if (this->_internal_status() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_status());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RpcTransport::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RpcTransport::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RpcTransport::GetClassData() const { return &_class_data_; }


void RpcTransport::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RpcTransport*>(&to_msg);
  auto& from = static_cast<const RpcTransport&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:v6.rpc.RpcTransport)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_command().empty()) {
    _this->_internal_set_command(from._internal_command());
  }
  if (!from._internal_identity().empty()) {
    _this->_internal_set_identity(from._internal_identity());
  }
  if (!from._internal_message().empty()) {
    _this->_internal_set_message(from._internal_message());
  }
  if (from._internal_has_data()) {
    _this->_internal_mutable_data()->::PROTOBUF_NAMESPACE_ID::Any::MergeFrom(
        from._internal_data());
  }
  if (from._internal_has_meta()) {
    _this->_internal_mutable_meta()->::v6::rpc::RpcMetaData::MergeFrom(
        from._internal_meta());
  }
  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  if (from._internal_status() != 0) {
    _this->_internal_set_status(from._internal_status());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RpcTransport::CopyFrom(const RpcTransport& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:v6.rpc.RpcTransport)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RpcTransport::IsInitialized() const {
  return true;
}

void RpcTransport::InternalSwap(RpcTransport* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.command_, lhs_arena,
      &other->_impl_.command_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.identity_, lhs_arena,
      &other->_impl_.identity_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.message_, lhs_arena,
      &other->_impl_.message_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RpcTransport, _impl_.status_)
      + sizeof(RpcTransport::_impl_.status_)
      - PROTOBUF_FIELD_OFFSET(RpcTransport, _impl_.data_)>(
          reinterpret_cast<char*>(&_impl_.data_),
          reinterpret_cast<char*>(&other->_impl_.data_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RpcTransport::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_rpc_5ftransport_2eproto_getter, &descriptor_table_rpc_5ftransport_2eproto_once,
      file_level_metadata_rpc_5ftransport_2eproto[0]);
}

// ===================================================================

class RpcHeaderValue::_Internal {
 public:
};

RpcHeaderValue::RpcHeaderValue(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:v6.rpc.RpcHeaderValue)
}
RpcHeaderValue::RpcHeaderValue(const RpcHeaderValue& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RpcHeaderValue* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.value_){from._impl_.value_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:v6.rpc.RpcHeaderValue)
}

inline void RpcHeaderValue::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.value_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

RpcHeaderValue::~RpcHeaderValue() {
  // @@protoc_insertion_point(destructor:v6.rpc.RpcHeaderValue)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RpcHeaderValue::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.value_.~RepeatedPtrField();
}

void RpcHeaderValue::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RpcHeaderValue::Clear() {
// @@protoc_insertion_point(message_clear_start:v6.rpc.RpcHeaderValue)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.value_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RpcHeaderValue::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated string value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_value();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "v6.rpc.RpcHeaderValue.value"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RpcHeaderValue::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:v6.rpc.RpcHeaderValue)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string value = 1;
  for (int i = 0, n = this->_internal_value_size(); i < n; i++) {
    const auto& s = this->_internal_value(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "v6.rpc.RpcHeaderValue.value");
    target = stream->WriteString(1, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:v6.rpc.RpcHeaderValue)
  return target;
}

size_t RpcHeaderValue::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:v6.rpc.RpcHeaderValue)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string value = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.value_.size());
  for (int i = 0, n = _impl_.value_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.value_.Get(i));
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RpcHeaderValue::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RpcHeaderValue::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RpcHeaderValue::GetClassData() const { return &_class_data_; }


void RpcHeaderValue::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RpcHeaderValue*>(&to_msg);
  auto& from = static_cast<const RpcHeaderValue&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:v6.rpc.RpcHeaderValue)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.value_.MergeFrom(from._impl_.value_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RpcHeaderValue::CopyFrom(const RpcHeaderValue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:v6.rpc.RpcHeaderValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RpcHeaderValue::IsInitialized() const {
  return true;
}

void RpcHeaderValue::InternalSwap(RpcHeaderValue* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.value_.InternalSwap(&other->_impl_.value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RpcHeaderValue::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_rpc_5ftransport_2eproto_getter, &descriptor_table_rpc_5ftransport_2eproto_once,
      file_level_metadata_rpc_5ftransport_2eproto[1]);
}

// ===================================================================

RpcMetaData_HeaderEntry_DoNotUse::RpcMetaData_HeaderEntry_DoNotUse() {}
RpcMetaData_HeaderEntry_DoNotUse::RpcMetaData_HeaderEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void RpcMetaData_HeaderEntry_DoNotUse::MergeFrom(const RpcMetaData_HeaderEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata RpcMetaData_HeaderEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_rpc_5ftransport_2eproto_getter, &descriptor_table_rpc_5ftransport_2eproto_once,
      file_level_metadata_rpc_5ftransport_2eproto[2]);
}

// ===================================================================

class RpcMetaData::_Internal {
 public:
};

RpcMetaData::RpcMetaData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  if (arena != nullptr && !is_message_owned) {
    arena->OwnCustomDestructor(this, &RpcMetaData::ArenaDtor);
  }
  // @@protoc_insertion_point(arena_constructor:v6.rpc.RpcMetaData)
}
RpcMetaData::RpcMetaData(const RpcMetaData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RpcMetaData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      /*decltype(_impl_.header_)*/{}
    , decltype(_impl_.from_){}
    , decltype(_impl_.timestamp_){}
    , decltype(_impl_.version_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.header_.MergeFrom(from._impl_.header_);
  _impl_.from_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.from_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_from().empty()) {
    _this->_impl_.from_.Set(from._internal_from(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.timestamp_, &from._impl_.timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.version_) -
    reinterpret_cast<char*>(&_impl_.timestamp_)) + sizeof(_impl_.version_));
  // @@protoc_insertion_point(copy_constructor:v6.rpc.RpcMetaData)
}

inline void RpcMetaData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      /*decltype(_impl_.header_)*/{::_pbi::ArenaInitialized(), arena}
    , decltype(_impl_.from_){}
    , decltype(_impl_.timestamp_){int64_t{0}}
    , decltype(_impl_.version_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.from_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.from_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

RpcMetaData::~RpcMetaData() {
  // @@protoc_insertion_point(destructor:v6.rpc.RpcMetaData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    ArenaDtor(this);
    return;
  }
  SharedDtor();
}

inline void RpcMetaData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.header_.Destruct();
  _impl_.header_.~MapField();
  _impl_.from_.Destroy();
}

void RpcMetaData::ArenaDtor(void* object) {
  RpcMetaData* _this = reinterpret_cast< RpcMetaData* >(object);
  _this->_impl_.header_.Destruct();
}
void RpcMetaData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RpcMetaData::Clear() {
// @@protoc_insertion_point(message_clear_start:v6.rpc.RpcMetaData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.header_.Clear();
  _impl_.from_.ClearToEmpty();
  ::memset(&_impl_.timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.version_) -
      reinterpret_cast<char*>(&_impl_.timestamp_)) + sizeof(_impl_.version_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RpcMetaData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 timestamp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string from = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_from();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "v6.rpc.RpcMetaData.from"));
        } else
          goto handle_unusual;
        continue;
      // int32 version = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // map<string, .v6.rpc.RpcHeaderValue> header = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.header_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RpcMetaData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:v6.rpc.RpcMetaData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 timestamp = 1;
  if (this->_internal_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_timestamp(), target);
  }

  // string from = 2;
  if (!this->_internal_from().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_from().data(), static_cast<int>(this->_internal_from().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "v6.rpc.RpcMetaData.from");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_from(), target);
  }

  // int32 version = 3;
  if (this->_internal_version() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_version(), target);
  }

  // map<string, .v6.rpc.RpcHeaderValue> header = 4;
  if (!this->_internal_header().empty()) {
    using MapType = ::_pb::Map<std::string, ::v6::rpc::RpcHeaderValue>;
    using WireHelper = RpcMetaData_HeaderEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_header();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.first.data(), static_cast<int>(entry.first.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "v6.rpc.RpcMetaData.HeaderEntry.key");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(4, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(4, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:v6.rpc.RpcMetaData)
  return target;
}

size_t RpcMetaData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:v6.rpc.RpcMetaData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, .v6.rpc.RpcHeaderValue> header = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_header_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::v6::rpc::RpcHeaderValue >::const_iterator
      it = this->_internal_header().begin();
      it != this->_internal_header().end(); ++it) {
    total_size += RpcMetaData_HeaderEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // string from = 2;
  if (!this->_internal_from().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_from());
  }

  // int64 timestamp = 1;
  if (this->_internal_timestamp() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_timestamp());
  }

  // int32 version = 3;
  if (this->_internal_version() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_version());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RpcMetaData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RpcMetaData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RpcMetaData::GetClassData() const { return &_class_data_; }


void RpcMetaData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RpcMetaData*>(&to_msg);
  auto& from = static_cast<const RpcMetaData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:v6.rpc.RpcMetaData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.header_.MergeFrom(from._impl_.header_);
  if (!from._internal_from().empty()) {
    _this->_internal_set_from(from._internal_from());
  }
  if (from._internal_timestamp() != 0) {
    _this->_internal_set_timestamp(from._internal_timestamp());
  }
  if (from._internal_version() != 0) {
    _this->_internal_set_version(from._internal_version());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RpcMetaData::CopyFrom(const RpcMetaData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:v6.rpc.RpcMetaData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RpcMetaData::IsInitialized() const {
  return true;
}

void RpcMetaData::InternalSwap(RpcMetaData* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.header_.InternalSwap(&other->_impl_.header_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.from_, lhs_arena,
      &other->_impl_.from_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RpcMetaData, _impl_.version_)
      + sizeof(RpcMetaData::_impl_.version_)
      - PROTOBUF_FIELD_OFFSET(RpcMetaData, _impl_.timestamp_)>(
          reinterpret_cast<char*>(&_impl_.timestamp_),
          reinterpret_cast<char*>(&other->_impl_.timestamp_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RpcMetaData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_rpc_5ftransport_2eproto_getter, &descriptor_table_rpc_5ftransport_2eproto_once,
      file_level_metadata_rpc_5ftransport_2eproto[3]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace rpc
}  // namespace v6
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::v6::rpc::RpcTransport*
Arena::CreateMaybeMessage< ::v6::rpc::RpcTransport >(Arena* arena) {
  return Arena::CreateMessageInternal< ::v6::rpc::RpcTransport >(arena);
}
template<> PROTOBUF_NOINLINE ::v6::rpc::RpcHeaderValue*
Arena::CreateMaybeMessage< ::v6::rpc::RpcHeaderValue >(Arena* arena) {
  return Arena::CreateMessageInternal< ::v6::rpc::RpcHeaderValue >(arena);
}
template<> PROTOBUF_NOINLINE ::v6::rpc::RpcMetaData_HeaderEntry_DoNotUse*
Arena::CreateMaybeMessage< ::v6::rpc::RpcMetaData_HeaderEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::v6::rpc::RpcMetaData_HeaderEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::v6::rpc::RpcMetaData*
Arena::CreateMaybeMessage< ::v6::rpc::RpcMetaData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::v6::rpc::RpcMetaData >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
