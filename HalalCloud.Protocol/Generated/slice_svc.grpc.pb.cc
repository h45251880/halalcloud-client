// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: slice_svc.proto

#include "slice_svc.pb.h"
#include "slice_svc.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace v6 {
namespace services {
namespace pub {

static const char* PubSlice_method_names[] = {
  "/v6.services.pub.PubSlice/GetSlice",
  "/v6.services.pub.PubSlice/CreateSlice",
  "/v6.services.pub.PubSlice/GetMeta",
  "/v6.services.pub.PubSlice/CreateMeta",
  "/v6.services.pub.PubSlice/AddFastLookup",
  "/v6.services.pub.PubSlice/GetFastLookup",
};

std::unique_ptr< PubSlice::Stub> PubSlice::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< PubSlice::Stub> stub(new PubSlice::Stub(channel, options));
  return stub;
}

PubSlice::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_GetSlice_(PubSlice_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CreateSlice_(PubSlice_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetMeta_(PubSlice_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CreateMeta_(PubSlice_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_AddFastLookup_(PubSlice_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetFastLookup_(PubSlice_method_names[5], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status PubSlice::Stub::GetSlice(::grpc::ClientContext* context, const ::v6::services::pub::Slice& request, ::v6::services::pub::Slice* response) {
  return ::grpc::internal::BlockingUnaryCall< ::v6::services::pub::Slice, ::v6::services::pub::Slice, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetSlice_, context, request, response);
}

void PubSlice::Stub::async::GetSlice(::grpc::ClientContext* context, const ::v6::services::pub::Slice* request, ::v6::services::pub::Slice* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::v6::services::pub::Slice, ::v6::services::pub::Slice, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetSlice_, context, request, response, std::move(f));
}

void PubSlice::Stub::async::GetSlice(::grpc::ClientContext* context, const ::v6::services::pub::Slice* request, ::v6::services::pub::Slice* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetSlice_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::v6::services::pub::Slice>* PubSlice::Stub::PrepareAsyncGetSliceRaw(::grpc::ClientContext* context, const ::v6::services::pub::Slice& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::v6::services::pub::Slice, ::v6::services::pub::Slice, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetSlice_, context, request);
}

::grpc::ClientAsyncResponseReader< ::v6::services::pub::Slice>* PubSlice::Stub::AsyncGetSliceRaw(::grpc::ClientContext* context, const ::v6::services::pub::Slice& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetSliceRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status PubSlice::Stub::CreateSlice(::grpc::ClientContext* context, const ::v6::services::pub::Slice& request, ::v6::services::pub::Slice* response) {
  return ::grpc::internal::BlockingUnaryCall< ::v6::services::pub::Slice, ::v6::services::pub::Slice, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_CreateSlice_, context, request, response);
}

void PubSlice::Stub::async::CreateSlice(::grpc::ClientContext* context, const ::v6::services::pub::Slice* request, ::v6::services::pub::Slice* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::v6::services::pub::Slice, ::v6::services::pub::Slice, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateSlice_, context, request, response, std::move(f));
}

void PubSlice::Stub::async::CreateSlice(::grpc::ClientContext* context, const ::v6::services::pub::Slice* request, ::v6::services::pub::Slice* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateSlice_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::v6::services::pub::Slice>* PubSlice::Stub::PrepareAsyncCreateSliceRaw(::grpc::ClientContext* context, const ::v6::services::pub::Slice& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::v6::services::pub::Slice, ::v6::services::pub::Slice, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_CreateSlice_, context, request);
}

::grpc::ClientAsyncResponseReader< ::v6::services::pub::Slice>* PubSlice::Stub::AsyncCreateSliceRaw(::grpc::ClientContext* context, const ::v6::services::pub::Slice& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCreateSliceRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status PubSlice::Stub::GetMeta(::grpc::ClientContext* context, const ::v6::services::pub::Meta& request, ::v6::services::pub::Meta* response) {
  return ::grpc::internal::BlockingUnaryCall< ::v6::services::pub::Meta, ::v6::services::pub::Meta, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetMeta_, context, request, response);
}

void PubSlice::Stub::async::GetMeta(::grpc::ClientContext* context, const ::v6::services::pub::Meta* request, ::v6::services::pub::Meta* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::v6::services::pub::Meta, ::v6::services::pub::Meta, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetMeta_, context, request, response, std::move(f));
}

void PubSlice::Stub::async::GetMeta(::grpc::ClientContext* context, const ::v6::services::pub::Meta* request, ::v6::services::pub::Meta* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetMeta_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::v6::services::pub::Meta>* PubSlice::Stub::PrepareAsyncGetMetaRaw(::grpc::ClientContext* context, const ::v6::services::pub::Meta& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::v6::services::pub::Meta, ::v6::services::pub::Meta, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetMeta_, context, request);
}

::grpc::ClientAsyncResponseReader< ::v6::services::pub::Meta>* PubSlice::Stub::AsyncGetMetaRaw(::grpc::ClientContext* context, const ::v6::services::pub::Meta& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetMetaRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status PubSlice::Stub::CreateMeta(::grpc::ClientContext* context, const ::v6::services::pub::Meta& request, ::v6::services::pub::Meta* response) {
  return ::grpc::internal::BlockingUnaryCall< ::v6::services::pub::Meta, ::v6::services::pub::Meta, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_CreateMeta_, context, request, response);
}

void PubSlice::Stub::async::CreateMeta(::grpc::ClientContext* context, const ::v6::services::pub::Meta* request, ::v6::services::pub::Meta* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::v6::services::pub::Meta, ::v6::services::pub::Meta, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateMeta_, context, request, response, std::move(f));
}

void PubSlice::Stub::async::CreateMeta(::grpc::ClientContext* context, const ::v6::services::pub::Meta* request, ::v6::services::pub::Meta* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateMeta_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::v6::services::pub::Meta>* PubSlice::Stub::PrepareAsyncCreateMetaRaw(::grpc::ClientContext* context, const ::v6::services::pub::Meta& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::v6::services::pub::Meta, ::v6::services::pub::Meta, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_CreateMeta_, context, request);
}

::grpc::ClientAsyncResponseReader< ::v6::services::pub::Meta>* PubSlice::Stub::AsyncCreateMetaRaw(::grpc::ClientContext* context, const ::v6::services::pub::Meta& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCreateMetaRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status PubSlice::Stub::AddFastLookup(::grpc::ClientContext* context, const ::v6::services::pub::FastLookup& request, ::v6::services::pub::FastLookup* response) {
  return ::grpc::internal::BlockingUnaryCall< ::v6::services::pub::FastLookup, ::v6::services::pub::FastLookup, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_AddFastLookup_, context, request, response);
}

void PubSlice::Stub::async::AddFastLookup(::grpc::ClientContext* context, const ::v6::services::pub::FastLookup* request, ::v6::services::pub::FastLookup* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::v6::services::pub::FastLookup, ::v6::services::pub::FastLookup, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_AddFastLookup_, context, request, response, std::move(f));
}

void PubSlice::Stub::async::AddFastLookup(::grpc::ClientContext* context, const ::v6::services::pub::FastLookup* request, ::v6::services::pub::FastLookup* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_AddFastLookup_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::v6::services::pub::FastLookup>* PubSlice::Stub::PrepareAsyncAddFastLookupRaw(::grpc::ClientContext* context, const ::v6::services::pub::FastLookup& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::v6::services::pub::FastLookup, ::v6::services::pub::FastLookup, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_AddFastLookup_, context, request);
}

::grpc::ClientAsyncResponseReader< ::v6::services::pub::FastLookup>* PubSlice::Stub::AsyncAddFastLookupRaw(::grpc::ClientContext* context, const ::v6::services::pub::FastLookup& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncAddFastLookupRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status PubSlice::Stub::GetFastLookup(::grpc::ClientContext* context, const ::v6::services::pub::FastLookupRequest& request, ::v6::services::pub::FastLookup* response) {
  return ::grpc::internal::BlockingUnaryCall< ::v6::services::pub::FastLookupRequest, ::v6::services::pub::FastLookup, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetFastLookup_, context, request, response);
}

void PubSlice::Stub::async::GetFastLookup(::grpc::ClientContext* context, const ::v6::services::pub::FastLookupRequest* request, ::v6::services::pub::FastLookup* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::v6::services::pub::FastLookupRequest, ::v6::services::pub::FastLookup, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetFastLookup_, context, request, response, std::move(f));
}

void PubSlice::Stub::async::GetFastLookup(::grpc::ClientContext* context, const ::v6::services::pub::FastLookupRequest* request, ::v6::services::pub::FastLookup* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetFastLookup_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::v6::services::pub::FastLookup>* PubSlice::Stub::PrepareAsyncGetFastLookupRaw(::grpc::ClientContext* context, const ::v6::services::pub::FastLookupRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::v6::services::pub::FastLookup, ::v6::services::pub::FastLookupRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetFastLookup_, context, request);
}

::grpc::ClientAsyncResponseReader< ::v6::services::pub::FastLookup>* PubSlice::Stub::AsyncGetFastLookupRaw(::grpc::ClientContext* context, const ::v6::services::pub::FastLookupRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetFastLookupRaw(context, request, cq);
  result->StartCall();
  return result;
}

PubSlice::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      PubSlice_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< PubSlice::Service, ::v6::services::pub::Slice, ::v6::services::pub::Slice, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](PubSlice::Service* service,
             ::grpc::ServerContext* ctx,
             const ::v6::services::pub::Slice* req,
             ::v6::services::pub::Slice* resp) {
               return service->GetSlice(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      PubSlice_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< PubSlice::Service, ::v6::services::pub::Slice, ::v6::services::pub::Slice, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](PubSlice::Service* service,
             ::grpc::ServerContext* ctx,
             const ::v6::services::pub::Slice* req,
             ::v6::services::pub::Slice* resp) {
               return service->CreateSlice(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      PubSlice_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< PubSlice::Service, ::v6::services::pub::Meta, ::v6::services::pub::Meta, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](PubSlice::Service* service,
             ::grpc::ServerContext* ctx,
             const ::v6::services::pub::Meta* req,
             ::v6::services::pub::Meta* resp) {
               return service->GetMeta(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      PubSlice_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< PubSlice::Service, ::v6::services::pub::Meta, ::v6::services::pub::Meta, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](PubSlice::Service* service,
             ::grpc::ServerContext* ctx,
             const ::v6::services::pub::Meta* req,
             ::v6::services::pub::Meta* resp) {
               return service->CreateMeta(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      PubSlice_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< PubSlice::Service, ::v6::services::pub::FastLookup, ::v6::services::pub::FastLookup, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](PubSlice::Service* service,
             ::grpc::ServerContext* ctx,
             const ::v6::services::pub::FastLookup* req,
             ::v6::services::pub::FastLookup* resp) {
               return service->AddFastLookup(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      PubSlice_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< PubSlice::Service, ::v6::services::pub::FastLookupRequest, ::v6::services::pub::FastLookup, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](PubSlice::Service* service,
             ::grpc::ServerContext* ctx,
             const ::v6::services::pub::FastLookupRequest* req,
             ::v6::services::pub::FastLookup* resp) {
               return service->GetFastLookup(ctx, req, resp);
             }, this)));
}

PubSlice::Service::~Service() {
}

::grpc::Status PubSlice::Service::GetSlice(::grpc::ServerContext* context, const ::v6::services::pub::Slice* request, ::v6::services::pub::Slice* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status PubSlice::Service::CreateSlice(::grpc::ServerContext* context, const ::v6::services::pub::Slice* request, ::v6::services::pub::Slice* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status PubSlice::Service::GetMeta(::grpc::ServerContext* context, const ::v6::services::pub::Meta* request, ::v6::services::pub::Meta* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status PubSlice::Service::CreateMeta(::grpc::ServerContext* context, const ::v6::services::pub::Meta* request, ::v6::services::pub::Meta* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status PubSlice::Service::AddFastLookup(::grpc::ServerContext* context, const ::v6::services::pub::FastLookup* request, ::v6::services::pub::FastLookup* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status PubSlice::Service::GetFastLookup(::grpc::ServerContext* context, const ::v6::services::pub::FastLookupRequest* request, ::v6::services::pub::FastLookup* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace v6
}  // namespace services
}  // namespace pub

