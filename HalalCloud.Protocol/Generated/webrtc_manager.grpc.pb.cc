// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: webrtc_manager.proto

#include "webrtc_manager.pb.h"
#include "webrtc_manager.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace v6 {
namespace services {
namespace p2p {

static const char* WebRTCManageService_method_names[] = {
  "/v6.services.p2p.WebRTCManageService/StartDownload",
  "/v6.services.p2p.WebRTCManageService/StopDownload",
  "/v6.services.p2p.WebRTCManageService/Disconnect",
  "/v6.services.p2p.WebRTCManageService/SendPeerIceCandidate",
  "/v6.services.p2p.WebRTCManageService/Receive",
};

std::unique_ptr< WebRTCManageService::Stub> WebRTCManageService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< WebRTCManageService::Stub> stub(new WebRTCManageService::Stub(channel, options));
  return stub;
}

WebRTCManageService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_StartDownload_(WebRTCManageService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_StopDownload_(WebRTCManageService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Disconnect_(WebRTCManageService_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SendPeerIceCandidate_(WebRTCManageService_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Receive_(WebRTCManageService_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  {}

::grpc::Status WebRTCManageService::Stub::StartDownload(::grpc::ClientContext* context, const ::v6::services::p2p::StartDownloadRequest& request, ::v6::services::p2p::StartDownloadResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::v6::services::p2p::StartDownloadRequest, ::v6::services::p2p::StartDownloadResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_StartDownload_, context, request, response);
}

void WebRTCManageService::Stub::async::StartDownload(::grpc::ClientContext* context, const ::v6::services::p2p::StartDownloadRequest* request, ::v6::services::p2p::StartDownloadResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::v6::services::p2p::StartDownloadRequest, ::v6::services::p2p::StartDownloadResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_StartDownload_, context, request, response, std::move(f));
}

void WebRTCManageService::Stub::async::StartDownload(::grpc::ClientContext* context, const ::v6::services::p2p::StartDownloadRequest* request, ::v6::services::p2p::StartDownloadResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_StartDownload_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::v6::services::p2p::StartDownloadResponse>* WebRTCManageService::Stub::PrepareAsyncStartDownloadRaw(::grpc::ClientContext* context, const ::v6::services::p2p::StartDownloadRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::v6::services::p2p::StartDownloadResponse, ::v6::services::p2p::StartDownloadRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_StartDownload_, context, request);
}

::grpc::ClientAsyncResponseReader< ::v6::services::p2p::StartDownloadResponse>* WebRTCManageService::Stub::AsyncStartDownloadRaw(::grpc::ClientContext* context, const ::v6::services::p2p::StartDownloadRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncStartDownloadRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status WebRTCManageService::Stub::StopDownload(::grpc::ClientContext* context, const ::v6::services::p2p::StopDownloadRequest& request, ::v6::services::p2p::StopDownloadResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::v6::services::p2p::StopDownloadRequest, ::v6::services::p2p::StopDownloadResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_StopDownload_, context, request, response);
}

void WebRTCManageService::Stub::async::StopDownload(::grpc::ClientContext* context, const ::v6::services::p2p::StopDownloadRequest* request, ::v6::services::p2p::StopDownloadResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::v6::services::p2p::StopDownloadRequest, ::v6::services::p2p::StopDownloadResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_StopDownload_, context, request, response, std::move(f));
}

void WebRTCManageService::Stub::async::StopDownload(::grpc::ClientContext* context, const ::v6::services::p2p::StopDownloadRequest* request, ::v6::services::p2p::StopDownloadResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_StopDownload_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::v6::services::p2p::StopDownloadResponse>* WebRTCManageService::Stub::PrepareAsyncStopDownloadRaw(::grpc::ClientContext* context, const ::v6::services::p2p::StopDownloadRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::v6::services::p2p::StopDownloadResponse, ::v6::services::p2p::StopDownloadRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_StopDownload_, context, request);
}

::grpc::ClientAsyncResponseReader< ::v6::services::p2p::StopDownloadResponse>* WebRTCManageService::Stub::AsyncStopDownloadRaw(::grpc::ClientContext* context, const ::v6::services::p2p::StopDownloadRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncStopDownloadRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status WebRTCManageService::Stub::Disconnect(::grpc::ClientContext* context, const ::v6::services::p2p::DisconnectRequest& request, ::v6::services::p2p::DisconnectResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::v6::services::p2p::DisconnectRequest, ::v6::services::p2p::DisconnectResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Disconnect_, context, request, response);
}

void WebRTCManageService::Stub::async::Disconnect(::grpc::ClientContext* context, const ::v6::services::p2p::DisconnectRequest* request, ::v6::services::p2p::DisconnectResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::v6::services::p2p::DisconnectRequest, ::v6::services::p2p::DisconnectResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Disconnect_, context, request, response, std::move(f));
}

void WebRTCManageService::Stub::async::Disconnect(::grpc::ClientContext* context, const ::v6::services::p2p::DisconnectRequest* request, ::v6::services::p2p::DisconnectResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Disconnect_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::v6::services::p2p::DisconnectResponse>* WebRTCManageService::Stub::PrepareAsyncDisconnectRaw(::grpc::ClientContext* context, const ::v6::services::p2p::DisconnectRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::v6::services::p2p::DisconnectResponse, ::v6::services::p2p::DisconnectRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Disconnect_, context, request);
}

::grpc::ClientAsyncResponseReader< ::v6::services::p2p::DisconnectResponse>* WebRTCManageService::Stub::AsyncDisconnectRaw(::grpc::ClientContext* context, const ::v6::services::p2p::DisconnectRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDisconnectRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status WebRTCManageService::Stub::SendPeerIceCandidate(::grpc::ClientContext* context, const ::v6::services::p2p::SendPeerIceCandidateRequest& request, ::v6::services::p2p::SendPeerIceCandidateResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::v6::services::p2p::SendPeerIceCandidateRequest, ::v6::services::p2p::SendPeerIceCandidateResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SendPeerIceCandidate_, context, request, response);
}

void WebRTCManageService::Stub::async::SendPeerIceCandidate(::grpc::ClientContext* context, const ::v6::services::p2p::SendPeerIceCandidateRequest* request, ::v6::services::p2p::SendPeerIceCandidateResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::v6::services::p2p::SendPeerIceCandidateRequest, ::v6::services::p2p::SendPeerIceCandidateResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SendPeerIceCandidate_, context, request, response, std::move(f));
}

void WebRTCManageService::Stub::async::SendPeerIceCandidate(::grpc::ClientContext* context, const ::v6::services::p2p::SendPeerIceCandidateRequest* request, ::v6::services::p2p::SendPeerIceCandidateResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SendPeerIceCandidate_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::v6::services::p2p::SendPeerIceCandidateResponse>* WebRTCManageService::Stub::PrepareAsyncSendPeerIceCandidateRaw(::grpc::ClientContext* context, const ::v6::services::p2p::SendPeerIceCandidateRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::v6::services::p2p::SendPeerIceCandidateResponse, ::v6::services::p2p::SendPeerIceCandidateRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SendPeerIceCandidate_, context, request);
}

::grpc::ClientAsyncResponseReader< ::v6::services::p2p::SendPeerIceCandidateResponse>* WebRTCManageService::Stub::AsyncSendPeerIceCandidateRaw(::grpc::ClientContext* context, const ::v6::services::p2p::SendPeerIceCandidateRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSendPeerIceCandidateRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::ClientReader< ::v6::services::p2p::ReceiveResponse>* WebRTCManageService::Stub::ReceiveRaw(::grpc::ClientContext* context, const ::v6::services::p2p::ReceiveRequest& request) {
  return ::grpc::internal::ClientReaderFactory< ::v6::services::p2p::ReceiveResponse>::Create(channel_.get(), rpcmethod_Receive_, context, request);
}

void WebRTCManageService::Stub::async::Receive(::grpc::ClientContext* context, const ::v6::services::p2p::ReceiveRequest* request, ::grpc::ClientReadReactor< ::v6::services::p2p::ReceiveResponse>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::v6::services::p2p::ReceiveResponse>::Create(stub_->channel_.get(), stub_->rpcmethod_Receive_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::v6::services::p2p::ReceiveResponse>* WebRTCManageService::Stub::AsyncReceiveRaw(::grpc::ClientContext* context, const ::v6::services::p2p::ReceiveRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::v6::services::p2p::ReceiveResponse>::Create(channel_.get(), cq, rpcmethod_Receive_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::v6::services::p2p::ReceiveResponse>* WebRTCManageService::Stub::PrepareAsyncReceiveRaw(::grpc::ClientContext* context, const ::v6::services::p2p::ReceiveRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::v6::services::p2p::ReceiveResponse>::Create(channel_.get(), cq, rpcmethod_Receive_, context, request, false, nullptr);
}

WebRTCManageService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      WebRTCManageService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< WebRTCManageService::Service, ::v6::services::p2p::StartDownloadRequest, ::v6::services::p2p::StartDownloadResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](WebRTCManageService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::v6::services::p2p::StartDownloadRequest* req,
             ::v6::services::p2p::StartDownloadResponse* resp) {
               return service->StartDownload(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      WebRTCManageService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< WebRTCManageService::Service, ::v6::services::p2p::StopDownloadRequest, ::v6::services::p2p::StopDownloadResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](WebRTCManageService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::v6::services::p2p::StopDownloadRequest* req,
             ::v6::services::p2p::StopDownloadResponse* resp) {
               return service->StopDownload(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      WebRTCManageService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< WebRTCManageService::Service, ::v6::services::p2p::DisconnectRequest, ::v6::services::p2p::DisconnectResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](WebRTCManageService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::v6::services::p2p::DisconnectRequest* req,
             ::v6::services::p2p::DisconnectResponse* resp) {
               return service->Disconnect(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      WebRTCManageService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< WebRTCManageService::Service, ::v6::services::p2p::SendPeerIceCandidateRequest, ::v6::services::p2p::SendPeerIceCandidateResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](WebRTCManageService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::v6::services::p2p::SendPeerIceCandidateRequest* req,
             ::v6::services::p2p::SendPeerIceCandidateResponse* resp) {
               return service->SendPeerIceCandidate(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      WebRTCManageService_method_names[4],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< WebRTCManageService::Service, ::v6::services::p2p::ReceiveRequest, ::v6::services::p2p::ReceiveResponse>(
          [](WebRTCManageService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::v6::services::p2p::ReceiveRequest* req,
             ::grpc::ServerWriter<::v6::services::p2p::ReceiveResponse>* writer) {
               return service->Receive(ctx, req, writer);
             }, this)));
}

WebRTCManageService::Service::~Service() {
}

::grpc::Status WebRTCManageService::Service::StartDownload(::grpc::ServerContext* context, const ::v6::services::p2p::StartDownloadRequest* request, ::v6::services::p2p::StartDownloadResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status WebRTCManageService::Service::StopDownload(::grpc::ServerContext* context, const ::v6::services::p2p::StopDownloadRequest* request, ::v6::services::p2p::StopDownloadResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status WebRTCManageService::Service::Disconnect(::grpc::ServerContext* context, const ::v6::services::p2p::DisconnectRequest* request, ::v6::services::p2p::DisconnectResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status WebRTCManageService::Service::SendPeerIceCandidate(::grpc::ServerContext* context, const ::v6::services::p2p::SendPeerIceCandidateRequest* request, ::v6::services::p2p::SendPeerIceCandidateResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status WebRTCManageService::Service::Receive(::grpc::ServerContext* context, const ::v6::services::p2p::ReceiveRequest* request, ::grpc::ServerWriter< ::v6::services::p2p::ReceiveResponse>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace v6
}  // namespace services
}  // namespace p2p

