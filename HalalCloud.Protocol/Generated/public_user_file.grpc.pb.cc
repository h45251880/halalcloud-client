// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: public_user_file.proto

#include "public_user_file.pb.h"
#include "public_user_file.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace v6 {
namespace services {
namespace pub {

static const char* PubUserFile_method_names[] = {
  "/v6.services.pub.PubUserFile/Create",
  "/v6.services.pub.PubUserFile/Get",
  "/v6.services.pub.PubUserFile/Rename",
  "/v6.services.pub.PubUserFile/Trash",
  "/v6.services.pub.PubUserFile/Move",
  "/v6.services.pub.PubUserFile/Copy",
  "/v6.services.pub.PubUserFile/Delete",
  "/v6.services.pub.PubUserFile/DeleteTrash",
  "/v6.services.pub.PubUserFile/Recover",
  "/v6.services.pub.PubUserFile/BatchOperation",
  "/v6.services.pub.PubUserFile/List",
  "/v6.services.pub.PubUserFile/ListTrash",
  "/v6.services.pub.PubUserFile/Search",
  "/v6.services.pub.PubUserFile/CreateManageRTCOffer",
  "/v6.services.pub.PubUserFile/SendClientIceCandidate",
  "/v6.services.pub.PubUserFile/GetServerIceCandidate",
  "/v6.services.pub.PubUserFile/ParseFileSlice",
  "/v6.services.pub.PubUserFile/GetSliceDownloadAddress",
};

std::unique_ptr< PubUserFile::Stub> PubUserFile::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< PubUserFile::Stub> stub(new PubUserFile::Stub(channel, options));
  return stub;
}

PubUserFile::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_Create_(PubUserFile_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Get_(PubUserFile_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Rename_(PubUserFile_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Trash_(PubUserFile_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Move_(PubUserFile_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Copy_(PubUserFile_method_names[5], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Delete_(PubUserFile_method_names[6], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DeleteTrash_(PubUserFile_method_names[7], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Recover_(PubUserFile_method_names[8], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_BatchOperation_(PubUserFile_method_names[9], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_List_(PubUserFile_method_names[10], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ListTrash_(PubUserFile_method_names[11], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Search_(PubUserFile_method_names[12], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CreateManageRTCOffer_(PubUserFile_method_names[13], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SendClientIceCandidate_(PubUserFile_method_names[14], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetServerIceCandidate_(PubUserFile_method_names[15], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ParseFileSlice_(PubUserFile_method_names[16], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetSliceDownloadAddress_(PubUserFile_method_names[17], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status PubUserFile::Stub::Create(::grpc::ClientContext* context, const ::v6::services::pub::File& request, ::v6::services::pub::File* response) {
  return ::grpc::internal::BlockingUnaryCall< ::v6::services::pub::File, ::v6::services::pub::File, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Create_, context, request, response);
}

void PubUserFile::Stub::async::Create(::grpc::ClientContext* context, const ::v6::services::pub::File* request, ::v6::services::pub::File* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::v6::services::pub::File, ::v6::services::pub::File, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Create_, context, request, response, std::move(f));
}

void PubUserFile::Stub::async::Create(::grpc::ClientContext* context, const ::v6::services::pub::File* request, ::v6::services::pub::File* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Create_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::v6::services::pub::File>* PubUserFile::Stub::PrepareAsyncCreateRaw(::grpc::ClientContext* context, const ::v6::services::pub::File& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::v6::services::pub::File, ::v6::services::pub::File, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Create_, context, request);
}

::grpc::ClientAsyncResponseReader< ::v6::services::pub::File>* PubUserFile::Stub::AsyncCreateRaw(::grpc::ClientContext* context, const ::v6::services::pub::File& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCreateRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status PubUserFile::Stub::Get(::grpc::ClientContext* context, const ::v6::services::pub::File& request, ::v6::services::pub::File* response) {
  return ::grpc::internal::BlockingUnaryCall< ::v6::services::pub::File, ::v6::services::pub::File, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Get_, context, request, response);
}

void PubUserFile::Stub::async::Get(::grpc::ClientContext* context, const ::v6::services::pub::File* request, ::v6::services::pub::File* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::v6::services::pub::File, ::v6::services::pub::File, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Get_, context, request, response, std::move(f));
}

void PubUserFile::Stub::async::Get(::grpc::ClientContext* context, const ::v6::services::pub::File* request, ::v6::services::pub::File* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Get_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::v6::services::pub::File>* PubUserFile::Stub::PrepareAsyncGetRaw(::grpc::ClientContext* context, const ::v6::services::pub::File& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::v6::services::pub::File, ::v6::services::pub::File, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Get_, context, request);
}

::grpc::ClientAsyncResponseReader< ::v6::services::pub::File>* PubUserFile::Stub::AsyncGetRaw(::grpc::ClientContext* context, const ::v6::services::pub::File& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status PubUserFile::Stub::Rename(::grpc::ClientContext* context, const ::v6::services::pub::File& request, ::v6::services::pub::BatchOperationResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::v6::services::pub::File, ::v6::services::pub::BatchOperationResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Rename_, context, request, response);
}

void PubUserFile::Stub::async::Rename(::grpc::ClientContext* context, const ::v6::services::pub::File* request, ::v6::services::pub::BatchOperationResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::v6::services::pub::File, ::v6::services::pub::BatchOperationResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Rename_, context, request, response, std::move(f));
}

void PubUserFile::Stub::async::Rename(::grpc::ClientContext* context, const ::v6::services::pub::File* request, ::v6::services::pub::BatchOperationResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Rename_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::v6::services::pub::BatchOperationResponse>* PubUserFile::Stub::PrepareAsyncRenameRaw(::grpc::ClientContext* context, const ::v6::services::pub::File& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::v6::services::pub::BatchOperationResponse, ::v6::services::pub::File, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Rename_, context, request);
}

::grpc::ClientAsyncResponseReader< ::v6::services::pub::BatchOperationResponse>* PubUserFile::Stub::AsyncRenameRaw(::grpc::ClientContext* context, const ::v6::services::pub::File& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncRenameRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status PubUserFile::Stub::Trash(::grpc::ClientContext* context, const ::v6::services::pub::BatchOperationRequest& request, ::v6::services::pub::BatchOperationResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::v6::services::pub::BatchOperationRequest, ::v6::services::pub::BatchOperationResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Trash_, context, request, response);
}

void PubUserFile::Stub::async::Trash(::grpc::ClientContext* context, const ::v6::services::pub::BatchOperationRequest* request, ::v6::services::pub::BatchOperationResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::v6::services::pub::BatchOperationRequest, ::v6::services::pub::BatchOperationResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Trash_, context, request, response, std::move(f));
}

void PubUserFile::Stub::async::Trash(::grpc::ClientContext* context, const ::v6::services::pub::BatchOperationRequest* request, ::v6::services::pub::BatchOperationResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Trash_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::v6::services::pub::BatchOperationResponse>* PubUserFile::Stub::PrepareAsyncTrashRaw(::grpc::ClientContext* context, const ::v6::services::pub::BatchOperationRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::v6::services::pub::BatchOperationResponse, ::v6::services::pub::BatchOperationRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Trash_, context, request);
}

::grpc::ClientAsyncResponseReader< ::v6::services::pub::BatchOperationResponse>* PubUserFile::Stub::AsyncTrashRaw(::grpc::ClientContext* context, const ::v6::services::pub::BatchOperationRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncTrashRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status PubUserFile::Stub::Move(::grpc::ClientContext* context, const ::v6::services::pub::BatchOperationRequest& request, ::v6::services::pub::BatchOperationResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::v6::services::pub::BatchOperationRequest, ::v6::services::pub::BatchOperationResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Move_, context, request, response);
}

void PubUserFile::Stub::async::Move(::grpc::ClientContext* context, const ::v6::services::pub::BatchOperationRequest* request, ::v6::services::pub::BatchOperationResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::v6::services::pub::BatchOperationRequest, ::v6::services::pub::BatchOperationResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Move_, context, request, response, std::move(f));
}

void PubUserFile::Stub::async::Move(::grpc::ClientContext* context, const ::v6::services::pub::BatchOperationRequest* request, ::v6::services::pub::BatchOperationResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Move_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::v6::services::pub::BatchOperationResponse>* PubUserFile::Stub::PrepareAsyncMoveRaw(::grpc::ClientContext* context, const ::v6::services::pub::BatchOperationRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::v6::services::pub::BatchOperationResponse, ::v6::services::pub::BatchOperationRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Move_, context, request);
}

::grpc::ClientAsyncResponseReader< ::v6::services::pub::BatchOperationResponse>* PubUserFile::Stub::AsyncMoveRaw(::grpc::ClientContext* context, const ::v6::services::pub::BatchOperationRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncMoveRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status PubUserFile::Stub::Copy(::grpc::ClientContext* context, const ::v6::services::pub::BatchOperationRequest& request, ::v6::services::pub::BatchOperationResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::v6::services::pub::BatchOperationRequest, ::v6::services::pub::BatchOperationResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Copy_, context, request, response);
}

void PubUserFile::Stub::async::Copy(::grpc::ClientContext* context, const ::v6::services::pub::BatchOperationRequest* request, ::v6::services::pub::BatchOperationResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::v6::services::pub::BatchOperationRequest, ::v6::services::pub::BatchOperationResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Copy_, context, request, response, std::move(f));
}

void PubUserFile::Stub::async::Copy(::grpc::ClientContext* context, const ::v6::services::pub::BatchOperationRequest* request, ::v6::services::pub::BatchOperationResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Copy_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::v6::services::pub::BatchOperationResponse>* PubUserFile::Stub::PrepareAsyncCopyRaw(::grpc::ClientContext* context, const ::v6::services::pub::BatchOperationRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::v6::services::pub::BatchOperationResponse, ::v6::services::pub::BatchOperationRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Copy_, context, request);
}

::grpc::ClientAsyncResponseReader< ::v6::services::pub::BatchOperationResponse>* PubUserFile::Stub::AsyncCopyRaw(::grpc::ClientContext* context, const ::v6::services::pub::BatchOperationRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCopyRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status PubUserFile::Stub::Delete(::grpc::ClientContext* context, const ::v6::services::pub::BatchOperationRequest& request, ::v6::services::pub::BatchOperationResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::v6::services::pub::BatchOperationRequest, ::v6::services::pub::BatchOperationResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Delete_, context, request, response);
}

void PubUserFile::Stub::async::Delete(::grpc::ClientContext* context, const ::v6::services::pub::BatchOperationRequest* request, ::v6::services::pub::BatchOperationResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::v6::services::pub::BatchOperationRequest, ::v6::services::pub::BatchOperationResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Delete_, context, request, response, std::move(f));
}

void PubUserFile::Stub::async::Delete(::grpc::ClientContext* context, const ::v6::services::pub::BatchOperationRequest* request, ::v6::services::pub::BatchOperationResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Delete_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::v6::services::pub::BatchOperationResponse>* PubUserFile::Stub::PrepareAsyncDeleteRaw(::grpc::ClientContext* context, const ::v6::services::pub::BatchOperationRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::v6::services::pub::BatchOperationResponse, ::v6::services::pub::BatchOperationRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Delete_, context, request);
}

::grpc::ClientAsyncResponseReader< ::v6::services::pub::BatchOperationResponse>* PubUserFile::Stub::AsyncDeleteRaw(::grpc::ClientContext* context, const ::v6::services::pub::BatchOperationRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDeleteRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status PubUserFile::Stub::DeleteTrash(::grpc::ClientContext* context, const ::v6::services::pub::BatchOperationRequest& request, ::v6::services::pub::BatchOperationResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::v6::services::pub::BatchOperationRequest, ::v6::services::pub::BatchOperationResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_DeleteTrash_, context, request, response);
}

void PubUserFile::Stub::async::DeleteTrash(::grpc::ClientContext* context, const ::v6::services::pub::BatchOperationRequest* request, ::v6::services::pub::BatchOperationResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::v6::services::pub::BatchOperationRequest, ::v6::services::pub::BatchOperationResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DeleteTrash_, context, request, response, std::move(f));
}

void PubUserFile::Stub::async::DeleteTrash(::grpc::ClientContext* context, const ::v6::services::pub::BatchOperationRequest* request, ::v6::services::pub::BatchOperationResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DeleteTrash_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::v6::services::pub::BatchOperationResponse>* PubUserFile::Stub::PrepareAsyncDeleteTrashRaw(::grpc::ClientContext* context, const ::v6::services::pub::BatchOperationRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::v6::services::pub::BatchOperationResponse, ::v6::services::pub::BatchOperationRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_DeleteTrash_, context, request);
}

::grpc::ClientAsyncResponseReader< ::v6::services::pub::BatchOperationResponse>* PubUserFile::Stub::AsyncDeleteTrashRaw(::grpc::ClientContext* context, const ::v6::services::pub::BatchOperationRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDeleteTrashRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status PubUserFile::Stub::Recover(::grpc::ClientContext* context, const ::v6::services::pub::BatchOperationRequest& request, ::v6::services::pub::BatchOperationResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::v6::services::pub::BatchOperationRequest, ::v6::services::pub::BatchOperationResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Recover_, context, request, response);
}

void PubUserFile::Stub::async::Recover(::grpc::ClientContext* context, const ::v6::services::pub::BatchOperationRequest* request, ::v6::services::pub::BatchOperationResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::v6::services::pub::BatchOperationRequest, ::v6::services::pub::BatchOperationResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Recover_, context, request, response, std::move(f));
}

void PubUserFile::Stub::async::Recover(::grpc::ClientContext* context, const ::v6::services::pub::BatchOperationRequest* request, ::v6::services::pub::BatchOperationResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Recover_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::v6::services::pub::BatchOperationResponse>* PubUserFile::Stub::PrepareAsyncRecoverRaw(::grpc::ClientContext* context, const ::v6::services::pub::BatchOperationRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::v6::services::pub::BatchOperationResponse, ::v6::services::pub::BatchOperationRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Recover_, context, request);
}

::grpc::ClientAsyncResponseReader< ::v6::services::pub::BatchOperationResponse>* PubUserFile::Stub::AsyncRecoverRaw(::grpc::ClientContext* context, const ::v6::services::pub::BatchOperationRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncRecoverRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status PubUserFile::Stub::BatchOperation(::grpc::ClientContext* context, const ::v6::services::pub::BatchOperationRequest& request, ::v6::services::pub::BatchOperationResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::v6::services::pub::BatchOperationRequest, ::v6::services::pub::BatchOperationResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_BatchOperation_, context, request, response);
}

void PubUserFile::Stub::async::BatchOperation(::grpc::ClientContext* context, const ::v6::services::pub::BatchOperationRequest* request, ::v6::services::pub::BatchOperationResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::v6::services::pub::BatchOperationRequest, ::v6::services::pub::BatchOperationResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_BatchOperation_, context, request, response, std::move(f));
}

void PubUserFile::Stub::async::BatchOperation(::grpc::ClientContext* context, const ::v6::services::pub::BatchOperationRequest* request, ::v6::services::pub::BatchOperationResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_BatchOperation_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::v6::services::pub::BatchOperationResponse>* PubUserFile::Stub::PrepareAsyncBatchOperationRaw(::grpc::ClientContext* context, const ::v6::services::pub::BatchOperationRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::v6::services::pub::BatchOperationResponse, ::v6::services::pub::BatchOperationRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_BatchOperation_, context, request);
}

::grpc::ClientAsyncResponseReader< ::v6::services::pub::BatchOperationResponse>* PubUserFile::Stub::AsyncBatchOperationRaw(::grpc::ClientContext* context, const ::v6::services::pub::BatchOperationRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncBatchOperationRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status PubUserFile::Stub::List(::grpc::ClientContext* context, const ::v6::services::pub::FileListRequest& request, ::v6::services::pub::FileListResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::v6::services::pub::FileListRequest, ::v6::services::pub::FileListResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_List_, context, request, response);
}

void PubUserFile::Stub::async::List(::grpc::ClientContext* context, const ::v6::services::pub::FileListRequest* request, ::v6::services::pub::FileListResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::v6::services::pub::FileListRequest, ::v6::services::pub::FileListResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_List_, context, request, response, std::move(f));
}

void PubUserFile::Stub::async::List(::grpc::ClientContext* context, const ::v6::services::pub::FileListRequest* request, ::v6::services::pub::FileListResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_List_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::v6::services::pub::FileListResponse>* PubUserFile::Stub::PrepareAsyncListRaw(::grpc::ClientContext* context, const ::v6::services::pub::FileListRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::v6::services::pub::FileListResponse, ::v6::services::pub::FileListRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_List_, context, request);
}

::grpc::ClientAsyncResponseReader< ::v6::services::pub::FileListResponse>* PubUserFile::Stub::AsyncListRaw(::grpc::ClientContext* context, const ::v6::services::pub::FileListRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncListRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status PubUserFile::Stub::ListTrash(::grpc::ClientContext* context, const ::v6::services::pub::FileListRequest& request, ::v6::services::pub::FileListResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::v6::services::pub::FileListRequest, ::v6::services::pub::FileListResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ListTrash_, context, request, response);
}

void PubUserFile::Stub::async::ListTrash(::grpc::ClientContext* context, const ::v6::services::pub::FileListRequest* request, ::v6::services::pub::FileListResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::v6::services::pub::FileListRequest, ::v6::services::pub::FileListResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ListTrash_, context, request, response, std::move(f));
}

void PubUserFile::Stub::async::ListTrash(::grpc::ClientContext* context, const ::v6::services::pub::FileListRequest* request, ::v6::services::pub::FileListResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ListTrash_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::v6::services::pub::FileListResponse>* PubUserFile::Stub::PrepareAsyncListTrashRaw(::grpc::ClientContext* context, const ::v6::services::pub::FileListRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::v6::services::pub::FileListResponse, ::v6::services::pub::FileListRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ListTrash_, context, request);
}

::grpc::ClientAsyncResponseReader< ::v6::services::pub::FileListResponse>* PubUserFile::Stub::AsyncListTrashRaw(::grpc::ClientContext* context, const ::v6::services::pub::FileListRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncListTrashRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status PubUserFile::Stub::Search(::grpc::ClientContext* context, const ::v6::services::pub::SearchRequest& request, ::v6::services::pub::FileListResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::v6::services::pub::SearchRequest, ::v6::services::pub::FileListResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Search_, context, request, response);
}

void PubUserFile::Stub::async::Search(::grpc::ClientContext* context, const ::v6::services::pub::SearchRequest* request, ::v6::services::pub::FileListResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::v6::services::pub::SearchRequest, ::v6::services::pub::FileListResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Search_, context, request, response, std::move(f));
}

void PubUserFile::Stub::async::Search(::grpc::ClientContext* context, const ::v6::services::pub::SearchRequest* request, ::v6::services::pub::FileListResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Search_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::v6::services::pub::FileListResponse>* PubUserFile::Stub::PrepareAsyncSearchRaw(::grpc::ClientContext* context, const ::v6::services::pub::SearchRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::v6::services::pub::FileListResponse, ::v6::services::pub::SearchRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Search_, context, request);
}

::grpc::ClientAsyncResponseReader< ::v6::services::pub::FileListResponse>* PubUserFile::Stub::AsyncSearchRaw(::grpc::ClientContext* context, const ::v6::services::pub::SearchRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSearchRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status PubUserFile::Stub::CreateManageRTCOffer(::grpc::ClientContext* context, const ::v6::services::pub::ManageRTCRequest& request, ::v6::services::pub::ManageRTCResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::v6::services::pub::ManageRTCRequest, ::v6::services::pub::ManageRTCResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_CreateManageRTCOffer_, context, request, response);
}

void PubUserFile::Stub::async::CreateManageRTCOffer(::grpc::ClientContext* context, const ::v6::services::pub::ManageRTCRequest* request, ::v6::services::pub::ManageRTCResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::v6::services::pub::ManageRTCRequest, ::v6::services::pub::ManageRTCResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateManageRTCOffer_, context, request, response, std::move(f));
}

void PubUserFile::Stub::async::CreateManageRTCOffer(::grpc::ClientContext* context, const ::v6::services::pub::ManageRTCRequest* request, ::v6::services::pub::ManageRTCResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateManageRTCOffer_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::v6::services::pub::ManageRTCResponse>* PubUserFile::Stub::PrepareAsyncCreateManageRTCOfferRaw(::grpc::ClientContext* context, const ::v6::services::pub::ManageRTCRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::v6::services::pub::ManageRTCResponse, ::v6::services::pub::ManageRTCRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_CreateManageRTCOffer_, context, request);
}

::grpc::ClientAsyncResponseReader< ::v6::services::pub::ManageRTCResponse>* PubUserFile::Stub::AsyncCreateManageRTCOfferRaw(::grpc::ClientContext* context, const ::v6::services::pub::ManageRTCRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCreateManageRTCOfferRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status PubUserFile::Stub::SendClientIceCandidate(::grpc::ClientContext* context, const ::v6::services::pub::SendIceCandidateRequest& request, ::v6::services::pub::SendIceCandidateResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::v6::services::pub::SendIceCandidateRequest, ::v6::services::pub::SendIceCandidateResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SendClientIceCandidate_, context, request, response);
}

void PubUserFile::Stub::async::SendClientIceCandidate(::grpc::ClientContext* context, const ::v6::services::pub::SendIceCandidateRequest* request, ::v6::services::pub::SendIceCandidateResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::v6::services::pub::SendIceCandidateRequest, ::v6::services::pub::SendIceCandidateResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SendClientIceCandidate_, context, request, response, std::move(f));
}

void PubUserFile::Stub::async::SendClientIceCandidate(::grpc::ClientContext* context, const ::v6::services::pub::SendIceCandidateRequest* request, ::v6::services::pub::SendIceCandidateResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SendClientIceCandidate_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::v6::services::pub::SendIceCandidateResponse>* PubUserFile::Stub::PrepareAsyncSendClientIceCandidateRaw(::grpc::ClientContext* context, const ::v6::services::pub::SendIceCandidateRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::v6::services::pub::SendIceCandidateResponse, ::v6::services::pub::SendIceCandidateRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SendClientIceCandidate_, context, request);
}

::grpc::ClientAsyncResponseReader< ::v6::services::pub::SendIceCandidateResponse>* PubUserFile::Stub::AsyncSendClientIceCandidateRaw(::grpc::ClientContext* context, const ::v6::services::pub::SendIceCandidateRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSendClientIceCandidateRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status PubUserFile::Stub::GetServerIceCandidate(::grpc::ClientContext* context, const ::v6::services::pub::GetIceCandidateRequest& request, ::v6::services::pub::GetIceCandidateResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::v6::services::pub::GetIceCandidateRequest, ::v6::services::pub::GetIceCandidateResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetServerIceCandidate_, context, request, response);
}

void PubUserFile::Stub::async::GetServerIceCandidate(::grpc::ClientContext* context, const ::v6::services::pub::GetIceCandidateRequest* request, ::v6::services::pub::GetIceCandidateResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::v6::services::pub::GetIceCandidateRequest, ::v6::services::pub::GetIceCandidateResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetServerIceCandidate_, context, request, response, std::move(f));
}

void PubUserFile::Stub::async::GetServerIceCandidate(::grpc::ClientContext* context, const ::v6::services::pub::GetIceCandidateRequest* request, ::v6::services::pub::GetIceCandidateResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetServerIceCandidate_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::v6::services::pub::GetIceCandidateResponse>* PubUserFile::Stub::PrepareAsyncGetServerIceCandidateRaw(::grpc::ClientContext* context, const ::v6::services::pub::GetIceCandidateRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::v6::services::pub::GetIceCandidateResponse, ::v6::services::pub::GetIceCandidateRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetServerIceCandidate_, context, request);
}

::grpc::ClientAsyncResponseReader< ::v6::services::pub::GetIceCandidateResponse>* PubUserFile::Stub::AsyncGetServerIceCandidateRaw(::grpc::ClientContext* context, const ::v6::services::pub::GetIceCandidateRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetServerIceCandidateRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status PubUserFile::Stub::ParseFileSlice(::grpc::ClientContext* context, const ::v6::services::pub::File& request, ::v6::services::pub::ParseFileSliceResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::v6::services::pub::File, ::v6::services::pub::ParseFileSliceResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ParseFileSlice_, context, request, response);
}

void PubUserFile::Stub::async::ParseFileSlice(::grpc::ClientContext* context, const ::v6::services::pub::File* request, ::v6::services::pub::ParseFileSliceResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::v6::services::pub::File, ::v6::services::pub::ParseFileSliceResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ParseFileSlice_, context, request, response, std::move(f));
}

void PubUserFile::Stub::async::ParseFileSlice(::grpc::ClientContext* context, const ::v6::services::pub::File* request, ::v6::services::pub::ParseFileSliceResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ParseFileSlice_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::v6::services::pub::ParseFileSliceResponse>* PubUserFile::Stub::PrepareAsyncParseFileSliceRaw(::grpc::ClientContext* context, const ::v6::services::pub::File& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::v6::services::pub::ParseFileSliceResponse, ::v6::services::pub::File, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ParseFileSlice_, context, request);
}

::grpc::ClientAsyncResponseReader< ::v6::services::pub::ParseFileSliceResponse>* PubUserFile::Stub::AsyncParseFileSliceRaw(::grpc::ClientContext* context, const ::v6::services::pub::File& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncParseFileSliceRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status PubUserFile::Stub::GetSliceDownloadAddress(::grpc::ClientContext* context, const ::v6::services::pub::SliceDownloadAddressRequest& request, ::v6::services::pub::SliceDownloadAddressResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::v6::services::pub::SliceDownloadAddressRequest, ::v6::services::pub::SliceDownloadAddressResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetSliceDownloadAddress_, context, request, response);
}

void PubUserFile::Stub::async::GetSliceDownloadAddress(::grpc::ClientContext* context, const ::v6::services::pub::SliceDownloadAddressRequest* request, ::v6::services::pub::SliceDownloadAddressResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::v6::services::pub::SliceDownloadAddressRequest, ::v6::services::pub::SliceDownloadAddressResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetSliceDownloadAddress_, context, request, response, std::move(f));
}

void PubUserFile::Stub::async::GetSliceDownloadAddress(::grpc::ClientContext* context, const ::v6::services::pub::SliceDownloadAddressRequest* request, ::v6::services::pub::SliceDownloadAddressResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetSliceDownloadAddress_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::v6::services::pub::SliceDownloadAddressResponse>* PubUserFile::Stub::PrepareAsyncGetSliceDownloadAddressRaw(::grpc::ClientContext* context, const ::v6::services::pub::SliceDownloadAddressRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::v6::services::pub::SliceDownloadAddressResponse, ::v6::services::pub::SliceDownloadAddressRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetSliceDownloadAddress_, context, request);
}

::grpc::ClientAsyncResponseReader< ::v6::services::pub::SliceDownloadAddressResponse>* PubUserFile::Stub::AsyncGetSliceDownloadAddressRaw(::grpc::ClientContext* context, const ::v6::services::pub::SliceDownloadAddressRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetSliceDownloadAddressRaw(context, request, cq);
  result->StartCall();
  return result;
}

PubUserFile::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      PubUserFile_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< PubUserFile::Service, ::v6::services::pub::File, ::v6::services::pub::File, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](PubUserFile::Service* service,
             ::grpc::ServerContext* ctx,
             const ::v6::services::pub::File* req,
             ::v6::services::pub::File* resp) {
               return service->Create(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      PubUserFile_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< PubUserFile::Service, ::v6::services::pub::File, ::v6::services::pub::File, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](PubUserFile::Service* service,
             ::grpc::ServerContext* ctx,
             const ::v6::services::pub::File* req,
             ::v6::services::pub::File* resp) {
               return service->Get(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      PubUserFile_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< PubUserFile::Service, ::v6::services::pub::File, ::v6::services::pub::BatchOperationResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](PubUserFile::Service* service,
             ::grpc::ServerContext* ctx,
             const ::v6::services::pub::File* req,
             ::v6::services::pub::BatchOperationResponse* resp) {
               return service->Rename(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      PubUserFile_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< PubUserFile::Service, ::v6::services::pub::BatchOperationRequest, ::v6::services::pub::BatchOperationResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](PubUserFile::Service* service,
             ::grpc::ServerContext* ctx,
             const ::v6::services::pub::BatchOperationRequest* req,
             ::v6::services::pub::BatchOperationResponse* resp) {
               return service->Trash(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      PubUserFile_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< PubUserFile::Service, ::v6::services::pub::BatchOperationRequest, ::v6::services::pub::BatchOperationResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](PubUserFile::Service* service,
             ::grpc::ServerContext* ctx,
             const ::v6::services::pub::BatchOperationRequest* req,
             ::v6::services::pub::BatchOperationResponse* resp) {
               return service->Move(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      PubUserFile_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< PubUserFile::Service, ::v6::services::pub::BatchOperationRequest, ::v6::services::pub::BatchOperationResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](PubUserFile::Service* service,
             ::grpc::ServerContext* ctx,
             const ::v6::services::pub::BatchOperationRequest* req,
             ::v6::services::pub::BatchOperationResponse* resp) {
               return service->Copy(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      PubUserFile_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< PubUserFile::Service, ::v6::services::pub::BatchOperationRequest, ::v6::services::pub::BatchOperationResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](PubUserFile::Service* service,
             ::grpc::ServerContext* ctx,
             const ::v6::services::pub::BatchOperationRequest* req,
             ::v6::services::pub::BatchOperationResponse* resp) {
               return service->Delete(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      PubUserFile_method_names[7],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< PubUserFile::Service, ::v6::services::pub::BatchOperationRequest, ::v6::services::pub::BatchOperationResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](PubUserFile::Service* service,
             ::grpc::ServerContext* ctx,
             const ::v6::services::pub::BatchOperationRequest* req,
             ::v6::services::pub::BatchOperationResponse* resp) {
               return service->DeleteTrash(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      PubUserFile_method_names[8],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< PubUserFile::Service, ::v6::services::pub::BatchOperationRequest, ::v6::services::pub::BatchOperationResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](PubUserFile::Service* service,
             ::grpc::ServerContext* ctx,
             const ::v6::services::pub::BatchOperationRequest* req,
             ::v6::services::pub::BatchOperationResponse* resp) {
               return service->Recover(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      PubUserFile_method_names[9],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< PubUserFile::Service, ::v6::services::pub::BatchOperationRequest, ::v6::services::pub::BatchOperationResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](PubUserFile::Service* service,
             ::grpc::ServerContext* ctx,
             const ::v6::services::pub::BatchOperationRequest* req,
             ::v6::services::pub::BatchOperationResponse* resp) {
               return service->BatchOperation(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      PubUserFile_method_names[10],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< PubUserFile::Service, ::v6::services::pub::FileListRequest, ::v6::services::pub::FileListResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](PubUserFile::Service* service,
             ::grpc::ServerContext* ctx,
             const ::v6::services::pub::FileListRequest* req,
             ::v6::services::pub::FileListResponse* resp) {
               return service->List(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      PubUserFile_method_names[11],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< PubUserFile::Service, ::v6::services::pub::FileListRequest, ::v6::services::pub::FileListResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](PubUserFile::Service* service,
             ::grpc::ServerContext* ctx,
             const ::v6::services::pub::FileListRequest* req,
             ::v6::services::pub::FileListResponse* resp) {
               return service->ListTrash(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      PubUserFile_method_names[12],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< PubUserFile::Service, ::v6::services::pub::SearchRequest, ::v6::services::pub::FileListResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](PubUserFile::Service* service,
             ::grpc::ServerContext* ctx,
             const ::v6::services::pub::SearchRequest* req,
             ::v6::services::pub::FileListResponse* resp) {
               return service->Search(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      PubUserFile_method_names[13],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< PubUserFile::Service, ::v6::services::pub::ManageRTCRequest, ::v6::services::pub::ManageRTCResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](PubUserFile::Service* service,
             ::grpc::ServerContext* ctx,
             const ::v6::services::pub::ManageRTCRequest* req,
             ::v6::services::pub::ManageRTCResponse* resp) {
               return service->CreateManageRTCOffer(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      PubUserFile_method_names[14],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< PubUserFile::Service, ::v6::services::pub::SendIceCandidateRequest, ::v6::services::pub::SendIceCandidateResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](PubUserFile::Service* service,
             ::grpc::ServerContext* ctx,
             const ::v6::services::pub::SendIceCandidateRequest* req,
             ::v6::services::pub::SendIceCandidateResponse* resp) {
               return service->SendClientIceCandidate(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      PubUserFile_method_names[15],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< PubUserFile::Service, ::v6::services::pub::GetIceCandidateRequest, ::v6::services::pub::GetIceCandidateResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](PubUserFile::Service* service,
             ::grpc::ServerContext* ctx,
             const ::v6::services::pub::GetIceCandidateRequest* req,
             ::v6::services::pub::GetIceCandidateResponse* resp) {
               return service->GetServerIceCandidate(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      PubUserFile_method_names[16],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< PubUserFile::Service, ::v6::services::pub::File, ::v6::services::pub::ParseFileSliceResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](PubUserFile::Service* service,
             ::grpc::ServerContext* ctx,
             const ::v6::services::pub::File* req,
             ::v6::services::pub::ParseFileSliceResponse* resp) {
               return service->ParseFileSlice(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      PubUserFile_method_names[17],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< PubUserFile::Service, ::v6::services::pub::SliceDownloadAddressRequest, ::v6::services::pub::SliceDownloadAddressResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](PubUserFile::Service* service,
             ::grpc::ServerContext* ctx,
             const ::v6::services::pub::SliceDownloadAddressRequest* req,
             ::v6::services::pub::SliceDownloadAddressResponse* resp) {
               return service->GetSliceDownloadAddress(ctx, req, resp);
             }, this)));
}

PubUserFile::Service::~Service() {
}

::grpc::Status PubUserFile::Service::Create(::grpc::ServerContext* context, const ::v6::services::pub::File* request, ::v6::services::pub::File* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status PubUserFile::Service::Get(::grpc::ServerContext* context, const ::v6::services::pub::File* request, ::v6::services::pub::File* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status PubUserFile::Service::Rename(::grpc::ServerContext* context, const ::v6::services::pub::File* request, ::v6::services::pub::BatchOperationResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status PubUserFile::Service::Trash(::grpc::ServerContext* context, const ::v6::services::pub::BatchOperationRequest* request, ::v6::services::pub::BatchOperationResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status PubUserFile::Service::Move(::grpc::ServerContext* context, const ::v6::services::pub::BatchOperationRequest* request, ::v6::services::pub::BatchOperationResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status PubUserFile::Service::Copy(::grpc::ServerContext* context, const ::v6::services::pub::BatchOperationRequest* request, ::v6::services::pub::BatchOperationResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status PubUserFile::Service::Delete(::grpc::ServerContext* context, const ::v6::services::pub::BatchOperationRequest* request, ::v6::services::pub::BatchOperationResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status PubUserFile::Service::DeleteTrash(::grpc::ServerContext* context, const ::v6::services::pub::BatchOperationRequest* request, ::v6::services::pub::BatchOperationResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status PubUserFile::Service::Recover(::grpc::ServerContext* context, const ::v6::services::pub::BatchOperationRequest* request, ::v6::services::pub::BatchOperationResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status PubUserFile::Service::BatchOperation(::grpc::ServerContext* context, const ::v6::services::pub::BatchOperationRequest* request, ::v6::services::pub::BatchOperationResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status PubUserFile::Service::List(::grpc::ServerContext* context, const ::v6::services::pub::FileListRequest* request, ::v6::services::pub::FileListResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status PubUserFile::Service::ListTrash(::grpc::ServerContext* context, const ::v6::services::pub::FileListRequest* request, ::v6::services::pub::FileListResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status PubUserFile::Service::Search(::grpc::ServerContext* context, const ::v6::services::pub::SearchRequest* request, ::v6::services::pub::FileListResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status PubUserFile::Service::CreateManageRTCOffer(::grpc::ServerContext* context, const ::v6::services::pub::ManageRTCRequest* request, ::v6::services::pub::ManageRTCResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status PubUserFile::Service::SendClientIceCandidate(::grpc::ServerContext* context, const ::v6::services::pub::SendIceCandidateRequest* request, ::v6::services::pub::SendIceCandidateResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status PubUserFile::Service::GetServerIceCandidate(::grpc::ServerContext* context, const ::v6::services::pub::GetIceCandidateRequest* request, ::v6::services::pub::GetIceCandidateResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status PubUserFile::Service::ParseFileSlice(::grpc::ServerContext* context, const ::v6::services::pub::File* request, ::v6::services::pub::ParseFileSliceResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status PubUserFile::Service::GetSliceDownloadAddress(::grpc::ServerContext* context, const ::v6::services::pub::SliceDownloadAddressRequest* request, ::v6::services::pub::SliceDownloadAddressResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace v6
}  // namespace services
}  // namespace pub

