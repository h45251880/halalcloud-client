// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: slice_svc.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_slice_5fsvc_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_slice_5fsvc_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_slice_5fsvc_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_slice_5fsvc_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_slice_5fsvc_2eproto;
namespace v6 {
namespace services {
namespace pub {
class FastLookup;
struct FastLookupDefaultTypeInternal;
extern FastLookupDefaultTypeInternal _FastLookup_default_instance_;
class FastLookupRequest;
struct FastLookupRequestDefaultTypeInternal;
extern FastLookupRequestDefaultTypeInternal _FastLookupRequest_default_instance_;
class Meta;
struct MetaDefaultTypeInternal;
extern MetaDefaultTypeInternal _Meta_default_instance_;
class Slice;
struct SliceDefaultTypeInternal;
extern SliceDefaultTypeInternal _Slice_default_instance_;
}  // namespace pub
}  // namespace services
}  // namespace v6
PROTOBUF_NAMESPACE_OPEN
template<> ::v6::services::pub::FastLookup* Arena::CreateMaybeMessage<::v6::services::pub::FastLookup>(Arena*);
template<> ::v6::services::pub::FastLookupRequest* Arena::CreateMaybeMessage<::v6::services::pub::FastLookupRequest>(Arena*);
template<> ::v6::services::pub::Meta* Arena::CreateMaybeMessage<::v6::services::pub::Meta>(Arena*);
template<> ::v6::services::pub::Slice* Arena::CreateMaybeMessage<::v6::services::pub::Slice>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace v6 {
namespace services {
namespace pub {

// ===================================================================

class Slice final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:v6.services.pub.Slice) */ {
 public:
  inline Slice() : Slice(nullptr) {}
  ~Slice() override;
  explicit PROTOBUF_CONSTEXPR Slice(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Slice(const Slice& from);
  Slice(Slice&& from) noexcept
    : Slice() {
    *this = ::std::move(from);
  }

  inline Slice& operator=(const Slice& from) {
    CopyFrom(from);
    return *this;
  }
  inline Slice& operator=(Slice&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Slice& default_instance() {
    return *internal_default_instance();
  }
  static inline const Slice* internal_default_instance() {
    return reinterpret_cast<const Slice*>(
               &_Slice_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Slice& a, Slice& b) {
    a.Swap(&b);
  }
  inline void Swap(Slice* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Slice* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Slice* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Slice>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Slice& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Slice& from) {
    Slice::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Slice* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "v6.services.pub.Slice";
  }
  protected:
  explicit Slice(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdentityFieldNumber = 1,
    kPeerFieldNumber = 6,
    kServerFieldNumber = 8,
    kDataFieldNumber = 10,
    kTypeFieldNumber = 2,
    kStatusFieldNumber = 3,
    kUpdateTsFieldNumber = 5,
    kCreateTsFieldNumber = 7,
    kNeedDataFieldNumber = 9,
  };
  // string identity = 1;
  void clear_identity();
  const std::string& identity() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_identity(ArgT0&& arg0, ArgT... args);
  std::string* mutable_identity();
  PROTOBUF_NODISCARD std::string* release_identity();
  void set_allocated_identity(std::string* identity);
  private:
  const std::string& _internal_identity() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_identity(const std::string& value);
  std::string* _internal_mutable_identity();
  public:

  // string peer = 6;
  void clear_peer();
  const std::string& peer() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_peer(ArgT0&& arg0, ArgT... args);
  std::string* mutable_peer();
  PROTOBUF_NODISCARD std::string* release_peer();
  void set_allocated_peer(std::string* peer);
  private:
  const std::string& _internal_peer() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_peer(const std::string& value);
  std::string* _internal_mutable_peer();
  public:

  // string server = 8;
  void clear_server();
  const std::string& server() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_server(ArgT0&& arg0, ArgT... args);
  std::string* mutable_server();
  PROTOBUF_NODISCARD std::string* release_server();
  void set_allocated_server(std::string* server);
  private:
  const std::string& _internal_server() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_server(const std::string& value);
  std::string* _internal_mutable_server();
  public:

  // bytes data = 10;
  void clear_data();
  const std::string& data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_data();
  PROTOBUF_NODISCARD std::string* release_data();
  void set_allocated_data(std::string* data);
  private:
  const std::string& _internal_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // int32 type = 2;
  void clear_type();
  int32_t type() const;
  void set_type(int32_t value);
  private:
  int32_t _internal_type() const;
  void _internal_set_type(int32_t value);
  public:

  // int32 status = 3;
  void clear_status();
  int32_t status() const;
  void set_status(int32_t value);
  private:
  int32_t _internal_status() const;
  void _internal_set_status(int32_t value);
  public:

  // int64 update_ts = 5;
  void clear_update_ts();
  int64_t update_ts() const;
  void set_update_ts(int64_t value);
  private:
  int64_t _internal_update_ts() const;
  void _internal_set_update_ts(int64_t value);
  public:

  // int64 create_ts = 7;
  void clear_create_ts();
  int64_t create_ts() const;
  void set_create_ts(int64_t value);
  private:
  int64_t _internal_create_ts() const;
  void _internal_set_create_ts(int64_t value);
  public:

  // bool need_data = 9;
  void clear_need_data();
  bool need_data() const;
  void set_need_data(bool value);
  private:
  bool _internal_need_data() const;
  void _internal_set_need_data(bool value);
  public:

  // @@protoc_insertion_point(class_scope:v6.services.pub.Slice)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr identity_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr peer_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr server_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
    int32_t type_;
    int32_t status_;
    int64_t update_ts_;
    int64_t create_ts_;
    bool need_data_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_slice_5fsvc_2eproto;
};
// -------------------------------------------------------------------

class Meta final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:v6.services.pub.Meta) */ {
 public:
  inline Meta() : Meta(nullptr) {}
  ~Meta() override;
  explicit PROTOBUF_CONSTEXPR Meta(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Meta(const Meta& from);
  Meta(Meta&& from) noexcept
    : Meta() {
    *this = ::std::move(from);
  }

  inline Meta& operator=(const Meta& from) {
    CopyFrom(from);
    return *this;
  }
  inline Meta& operator=(Meta&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Meta& default_instance() {
    return *internal_default_instance();
  }
  static inline const Meta* internal_default_instance() {
    return reinterpret_cast<const Meta*>(
               &_Meta_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Meta& a, Meta& b) {
    a.Swap(&b);
  }
  inline void Swap(Meta* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Meta* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Meta* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Meta>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Meta& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Meta& from) {
    Meta::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Meta* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "v6.services.pub.Meta";
  }
  protected:
  explicit Meta(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdentityFieldNumber = 1,
    kDataFieldNumber = 2,
  };
  // string identity = 1;
  void clear_identity();
  const std::string& identity() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_identity(ArgT0&& arg0, ArgT... args);
  std::string* mutable_identity();
  PROTOBUF_NODISCARD std::string* release_identity();
  void set_allocated_identity(std::string* identity);
  private:
  const std::string& _internal_identity() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_identity(const std::string& value);
  std::string* _internal_mutable_identity();
  public:

  // bytes data = 2;
  void clear_data();
  const std::string& data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_data();
  PROTOBUF_NODISCARD std::string* release_data();
  void set_allocated_data(std::string* data);
  private:
  const std::string& _internal_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // @@protoc_insertion_point(class_scope:v6.services.pub.Meta)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr identity_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_slice_5fsvc_2eproto;
};
// -------------------------------------------------------------------

class FastLookup final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:v6.services.pub.FastLookup) */ {
 public:
  inline FastLookup() : FastLookup(nullptr) {}
  ~FastLookup() override;
  explicit PROTOBUF_CONSTEXPR FastLookup(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FastLookup(const FastLookup& from);
  FastLookup(FastLookup&& from) noexcept
    : FastLookup() {
    *this = ::std::move(from);
  }

  inline FastLookup& operator=(const FastLookup& from) {
    CopyFrom(from);
    return *this;
  }
  inline FastLookup& operator=(FastLookup&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FastLookup& default_instance() {
    return *internal_default_instance();
  }
  static inline const FastLookup* internal_default_instance() {
    return reinterpret_cast<const FastLookup*>(
               &_FastLookup_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(FastLookup& a, FastLookup& b) {
    a.Swap(&b);
  }
  inline void Swap(FastLookup* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FastLookup* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FastLookup* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FastLookup>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FastLookup& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const FastLookup& from) {
    FastLookup::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FastLookup* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "v6.services.pub.FastLookup";
  }
  protected:
  explicit FastLookup(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdentityFieldNumber = 1,
    kWcsEtagFieldNumber = 2,
    kSha1FieldNumber = 3,
    kHeadSha1FieldNumber = 4,
    kSpecialSha1FieldNumber = 6,
    kNameFieldNumber = 7,
    kLhHashFieldNumber = 8,
    kFileSizeFieldNumber = 5,
  };
  // string identity = 1;
  void clear_identity();
  const std::string& identity() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_identity(ArgT0&& arg0, ArgT... args);
  std::string* mutable_identity();
  PROTOBUF_NODISCARD std::string* release_identity();
  void set_allocated_identity(std::string* identity);
  private:
  const std::string& _internal_identity() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_identity(const std::string& value);
  std::string* _internal_mutable_identity();
  public:

  // string wcs_etag = 2;
  void clear_wcs_etag();
  const std::string& wcs_etag() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_wcs_etag(ArgT0&& arg0, ArgT... args);
  std::string* mutable_wcs_etag();
  PROTOBUF_NODISCARD std::string* release_wcs_etag();
  void set_allocated_wcs_etag(std::string* wcs_etag);
  private:
  const std::string& _internal_wcs_etag() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_wcs_etag(const std::string& value);
  std::string* _internal_mutable_wcs_etag();
  public:

  // string sha1 = 3;
  void clear_sha1();
  const std::string& sha1() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_sha1(ArgT0&& arg0, ArgT... args);
  std::string* mutable_sha1();
  PROTOBUF_NODISCARD std::string* release_sha1();
  void set_allocated_sha1(std::string* sha1);
  private:
  const std::string& _internal_sha1() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_sha1(const std::string& value);
  std::string* _internal_mutable_sha1();
  public:

  // string head_sha1 = 4;
  void clear_head_sha1();
  const std::string& head_sha1() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_head_sha1(ArgT0&& arg0, ArgT... args);
  std::string* mutable_head_sha1();
  PROTOBUF_NODISCARD std::string* release_head_sha1();
  void set_allocated_head_sha1(std::string* head_sha1);
  private:
  const std::string& _internal_head_sha1() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_head_sha1(const std::string& value);
  std::string* _internal_mutable_head_sha1();
  public:

  // string special_sha1 = 6;
  void clear_special_sha1();
  const std::string& special_sha1() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_special_sha1(ArgT0&& arg0, ArgT... args);
  std::string* mutable_special_sha1();
  PROTOBUF_NODISCARD std::string* release_special_sha1();
  void set_allocated_special_sha1(std::string* special_sha1);
  private:
  const std::string& _internal_special_sha1() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_special_sha1(const std::string& value);
  std::string* _internal_mutable_special_sha1();
  public:

  // string name = 7;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string lh_hash = 8;
  void clear_lh_hash();
  const std::string& lh_hash() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_lh_hash(ArgT0&& arg0, ArgT... args);
  std::string* mutable_lh_hash();
  PROTOBUF_NODISCARD std::string* release_lh_hash();
  void set_allocated_lh_hash(std::string* lh_hash);
  private:
  const std::string& _internal_lh_hash() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_lh_hash(const std::string& value);
  std::string* _internal_mutable_lh_hash();
  public:

  // int64 file_size = 5;
  void clear_file_size();
  int64_t file_size() const;
  void set_file_size(int64_t value);
  private:
  int64_t _internal_file_size() const;
  void _internal_set_file_size(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:v6.services.pub.FastLookup)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr identity_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr wcs_etag_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sha1_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr head_sha1_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr special_sha1_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr lh_hash_;
    int64_t file_size_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_slice_5fsvc_2eproto;
};
// -------------------------------------------------------------------

class FastLookupRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:v6.services.pub.FastLookupRequest) */ {
 public:
  inline FastLookupRequest() : FastLookupRequest(nullptr) {}
  ~FastLookupRequest() override;
  explicit PROTOBUF_CONSTEXPR FastLookupRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FastLookupRequest(const FastLookupRequest& from);
  FastLookupRequest(FastLookupRequest&& from) noexcept
    : FastLookupRequest() {
    *this = ::std::move(from);
  }

  inline FastLookupRequest& operator=(const FastLookupRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline FastLookupRequest& operator=(FastLookupRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FastLookupRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const FastLookupRequest* internal_default_instance() {
    return reinterpret_cast<const FastLookupRequest*>(
               &_FastLookupRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(FastLookupRequest& a, FastLookupRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(FastLookupRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FastLookupRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FastLookupRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FastLookupRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FastLookupRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const FastLookupRequest& from) {
    FastLookupRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FastLookupRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "v6.services.pub.FastLookupRequest";
  }
  protected:
  explicit FastLookupRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInfoFieldNumber = 2,
    kTypeFieldNumber = 1,
  };
  // .v6.services.pub.FastLookup info = 2;
  bool has_info() const;
  private:
  bool _internal_has_info() const;
  public:
  void clear_info();
  const ::v6::services::pub::FastLookup& info() const;
  PROTOBUF_NODISCARD ::v6::services::pub::FastLookup* release_info();
  ::v6::services::pub::FastLookup* mutable_info();
  void set_allocated_info(::v6::services::pub::FastLookup* info);
  private:
  const ::v6::services::pub::FastLookup& _internal_info() const;
  ::v6::services::pub::FastLookup* _internal_mutable_info();
  public:
  void unsafe_arena_set_allocated_info(
      ::v6::services::pub::FastLookup* info);
  ::v6::services::pub::FastLookup* unsafe_arena_release_info();

  // int32 type = 1;
  void clear_type();
  int32_t type() const;
  void set_type(int32_t value);
  private:
  int32_t _internal_type() const;
  void _internal_set_type(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:v6.services.pub.FastLookupRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::v6::services::pub::FastLookup* info_;
    int32_t type_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_slice_5fsvc_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Slice

// string identity = 1;
inline void Slice::clear_identity() {
  _impl_.identity_.ClearToEmpty();
}
inline const std::string& Slice::identity() const {
  // @@protoc_insertion_point(field_get:v6.services.pub.Slice.identity)
  return _internal_identity();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Slice::set_identity(ArgT0&& arg0, ArgT... args) {
 
 _impl_.identity_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:v6.services.pub.Slice.identity)
}
inline std::string* Slice::mutable_identity() {
  std::string* _s = _internal_mutable_identity();
  // @@protoc_insertion_point(field_mutable:v6.services.pub.Slice.identity)
  return _s;
}
inline const std::string& Slice::_internal_identity() const {
  return _impl_.identity_.Get();
}
inline void Slice::_internal_set_identity(const std::string& value) {
  
  _impl_.identity_.Set(value, GetArenaForAllocation());
}
inline std::string* Slice::_internal_mutable_identity() {
  
  return _impl_.identity_.Mutable(GetArenaForAllocation());
}
inline std::string* Slice::release_identity() {
  // @@protoc_insertion_point(field_release:v6.services.pub.Slice.identity)
  return _impl_.identity_.Release();
}
inline void Slice::set_allocated_identity(std::string* identity) {
  if (identity != nullptr) {
    
  } else {
    
  }
  _impl_.identity_.SetAllocated(identity, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.identity_.IsDefault()) {
    _impl_.identity_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:v6.services.pub.Slice.identity)
}

// int32 type = 2;
inline void Slice::clear_type() {
  _impl_.type_ = 0;
}
inline int32_t Slice::_internal_type() const {
  return _impl_.type_;
}
inline int32_t Slice::type() const {
  // @@protoc_insertion_point(field_get:v6.services.pub.Slice.type)
  return _internal_type();
}
inline void Slice::_internal_set_type(int32_t value) {
  
  _impl_.type_ = value;
}
inline void Slice::set_type(int32_t value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:v6.services.pub.Slice.type)
}

// int32 status = 3;
inline void Slice::clear_status() {
  _impl_.status_ = 0;
}
inline int32_t Slice::_internal_status() const {
  return _impl_.status_;
}
inline int32_t Slice::status() const {
  // @@protoc_insertion_point(field_get:v6.services.pub.Slice.status)
  return _internal_status();
}
inline void Slice::_internal_set_status(int32_t value) {
  
  _impl_.status_ = value;
}
inline void Slice::set_status(int32_t value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:v6.services.pub.Slice.status)
}

// int64 update_ts = 5;
inline void Slice::clear_update_ts() {
  _impl_.update_ts_ = int64_t{0};
}
inline int64_t Slice::_internal_update_ts() const {
  return _impl_.update_ts_;
}
inline int64_t Slice::update_ts() const {
  // @@protoc_insertion_point(field_get:v6.services.pub.Slice.update_ts)
  return _internal_update_ts();
}
inline void Slice::_internal_set_update_ts(int64_t value) {
  
  _impl_.update_ts_ = value;
}
inline void Slice::set_update_ts(int64_t value) {
  _internal_set_update_ts(value);
  // @@protoc_insertion_point(field_set:v6.services.pub.Slice.update_ts)
}

// string peer = 6;
inline void Slice::clear_peer() {
  _impl_.peer_.ClearToEmpty();
}
inline const std::string& Slice::peer() const {
  // @@protoc_insertion_point(field_get:v6.services.pub.Slice.peer)
  return _internal_peer();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Slice::set_peer(ArgT0&& arg0, ArgT... args) {
 
 _impl_.peer_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:v6.services.pub.Slice.peer)
}
inline std::string* Slice::mutable_peer() {
  std::string* _s = _internal_mutable_peer();
  // @@protoc_insertion_point(field_mutable:v6.services.pub.Slice.peer)
  return _s;
}
inline const std::string& Slice::_internal_peer() const {
  return _impl_.peer_.Get();
}
inline void Slice::_internal_set_peer(const std::string& value) {
  
  _impl_.peer_.Set(value, GetArenaForAllocation());
}
inline std::string* Slice::_internal_mutable_peer() {
  
  return _impl_.peer_.Mutable(GetArenaForAllocation());
}
inline std::string* Slice::release_peer() {
  // @@protoc_insertion_point(field_release:v6.services.pub.Slice.peer)
  return _impl_.peer_.Release();
}
inline void Slice::set_allocated_peer(std::string* peer) {
  if (peer != nullptr) {
    
  } else {
    
  }
  _impl_.peer_.SetAllocated(peer, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.peer_.IsDefault()) {
    _impl_.peer_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:v6.services.pub.Slice.peer)
}

// int64 create_ts = 7;
inline void Slice::clear_create_ts() {
  _impl_.create_ts_ = int64_t{0};
}
inline int64_t Slice::_internal_create_ts() const {
  return _impl_.create_ts_;
}
inline int64_t Slice::create_ts() const {
  // @@protoc_insertion_point(field_get:v6.services.pub.Slice.create_ts)
  return _internal_create_ts();
}
inline void Slice::_internal_set_create_ts(int64_t value) {
  
  _impl_.create_ts_ = value;
}
inline void Slice::set_create_ts(int64_t value) {
  _internal_set_create_ts(value);
  // @@protoc_insertion_point(field_set:v6.services.pub.Slice.create_ts)
}

// string server = 8;
inline void Slice::clear_server() {
  _impl_.server_.ClearToEmpty();
}
inline const std::string& Slice::server() const {
  // @@protoc_insertion_point(field_get:v6.services.pub.Slice.server)
  return _internal_server();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Slice::set_server(ArgT0&& arg0, ArgT... args) {
 
 _impl_.server_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:v6.services.pub.Slice.server)
}
inline std::string* Slice::mutable_server() {
  std::string* _s = _internal_mutable_server();
  // @@protoc_insertion_point(field_mutable:v6.services.pub.Slice.server)
  return _s;
}
inline const std::string& Slice::_internal_server() const {
  return _impl_.server_.Get();
}
inline void Slice::_internal_set_server(const std::string& value) {
  
  _impl_.server_.Set(value, GetArenaForAllocation());
}
inline std::string* Slice::_internal_mutable_server() {
  
  return _impl_.server_.Mutable(GetArenaForAllocation());
}
inline std::string* Slice::release_server() {
  // @@protoc_insertion_point(field_release:v6.services.pub.Slice.server)
  return _impl_.server_.Release();
}
inline void Slice::set_allocated_server(std::string* server) {
  if (server != nullptr) {
    
  } else {
    
  }
  _impl_.server_.SetAllocated(server, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.server_.IsDefault()) {
    _impl_.server_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:v6.services.pub.Slice.server)
}

// bool need_data = 9;
inline void Slice::clear_need_data() {
  _impl_.need_data_ = false;
}
inline bool Slice::_internal_need_data() const {
  return _impl_.need_data_;
}
inline bool Slice::need_data() const {
  // @@protoc_insertion_point(field_get:v6.services.pub.Slice.need_data)
  return _internal_need_data();
}
inline void Slice::_internal_set_need_data(bool value) {
  
  _impl_.need_data_ = value;
}
inline void Slice::set_need_data(bool value) {
  _internal_set_need_data(value);
  // @@protoc_insertion_point(field_set:v6.services.pub.Slice.need_data)
}

// bytes data = 10;
inline void Slice::clear_data() {
  _impl_.data_.ClearToEmpty();
}
inline const std::string& Slice::data() const {
  // @@protoc_insertion_point(field_get:v6.services.pub.Slice.data)
  return _internal_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Slice::set_data(ArgT0&& arg0, ArgT... args) {
 
 _impl_.data_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:v6.services.pub.Slice.data)
}
inline std::string* Slice::mutable_data() {
  std::string* _s = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:v6.services.pub.Slice.data)
  return _s;
}
inline const std::string& Slice::_internal_data() const {
  return _impl_.data_.Get();
}
inline void Slice::_internal_set_data(const std::string& value) {
  
  _impl_.data_.Set(value, GetArenaForAllocation());
}
inline std::string* Slice::_internal_mutable_data() {
  
  return _impl_.data_.Mutable(GetArenaForAllocation());
}
inline std::string* Slice::release_data() {
  // @@protoc_insertion_point(field_release:v6.services.pub.Slice.data)
  return _impl_.data_.Release();
}
inline void Slice::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  _impl_.data_.SetAllocated(data, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.data_.IsDefault()) {
    _impl_.data_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:v6.services.pub.Slice.data)
}

// -------------------------------------------------------------------

// Meta

// string identity = 1;
inline void Meta::clear_identity() {
  _impl_.identity_.ClearToEmpty();
}
inline const std::string& Meta::identity() const {
  // @@protoc_insertion_point(field_get:v6.services.pub.Meta.identity)
  return _internal_identity();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Meta::set_identity(ArgT0&& arg0, ArgT... args) {
 
 _impl_.identity_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:v6.services.pub.Meta.identity)
}
inline std::string* Meta::mutable_identity() {
  std::string* _s = _internal_mutable_identity();
  // @@protoc_insertion_point(field_mutable:v6.services.pub.Meta.identity)
  return _s;
}
inline const std::string& Meta::_internal_identity() const {
  return _impl_.identity_.Get();
}
inline void Meta::_internal_set_identity(const std::string& value) {
  
  _impl_.identity_.Set(value, GetArenaForAllocation());
}
inline std::string* Meta::_internal_mutable_identity() {
  
  return _impl_.identity_.Mutable(GetArenaForAllocation());
}
inline std::string* Meta::release_identity() {
  // @@protoc_insertion_point(field_release:v6.services.pub.Meta.identity)
  return _impl_.identity_.Release();
}
inline void Meta::set_allocated_identity(std::string* identity) {
  if (identity != nullptr) {
    
  } else {
    
  }
  _impl_.identity_.SetAllocated(identity, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.identity_.IsDefault()) {
    _impl_.identity_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:v6.services.pub.Meta.identity)
}

// bytes data = 2;
inline void Meta::clear_data() {
  _impl_.data_.ClearToEmpty();
}
inline const std::string& Meta::data() const {
  // @@protoc_insertion_point(field_get:v6.services.pub.Meta.data)
  return _internal_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Meta::set_data(ArgT0&& arg0, ArgT... args) {
 
 _impl_.data_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:v6.services.pub.Meta.data)
}
inline std::string* Meta::mutable_data() {
  std::string* _s = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:v6.services.pub.Meta.data)
  return _s;
}
inline const std::string& Meta::_internal_data() const {
  return _impl_.data_.Get();
}
inline void Meta::_internal_set_data(const std::string& value) {
  
  _impl_.data_.Set(value, GetArenaForAllocation());
}
inline std::string* Meta::_internal_mutable_data() {
  
  return _impl_.data_.Mutable(GetArenaForAllocation());
}
inline std::string* Meta::release_data() {
  // @@protoc_insertion_point(field_release:v6.services.pub.Meta.data)
  return _impl_.data_.Release();
}
inline void Meta::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  _impl_.data_.SetAllocated(data, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.data_.IsDefault()) {
    _impl_.data_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:v6.services.pub.Meta.data)
}

// -------------------------------------------------------------------

// FastLookup

// string identity = 1;
inline void FastLookup::clear_identity() {
  _impl_.identity_.ClearToEmpty();
}
inline const std::string& FastLookup::identity() const {
  // @@protoc_insertion_point(field_get:v6.services.pub.FastLookup.identity)
  return _internal_identity();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FastLookup::set_identity(ArgT0&& arg0, ArgT... args) {
 
 _impl_.identity_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:v6.services.pub.FastLookup.identity)
}
inline std::string* FastLookup::mutable_identity() {
  std::string* _s = _internal_mutable_identity();
  // @@protoc_insertion_point(field_mutable:v6.services.pub.FastLookup.identity)
  return _s;
}
inline const std::string& FastLookup::_internal_identity() const {
  return _impl_.identity_.Get();
}
inline void FastLookup::_internal_set_identity(const std::string& value) {
  
  _impl_.identity_.Set(value, GetArenaForAllocation());
}
inline std::string* FastLookup::_internal_mutable_identity() {
  
  return _impl_.identity_.Mutable(GetArenaForAllocation());
}
inline std::string* FastLookup::release_identity() {
  // @@protoc_insertion_point(field_release:v6.services.pub.FastLookup.identity)
  return _impl_.identity_.Release();
}
inline void FastLookup::set_allocated_identity(std::string* identity) {
  if (identity != nullptr) {
    
  } else {
    
  }
  _impl_.identity_.SetAllocated(identity, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.identity_.IsDefault()) {
    _impl_.identity_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:v6.services.pub.FastLookup.identity)
}

// string wcs_etag = 2;
inline void FastLookup::clear_wcs_etag() {
  _impl_.wcs_etag_.ClearToEmpty();
}
inline const std::string& FastLookup::wcs_etag() const {
  // @@protoc_insertion_point(field_get:v6.services.pub.FastLookup.wcs_etag)
  return _internal_wcs_etag();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FastLookup::set_wcs_etag(ArgT0&& arg0, ArgT... args) {
 
 _impl_.wcs_etag_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:v6.services.pub.FastLookup.wcs_etag)
}
inline std::string* FastLookup::mutable_wcs_etag() {
  std::string* _s = _internal_mutable_wcs_etag();
  // @@protoc_insertion_point(field_mutable:v6.services.pub.FastLookup.wcs_etag)
  return _s;
}
inline const std::string& FastLookup::_internal_wcs_etag() const {
  return _impl_.wcs_etag_.Get();
}
inline void FastLookup::_internal_set_wcs_etag(const std::string& value) {
  
  _impl_.wcs_etag_.Set(value, GetArenaForAllocation());
}
inline std::string* FastLookup::_internal_mutable_wcs_etag() {
  
  return _impl_.wcs_etag_.Mutable(GetArenaForAllocation());
}
inline std::string* FastLookup::release_wcs_etag() {
  // @@protoc_insertion_point(field_release:v6.services.pub.FastLookup.wcs_etag)
  return _impl_.wcs_etag_.Release();
}
inline void FastLookup::set_allocated_wcs_etag(std::string* wcs_etag) {
  if (wcs_etag != nullptr) {
    
  } else {
    
  }
  _impl_.wcs_etag_.SetAllocated(wcs_etag, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.wcs_etag_.IsDefault()) {
    _impl_.wcs_etag_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:v6.services.pub.FastLookup.wcs_etag)
}

// string sha1 = 3;
inline void FastLookup::clear_sha1() {
  _impl_.sha1_.ClearToEmpty();
}
inline const std::string& FastLookup::sha1() const {
  // @@protoc_insertion_point(field_get:v6.services.pub.FastLookup.sha1)
  return _internal_sha1();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FastLookup::set_sha1(ArgT0&& arg0, ArgT... args) {
 
 _impl_.sha1_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:v6.services.pub.FastLookup.sha1)
}
inline std::string* FastLookup::mutable_sha1() {
  std::string* _s = _internal_mutable_sha1();
  // @@protoc_insertion_point(field_mutable:v6.services.pub.FastLookup.sha1)
  return _s;
}
inline const std::string& FastLookup::_internal_sha1() const {
  return _impl_.sha1_.Get();
}
inline void FastLookup::_internal_set_sha1(const std::string& value) {
  
  _impl_.sha1_.Set(value, GetArenaForAllocation());
}
inline std::string* FastLookup::_internal_mutable_sha1() {
  
  return _impl_.sha1_.Mutable(GetArenaForAllocation());
}
inline std::string* FastLookup::release_sha1() {
  // @@protoc_insertion_point(field_release:v6.services.pub.FastLookup.sha1)
  return _impl_.sha1_.Release();
}
inline void FastLookup::set_allocated_sha1(std::string* sha1) {
  if (sha1 != nullptr) {
    
  } else {
    
  }
  _impl_.sha1_.SetAllocated(sha1, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.sha1_.IsDefault()) {
    _impl_.sha1_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:v6.services.pub.FastLookup.sha1)
}

// string head_sha1 = 4;
inline void FastLookup::clear_head_sha1() {
  _impl_.head_sha1_.ClearToEmpty();
}
inline const std::string& FastLookup::head_sha1() const {
  // @@protoc_insertion_point(field_get:v6.services.pub.FastLookup.head_sha1)
  return _internal_head_sha1();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FastLookup::set_head_sha1(ArgT0&& arg0, ArgT... args) {
 
 _impl_.head_sha1_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:v6.services.pub.FastLookup.head_sha1)
}
inline std::string* FastLookup::mutable_head_sha1() {
  std::string* _s = _internal_mutable_head_sha1();
  // @@protoc_insertion_point(field_mutable:v6.services.pub.FastLookup.head_sha1)
  return _s;
}
inline const std::string& FastLookup::_internal_head_sha1() const {
  return _impl_.head_sha1_.Get();
}
inline void FastLookup::_internal_set_head_sha1(const std::string& value) {
  
  _impl_.head_sha1_.Set(value, GetArenaForAllocation());
}
inline std::string* FastLookup::_internal_mutable_head_sha1() {
  
  return _impl_.head_sha1_.Mutable(GetArenaForAllocation());
}
inline std::string* FastLookup::release_head_sha1() {
  // @@protoc_insertion_point(field_release:v6.services.pub.FastLookup.head_sha1)
  return _impl_.head_sha1_.Release();
}
inline void FastLookup::set_allocated_head_sha1(std::string* head_sha1) {
  if (head_sha1 != nullptr) {
    
  } else {
    
  }
  _impl_.head_sha1_.SetAllocated(head_sha1, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.head_sha1_.IsDefault()) {
    _impl_.head_sha1_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:v6.services.pub.FastLookup.head_sha1)
}

// int64 file_size = 5;
inline void FastLookup::clear_file_size() {
  _impl_.file_size_ = int64_t{0};
}
inline int64_t FastLookup::_internal_file_size() const {
  return _impl_.file_size_;
}
inline int64_t FastLookup::file_size() const {
  // @@protoc_insertion_point(field_get:v6.services.pub.FastLookup.file_size)
  return _internal_file_size();
}
inline void FastLookup::_internal_set_file_size(int64_t value) {
  
  _impl_.file_size_ = value;
}
inline void FastLookup::set_file_size(int64_t value) {
  _internal_set_file_size(value);
  // @@protoc_insertion_point(field_set:v6.services.pub.FastLookup.file_size)
}

// string special_sha1 = 6;
inline void FastLookup::clear_special_sha1() {
  _impl_.special_sha1_.ClearToEmpty();
}
inline const std::string& FastLookup::special_sha1() const {
  // @@protoc_insertion_point(field_get:v6.services.pub.FastLookup.special_sha1)
  return _internal_special_sha1();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FastLookup::set_special_sha1(ArgT0&& arg0, ArgT... args) {
 
 _impl_.special_sha1_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:v6.services.pub.FastLookup.special_sha1)
}
inline std::string* FastLookup::mutable_special_sha1() {
  std::string* _s = _internal_mutable_special_sha1();
  // @@protoc_insertion_point(field_mutable:v6.services.pub.FastLookup.special_sha1)
  return _s;
}
inline const std::string& FastLookup::_internal_special_sha1() const {
  return _impl_.special_sha1_.Get();
}
inline void FastLookup::_internal_set_special_sha1(const std::string& value) {
  
  _impl_.special_sha1_.Set(value, GetArenaForAllocation());
}
inline std::string* FastLookup::_internal_mutable_special_sha1() {
  
  return _impl_.special_sha1_.Mutable(GetArenaForAllocation());
}
inline std::string* FastLookup::release_special_sha1() {
  // @@protoc_insertion_point(field_release:v6.services.pub.FastLookup.special_sha1)
  return _impl_.special_sha1_.Release();
}
inline void FastLookup::set_allocated_special_sha1(std::string* special_sha1) {
  if (special_sha1 != nullptr) {
    
  } else {
    
  }
  _impl_.special_sha1_.SetAllocated(special_sha1, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.special_sha1_.IsDefault()) {
    _impl_.special_sha1_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:v6.services.pub.FastLookup.special_sha1)
}

// string name = 7;
inline void FastLookup::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& FastLookup::name() const {
  // @@protoc_insertion_point(field_get:v6.services.pub.FastLookup.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FastLookup::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:v6.services.pub.FastLookup.name)
}
inline std::string* FastLookup::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:v6.services.pub.FastLookup.name)
  return _s;
}
inline const std::string& FastLookup::_internal_name() const {
  return _impl_.name_.Get();
}
inline void FastLookup::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* FastLookup::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* FastLookup::release_name() {
  // @@protoc_insertion_point(field_release:v6.services.pub.FastLookup.name)
  return _impl_.name_.Release();
}
inline void FastLookup::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:v6.services.pub.FastLookup.name)
}

// string lh_hash = 8;
inline void FastLookup::clear_lh_hash() {
  _impl_.lh_hash_.ClearToEmpty();
}
inline const std::string& FastLookup::lh_hash() const {
  // @@protoc_insertion_point(field_get:v6.services.pub.FastLookup.lh_hash)
  return _internal_lh_hash();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FastLookup::set_lh_hash(ArgT0&& arg0, ArgT... args) {
 
 _impl_.lh_hash_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:v6.services.pub.FastLookup.lh_hash)
}
inline std::string* FastLookup::mutable_lh_hash() {
  std::string* _s = _internal_mutable_lh_hash();
  // @@protoc_insertion_point(field_mutable:v6.services.pub.FastLookup.lh_hash)
  return _s;
}
inline const std::string& FastLookup::_internal_lh_hash() const {
  return _impl_.lh_hash_.Get();
}
inline void FastLookup::_internal_set_lh_hash(const std::string& value) {
  
  _impl_.lh_hash_.Set(value, GetArenaForAllocation());
}
inline std::string* FastLookup::_internal_mutable_lh_hash() {
  
  return _impl_.lh_hash_.Mutable(GetArenaForAllocation());
}
inline std::string* FastLookup::release_lh_hash() {
  // @@protoc_insertion_point(field_release:v6.services.pub.FastLookup.lh_hash)
  return _impl_.lh_hash_.Release();
}
inline void FastLookup::set_allocated_lh_hash(std::string* lh_hash) {
  if (lh_hash != nullptr) {
    
  } else {
    
  }
  _impl_.lh_hash_.SetAllocated(lh_hash, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.lh_hash_.IsDefault()) {
    _impl_.lh_hash_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:v6.services.pub.FastLookup.lh_hash)
}

// -------------------------------------------------------------------

// FastLookupRequest

// int32 type = 1;
inline void FastLookupRequest::clear_type() {
  _impl_.type_ = 0;
}
inline int32_t FastLookupRequest::_internal_type() const {
  return _impl_.type_;
}
inline int32_t FastLookupRequest::type() const {
  // @@protoc_insertion_point(field_get:v6.services.pub.FastLookupRequest.type)
  return _internal_type();
}
inline void FastLookupRequest::_internal_set_type(int32_t value) {
  
  _impl_.type_ = value;
}
inline void FastLookupRequest::set_type(int32_t value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:v6.services.pub.FastLookupRequest.type)
}

// .v6.services.pub.FastLookup info = 2;
inline bool FastLookupRequest::_internal_has_info() const {
  return this != internal_default_instance() && _impl_.info_ != nullptr;
}
inline bool FastLookupRequest::has_info() const {
  return _internal_has_info();
}
inline void FastLookupRequest::clear_info() {
  if (GetArenaForAllocation() == nullptr && _impl_.info_ != nullptr) {
    delete _impl_.info_;
  }
  _impl_.info_ = nullptr;
}
inline const ::v6::services::pub::FastLookup& FastLookupRequest::_internal_info() const {
  const ::v6::services::pub::FastLookup* p = _impl_.info_;
  return p != nullptr ? *p : reinterpret_cast<const ::v6::services::pub::FastLookup&>(
      ::v6::services::pub::_FastLookup_default_instance_);
}
inline const ::v6::services::pub::FastLookup& FastLookupRequest::info() const {
  // @@protoc_insertion_point(field_get:v6.services.pub.FastLookupRequest.info)
  return _internal_info();
}
inline void FastLookupRequest::unsafe_arena_set_allocated_info(
    ::v6::services::pub::FastLookup* info) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.info_);
  }
  _impl_.info_ = info;
  if (info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:v6.services.pub.FastLookupRequest.info)
}
inline ::v6::services::pub::FastLookup* FastLookupRequest::release_info() {
  
  ::v6::services::pub::FastLookup* temp = _impl_.info_;
  _impl_.info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::v6::services::pub::FastLookup* FastLookupRequest::unsafe_arena_release_info() {
  // @@protoc_insertion_point(field_release:v6.services.pub.FastLookupRequest.info)
  
  ::v6::services::pub::FastLookup* temp = _impl_.info_;
  _impl_.info_ = nullptr;
  return temp;
}
inline ::v6::services::pub::FastLookup* FastLookupRequest::_internal_mutable_info() {
  
  if (_impl_.info_ == nullptr) {
    auto* p = CreateMaybeMessage<::v6::services::pub::FastLookup>(GetArenaForAllocation());
    _impl_.info_ = p;
  }
  return _impl_.info_;
}
inline ::v6::services::pub::FastLookup* FastLookupRequest::mutable_info() {
  ::v6::services::pub::FastLookup* _msg = _internal_mutable_info();
  // @@protoc_insertion_point(field_mutable:v6.services.pub.FastLookupRequest.info)
  return _msg;
}
inline void FastLookupRequest::set_allocated_info(::v6::services::pub::FastLookup* info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.info_;
  }
  if (info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(info);
    if (message_arena != submessage_arena) {
      info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, info, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.info_ = info;
  // @@protoc_insertion_point(field_set_allocated:v6.services.pub.FastLookupRequest.info)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace pub
}  // namespace services
}  // namespace v6

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_slice_5fsvc_2eproto
