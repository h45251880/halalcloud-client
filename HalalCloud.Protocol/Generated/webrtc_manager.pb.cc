// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: webrtc_manager.proto

#include "webrtc_manager.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace v6 {
namespace services {
namespace p2p {
PROTOBUF_CONSTEXPR StartDownloadRequest::StartDownloadRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.client_identity_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.content_identity_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.peer_limit_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct StartDownloadRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StartDownloadRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~StartDownloadRequestDefaultTypeInternal() {}
  union {
    StartDownloadRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StartDownloadRequestDefaultTypeInternal _StartDownloadRequest_default_instance_;
PROTOBUF_CONSTEXPR RtcPeerInfo::RtcPeerInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.client_identity_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.content_identity_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.sdp_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RtcPeerInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RtcPeerInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RtcPeerInfoDefaultTypeInternal() {}
  union {
    RtcPeerInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RtcPeerInfoDefaultTypeInternal _RtcPeerInfo_default_instance_;
PROTOBUF_CONSTEXPR StartDownloadResponse::StartDownloadResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.peers_)*/{}
  , /*decltype(_impl_.backend_peers_)*/{}
  , /*decltype(_impl_.content_identity_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct StartDownloadResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StartDownloadResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~StartDownloadResponseDefaultTypeInternal() {}
  union {
    StartDownloadResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StartDownloadResponseDefaultTypeInternal _StartDownloadResponse_default_instance_;
PROTOBUF_CONSTEXPR StopDownloadRequest::StopDownloadRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.client_identity_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.content_identity_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct StopDownloadRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StopDownloadRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~StopDownloadRequestDefaultTypeInternal() {}
  union {
    StopDownloadRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StopDownloadRequestDefaultTypeInternal _StopDownloadRequest_default_instance_;
PROTOBUF_CONSTEXPR StopDownloadResponse::StopDownloadResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.content_identity_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct StopDownloadResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StopDownloadResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~StopDownloadResponseDefaultTypeInternal() {}
  union {
    StopDownloadResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StopDownloadResponseDefaultTypeInternal _StopDownloadResponse_default_instance_;
PROTOBUF_CONSTEXPR DisconnectRequest::DisconnectRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.client_identity_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DisconnectRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DisconnectRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DisconnectRequestDefaultTypeInternal() {}
  union {
    DisconnectRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DisconnectRequestDefaultTypeInternal _DisconnectRequest_default_instance_;
PROTOBUF_CONSTEXPR DisconnectResponse::DisconnectResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.client_identity_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DisconnectResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DisconnectResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DisconnectResponseDefaultTypeInternal() {}
  union {
    DisconnectResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DisconnectResponseDefaultTypeInternal _DisconnectResponse_default_instance_;
PROTOBUF_CONSTEXPR SendPeerIceCandidateRequest::SendPeerIceCandidateRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.client_identity_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.candidate_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SendPeerIceCandidateRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SendPeerIceCandidateRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SendPeerIceCandidateRequestDefaultTypeInternal() {}
  union {
    SendPeerIceCandidateRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SendPeerIceCandidateRequestDefaultTypeInternal _SendPeerIceCandidateRequest_default_instance_;
PROTOBUF_CONSTEXPR SendPeerIceCandidateResponse::SendPeerIceCandidateResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.client_identity_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SendPeerIceCandidateResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SendPeerIceCandidateResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SendPeerIceCandidateResponseDefaultTypeInternal() {}
  union {
    SendPeerIceCandidateResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SendPeerIceCandidateResponseDefaultTypeInternal _SendPeerIceCandidateResponse_default_instance_;
PROTOBUF_CONSTEXPR ReceiveRequest::ReceiveRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ReceiveRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ReceiveRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ReceiveRequestDefaultTypeInternal() {}
  union {
    ReceiveRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ReceiveRequestDefaultTypeInternal _ReceiveRequest_default_instance_;
PROTOBUF_CONSTEXPR ReceiveResponse::ReceiveResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.data_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ReceiveResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ReceiveResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ReceiveResponseDefaultTypeInternal() {}
  union {
    ReceiveResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ReceiveResponseDefaultTypeInternal _ReceiveResponse_default_instance_;
}  // namespace p2p
}  // namespace services
}  // namespace v6
static ::_pb::Metadata file_level_metadata_webrtc_5fmanager_2eproto[11];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_webrtc_5fmanager_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_webrtc_5fmanager_2eproto = nullptr;

const uint32_t TableStruct_webrtc_5fmanager_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::v6::services::p2p::StartDownloadRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::v6::services::p2p::StartDownloadRequest, _impl_.client_identity_),
  PROTOBUF_FIELD_OFFSET(::v6::services::p2p::StartDownloadRequest, _impl_.content_identity_),
  PROTOBUF_FIELD_OFFSET(::v6::services::p2p::StartDownloadRequest, _impl_.peer_limit_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::v6::services::p2p::RtcPeerInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::v6::services::p2p::RtcPeerInfo, _impl_.client_identity_),
  PROTOBUF_FIELD_OFFSET(::v6::services::p2p::RtcPeerInfo, _impl_.content_identity_),
  PROTOBUF_FIELD_OFFSET(::v6::services::p2p::RtcPeerInfo, _impl_.sdp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::v6::services::p2p::StartDownloadResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::v6::services::p2p::StartDownloadResponse, _impl_.content_identity_),
  PROTOBUF_FIELD_OFFSET(::v6::services::p2p::StartDownloadResponse, _impl_.peers_),
  PROTOBUF_FIELD_OFFSET(::v6::services::p2p::StartDownloadResponse, _impl_.backend_peers_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::v6::services::p2p::StopDownloadRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::v6::services::p2p::StopDownloadRequest, _impl_.client_identity_),
  PROTOBUF_FIELD_OFFSET(::v6::services::p2p::StopDownloadRequest, _impl_.content_identity_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::v6::services::p2p::StopDownloadResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::v6::services::p2p::StopDownloadResponse, _impl_.content_identity_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::v6::services::p2p::DisconnectRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::v6::services::p2p::DisconnectRequest, _impl_.client_identity_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::v6::services::p2p::DisconnectResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::v6::services::p2p::DisconnectResponse, _impl_.client_identity_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::v6::services::p2p::SendPeerIceCandidateRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::v6::services::p2p::SendPeerIceCandidateRequest, _impl_.client_identity_),
  PROTOBUF_FIELD_OFFSET(::v6::services::p2p::SendPeerIceCandidateRequest, _impl_.candidate_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::v6::services::p2p::SendPeerIceCandidateResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::v6::services::p2p::SendPeerIceCandidateResponse, _impl_.client_identity_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::v6::services::p2p::ReceiveRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::v6::services::p2p::ReceiveRequest, _impl_.id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::v6::services::p2p::ReceiveResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::v6::services::p2p::ReceiveResponse, _impl_.data_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::v6::services::p2p::StartDownloadRequest)},
  { 9, -1, -1, sizeof(::v6::services::p2p::RtcPeerInfo)},
  { 18, -1, -1, sizeof(::v6::services::p2p::StartDownloadResponse)},
  { 27, -1, -1, sizeof(::v6::services::p2p::StopDownloadRequest)},
  { 35, -1, -1, sizeof(::v6::services::p2p::StopDownloadResponse)},
  { 42, -1, -1, sizeof(::v6::services::p2p::DisconnectRequest)},
  { 49, -1, -1, sizeof(::v6::services::p2p::DisconnectResponse)},
  { 56, -1, -1, sizeof(::v6::services::p2p::SendPeerIceCandidateRequest)},
  { 64, -1, -1, sizeof(::v6::services::p2p::SendPeerIceCandidateResponse)},
  { 71, -1, -1, sizeof(::v6::services::p2p::ReceiveRequest)},
  { 78, -1, -1, sizeof(::v6::services::p2p::ReceiveResponse)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::v6::services::p2p::_StartDownloadRequest_default_instance_._instance,
  &::v6::services::p2p::_RtcPeerInfo_default_instance_._instance,
  &::v6::services::p2p::_StartDownloadResponse_default_instance_._instance,
  &::v6::services::p2p::_StopDownloadRequest_default_instance_._instance,
  &::v6::services::p2p::_StopDownloadResponse_default_instance_._instance,
  &::v6::services::p2p::_DisconnectRequest_default_instance_._instance,
  &::v6::services::p2p::_DisconnectResponse_default_instance_._instance,
  &::v6::services::p2p::_SendPeerIceCandidateRequest_default_instance_._instance,
  &::v6::services::p2p::_SendPeerIceCandidateResponse_default_instance_._instance,
  &::v6::services::p2p::_ReceiveRequest_default_instance_._instance,
  &::v6::services::p2p::_ReceiveResponse_default_instance_._instance,
};

const char descriptor_table_protodef_webrtc_5fmanager_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\024webrtc_manager.proto\022\017v6.services.p2p\""
  "]\n\024StartDownloadRequest\022\027\n\017client_identi"
  "ty\030\001 \001(\t\022\030\n\020content_identity\030\002 \001(\t\022\022\n\npe"
  "er_limit\030\003 \001(\003\"M\n\013RtcPeerInfo\022\027\n\017client_"
  "identity\030\001 \001(\t\022\030\n\020content_identity\030\002 \001(\t"
  "\022\013\n\003sdp\030\003 \001(\t\"\223\001\n\025StartDownloadResponse\022"
  "\030\n\020content_identity\030\001 \001(\t\022+\n\005peers\030\002 \003(\013"
  "2\034.v6.services.p2p.RtcPeerInfo\0223\n\rbacken"
  "d_peers\030\003 \003(\0132\034.v6.services.p2p.RtcPeerI"
  "nfo\"H\n\023StopDownloadRequest\022\027\n\017client_ide"
  "ntity\030\001 \001(\t\022\030\n\020content_identity\030\002 \001(\t\"0\n"
  "\024StopDownloadResponse\022\030\n\020content_identit"
  "y\030\001 \001(\t\",\n\021DisconnectRequest\022\027\n\017client_i"
  "dentity\030\001 \001(\t\"-\n\022DisconnectResponse\022\027\n\017c"
  "lient_identity\030\001 \001(\t\"I\n\033SendPeerIceCandi"
  "dateRequest\022\027\n\017client_identity\030\001 \001(\t\022\021\n\t"
  "candidate\030\003 \001(\t\"7\n\034SendPeerIceCandidateR"
  "esponse\022\027\n\017client_identity\030\001 \001(\t\"\034\n\016Rece"
  "iveRequest\022\n\n\002id\030\001 \001(\t\"\037\n\017ReceiveRespons"
  "e\022\014\n\004data\030\001 \001(\t2\370\003\n\023WebRTCManageService\022"
  "`\n\rStartDownload\022%.v6.services.p2p.Start"
  "DownloadRequest\032&.v6.services.p2p.StartD"
  "ownloadResponse\"\000\022]\n\014StopDownload\022$.v6.s"
  "ervices.p2p.StopDownloadRequest\032%.v6.ser"
  "vices.p2p.StopDownloadResponse\"\000\022W\n\nDisc"
  "onnect\022\".v6.services.p2p.DisconnectReque"
  "st\032#.v6.services.p2p.DisconnectResponse\""
  "\000\022u\n\024SendPeerIceCandidate\022,.v6.services."
  "p2p.SendPeerIceCandidateRequest\032-.v6.ser"
  "vices.p2p.SendPeerIceCandidateResponse\"\000"
  "\022P\n\007Receive\022\037.v6.services.p2p.ReceiveReq"
  "uest\032 .v6.services.p2p.ReceiveResponse\"\000"
  "0\001B3Z1github.com/city404/v6-public-rpc-p"
  "roto/go/v6/wrtcb\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_webrtc_5fmanager_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_webrtc_5fmanager_2eproto = {
    false, false, 1343, descriptor_table_protodef_webrtc_5fmanager_2eproto,
    "webrtc_manager.proto",
    &descriptor_table_webrtc_5fmanager_2eproto_once, nullptr, 0, 11,
    schemas, file_default_instances, TableStruct_webrtc_5fmanager_2eproto::offsets,
    file_level_metadata_webrtc_5fmanager_2eproto, file_level_enum_descriptors_webrtc_5fmanager_2eproto,
    file_level_service_descriptors_webrtc_5fmanager_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_webrtc_5fmanager_2eproto_getter() {
  return &descriptor_table_webrtc_5fmanager_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_webrtc_5fmanager_2eproto(&descriptor_table_webrtc_5fmanager_2eproto);
namespace v6 {
namespace services {
namespace p2p {

// ===================================================================

class StartDownloadRequest::_Internal {
 public:
};

StartDownloadRequest::StartDownloadRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:v6.services.p2p.StartDownloadRequest)
}
StartDownloadRequest::StartDownloadRequest(const StartDownloadRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  StartDownloadRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.client_identity_){}
    , decltype(_impl_.content_identity_){}
    , decltype(_impl_.peer_limit_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.client_identity_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.client_identity_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_client_identity().empty()) {
    _this->_impl_.client_identity_.Set(from._internal_client_identity(), 
      _this->GetArenaForAllocation());
  }
  _impl_.content_identity_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.content_identity_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_content_identity().empty()) {
    _this->_impl_.content_identity_.Set(from._internal_content_identity(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.peer_limit_ = from._impl_.peer_limit_;
  // @@protoc_insertion_point(copy_constructor:v6.services.p2p.StartDownloadRequest)
}

inline void StartDownloadRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.client_identity_){}
    , decltype(_impl_.content_identity_){}
    , decltype(_impl_.peer_limit_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.client_identity_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.client_identity_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.content_identity_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.content_identity_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

StartDownloadRequest::~StartDownloadRequest() {
  // @@protoc_insertion_point(destructor:v6.services.p2p.StartDownloadRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void StartDownloadRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.client_identity_.Destroy();
  _impl_.content_identity_.Destroy();
}

void StartDownloadRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void StartDownloadRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:v6.services.p2p.StartDownloadRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.client_identity_.ClearToEmpty();
  _impl_.content_identity_.ClearToEmpty();
  _impl_.peer_limit_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StartDownloadRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string client_identity = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_client_identity();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "v6.services.p2p.StartDownloadRequest.client_identity"));
        } else
          goto handle_unusual;
        continue;
      // string content_identity = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_content_identity();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "v6.services.p2p.StartDownloadRequest.content_identity"));
        } else
          goto handle_unusual;
        continue;
      // int64 peer_limit = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.peer_limit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* StartDownloadRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:v6.services.p2p.StartDownloadRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string client_identity = 1;
  if (!this->_internal_client_identity().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_client_identity().data(), static_cast<int>(this->_internal_client_identity().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "v6.services.p2p.StartDownloadRequest.client_identity");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_client_identity(), target);
  }

  // string content_identity = 2;
  if (!this->_internal_content_identity().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_content_identity().data(), static_cast<int>(this->_internal_content_identity().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "v6.services.p2p.StartDownloadRequest.content_identity");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_content_identity(), target);
  }

  // int64 peer_limit = 3;
  if (this->_internal_peer_limit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(3, this->_internal_peer_limit(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:v6.services.p2p.StartDownloadRequest)
  return target;
}

size_t StartDownloadRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:v6.services.p2p.StartDownloadRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string client_identity = 1;
  if (!this->_internal_client_identity().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_client_identity());
  }

  // string content_identity = 2;
  if (!this->_internal_content_identity().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_content_identity());
  }

  // int64 peer_limit = 3;
  if (this->_internal_peer_limit() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_peer_limit());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StartDownloadRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    StartDownloadRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StartDownloadRequest::GetClassData() const { return &_class_data_; }


void StartDownloadRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<StartDownloadRequest*>(&to_msg);
  auto& from = static_cast<const StartDownloadRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:v6.services.p2p.StartDownloadRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_client_identity().empty()) {
    _this->_internal_set_client_identity(from._internal_client_identity());
  }
  if (!from._internal_content_identity().empty()) {
    _this->_internal_set_content_identity(from._internal_content_identity());
  }
  if (from._internal_peer_limit() != 0) {
    _this->_internal_set_peer_limit(from._internal_peer_limit());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StartDownloadRequest::CopyFrom(const StartDownloadRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:v6.services.p2p.StartDownloadRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StartDownloadRequest::IsInitialized() const {
  return true;
}

void StartDownloadRequest::InternalSwap(StartDownloadRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.client_identity_, lhs_arena,
      &other->_impl_.client_identity_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.content_identity_, lhs_arena,
      &other->_impl_.content_identity_, rhs_arena
  );
  swap(_impl_.peer_limit_, other->_impl_.peer_limit_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StartDownloadRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_webrtc_5fmanager_2eproto_getter, &descriptor_table_webrtc_5fmanager_2eproto_once,
      file_level_metadata_webrtc_5fmanager_2eproto[0]);
}

// ===================================================================

class RtcPeerInfo::_Internal {
 public:
};

RtcPeerInfo::RtcPeerInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:v6.services.p2p.RtcPeerInfo)
}
RtcPeerInfo::RtcPeerInfo(const RtcPeerInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RtcPeerInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.client_identity_){}
    , decltype(_impl_.content_identity_){}
    , decltype(_impl_.sdp_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.client_identity_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.client_identity_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_client_identity().empty()) {
    _this->_impl_.client_identity_.Set(from._internal_client_identity(), 
      _this->GetArenaForAllocation());
  }
  _impl_.content_identity_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.content_identity_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_content_identity().empty()) {
    _this->_impl_.content_identity_.Set(from._internal_content_identity(), 
      _this->GetArenaForAllocation());
  }
  _impl_.sdp_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sdp_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_sdp().empty()) {
    _this->_impl_.sdp_.Set(from._internal_sdp(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:v6.services.p2p.RtcPeerInfo)
}

inline void RtcPeerInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.client_identity_){}
    , decltype(_impl_.content_identity_){}
    , decltype(_impl_.sdp_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.client_identity_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.client_identity_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.content_identity_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.content_identity_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.sdp_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sdp_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

RtcPeerInfo::~RtcPeerInfo() {
  // @@protoc_insertion_point(destructor:v6.services.p2p.RtcPeerInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RtcPeerInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.client_identity_.Destroy();
  _impl_.content_identity_.Destroy();
  _impl_.sdp_.Destroy();
}

void RtcPeerInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RtcPeerInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:v6.services.p2p.RtcPeerInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.client_identity_.ClearToEmpty();
  _impl_.content_identity_.ClearToEmpty();
  _impl_.sdp_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RtcPeerInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string client_identity = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_client_identity();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "v6.services.p2p.RtcPeerInfo.client_identity"));
        } else
          goto handle_unusual;
        continue;
      // string content_identity = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_content_identity();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "v6.services.p2p.RtcPeerInfo.content_identity"));
        } else
          goto handle_unusual;
        continue;
      // string sdp = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_sdp();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "v6.services.p2p.RtcPeerInfo.sdp"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RtcPeerInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:v6.services.p2p.RtcPeerInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string client_identity = 1;
  if (!this->_internal_client_identity().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_client_identity().data(), static_cast<int>(this->_internal_client_identity().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "v6.services.p2p.RtcPeerInfo.client_identity");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_client_identity(), target);
  }

  // string content_identity = 2;
  if (!this->_internal_content_identity().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_content_identity().data(), static_cast<int>(this->_internal_content_identity().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "v6.services.p2p.RtcPeerInfo.content_identity");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_content_identity(), target);
  }

  // string sdp = 3;
  if (!this->_internal_sdp().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_sdp().data(), static_cast<int>(this->_internal_sdp().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "v6.services.p2p.RtcPeerInfo.sdp");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_sdp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:v6.services.p2p.RtcPeerInfo)
  return target;
}

size_t RtcPeerInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:v6.services.p2p.RtcPeerInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string client_identity = 1;
  if (!this->_internal_client_identity().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_client_identity());
  }

  // string content_identity = 2;
  if (!this->_internal_content_identity().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_content_identity());
  }

  // string sdp = 3;
  if (!this->_internal_sdp().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sdp());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RtcPeerInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RtcPeerInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RtcPeerInfo::GetClassData() const { return &_class_data_; }


void RtcPeerInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RtcPeerInfo*>(&to_msg);
  auto& from = static_cast<const RtcPeerInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:v6.services.p2p.RtcPeerInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_client_identity().empty()) {
    _this->_internal_set_client_identity(from._internal_client_identity());
  }
  if (!from._internal_content_identity().empty()) {
    _this->_internal_set_content_identity(from._internal_content_identity());
  }
  if (!from._internal_sdp().empty()) {
    _this->_internal_set_sdp(from._internal_sdp());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RtcPeerInfo::CopyFrom(const RtcPeerInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:v6.services.p2p.RtcPeerInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RtcPeerInfo::IsInitialized() const {
  return true;
}

void RtcPeerInfo::InternalSwap(RtcPeerInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.client_identity_, lhs_arena,
      &other->_impl_.client_identity_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.content_identity_, lhs_arena,
      &other->_impl_.content_identity_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.sdp_, lhs_arena,
      &other->_impl_.sdp_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata RtcPeerInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_webrtc_5fmanager_2eproto_getter, &descriptor_table_webrtc_5fmanager_2eproto_once,
      file_level_metadata_webrtc_5fmanager_2eproto[1]);
}

// ===================================================================

class StartDownloadResponse::_Internal {
 public:
};

StartDownloadResponse::StartDownloadResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:v6.services.p2p.StartDownloadResponse)
}
StartDownloadResponse::StartDownloadResponse(const StartDownloadResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  StartDownloadResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.peers_){from._impl_.peers_}
    , decltype(_impl_.backend_peers_){from._impl_.backend_peers_}
    , decltype(_impl_.content_identity_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.content_identity_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.content_identity_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_content_identity().empty()) {
    _this->_impl_.content_identity_.Set(from._internal_content_identity(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:v6.services.p2p.StartDownloadResponse)
}

inline void StartDownloadResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.peers_){arena}
    , decltype(_impl_.backend_peers_){arena}
    , decltype(_impl_.content_identity_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.content_identity_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.content_identity_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

StartDownloadResponse::~StartDownloadResponse() {
  // @@protoc_insertion_point(destructor:v6.services.p2p.StartDownloadResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void StartDownloadResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.peers_.~RepeatedPtrField();
  _impl_.backend_peers_.~RepeatedPtrField();
  _impl_.content_identity_.Destroy();
}

void StartDownloadResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void StartDownloadResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:v6.services.p2p.StartDownloadResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.peers_.Clear();
  _impl_.backend_peers_.Clear();
  _impl_.content_identity_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StartDownloadResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string content_identity = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_content_identity();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "v6.services.p2p.StartDownloadResponse.content_identity"));
        } else
          goto handle_unusual;
        continue;
      // repeated .v6.services.p2p.RtcPeerInfo peers = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_peers(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .v6.services.p2p.RtcPeerInfo backend_peers = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_backend_peers(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* StartDownloadResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:v6.services.p2p.StartDownloadResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string content_identity = 1;
  if (!this->_internal_content_identity().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_content_identity().data(), static_cast<int>(this->_internal_content_identity().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "v6.services.p2p.StartDownloadResponse.content_identity");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_content_identity(), target);
  }

  // repeated .v6.services.p2p.RtcPeerInfo peers = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_peers_size()); i < n; i++) {
    const auto& repfield = this->_internal_peers(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .v6.services.p2p.RtcPeerInfo backend_peers = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_backend_peers_size()); i < n; i++) {
    const auto& repfield = this->_internal_backend_peers(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:v6.services.p2p.StartDownloadResponse)
  return target;
}

size_t StartDownloadResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:v6.services.p2p.StartDownloadResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .v6.services.p2p.RtcPeerInfo peers = 2;
  total_size += 1UL * this->_internal_peers_size();
  for (const auto& msg : this->_impl_.peers_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .v6.services.p2p.RtcPeerInfo backend_peers = 3;
  total_size += 1UL * this->_internal_backend_peers_size();
  for (const auto& msg : this->_impl_.backend_peers_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string content_identity = 1;
  if (!this->_internal_content_identity().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_content_identity());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StartDownloadResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    StartDownloadResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StartDownloadResponse::GetClassData() const { return &_class_data_; }


void StartDownloadResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<StartDownloadResponse*>(&to_msg);
  auto& from = static_cast<const StartDownloadResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:v6.services.p2p.StartDownloadResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.peers_.MergeFrom(from._impl_.peers_);
  _this->_impl_.backend_peers_.MergeFrom(from._impl_.backend_peers_);
  if (!from._internal_content_identity().empty()) {
    _this->_internal_set_content_identity(from._internal_content_identity());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StartDownloadResponse::CopyFrom(const StartDownloadResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:v6.services.p2p.StartDownloadResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StartDownloadResponse::IsInitialized() const {
  return true;
}

void StartDownloadResponse::InternalSwap(StartDownloadResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.peers_.InternalSwap(&other->_impl_.peers_);
  _impl_.backend_peers_.InternalSwap(&other->_impl_.backend_peers_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.content_identity_, lhs_arena,
      &other->_impl_.content_identity_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata StartDownloadResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_webrtc_5fmanager_2eproto_getter, &descriptor_table_webrtc_5fmanager_2eproto_once,
      file_level_metadata_webrtc_5fmanager_2eproto[2]);
}

// ===================================================================

class StopDownloadRequest::_Internal {
 public:
};

StopDownloadRequest::StopDownloadRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:v6.services.p2p.StopDownloadRequest)
}
StopDownloadRequest::StopDownloadRequest(const StopDownloadRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  StopDownloadRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.client_identity_){}
    , decltype(_impl_.content_identity_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.client_identity_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.client_identity_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_client_identity().empty()) {
    _this->_impl_.client_identity_.Set(from._internal_client_identity(), 
      _this->GetArenaForAllocation());
  }
  _impl_.content_identity_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.content_identity_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_content_identity().empty()) {
    _this->_impl_.content_identity_.Set(from._internal_content_identity(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:v6.services.p2p.StopDownloadRequest)
}

inline void StopDownloadRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.client_identity_){}
    , decltype(_impl_.content_identity_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.client_identity_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.client_identity_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.content_identity_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.content_identity_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

StopDownloadRequest::~StopDownloadRequest() {
  // @@protoc_insertion_point(destructor:v6.services.p2p.StopDownloadRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void StopDownloadRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.client_identity_.Destroy();
  _impl_.content_identity_.Destroy();
}

void StopDownloadRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void StopDownloadRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:v6.services.p2p.StopDownloadRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.client_identity_.ClearToEmpty();
  _impl_.content_identity_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StopDownloadRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string client_identity = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_client_identity();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "v6.services.p2p.StopDownloadRequest.client_identity"));
        } else
          goto handle_unusual;
        continue;
      // string content_identity = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_content_identity();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "v6.services.p2p.StopDownloadRequest.content_identity"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* StopDownloadRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:v6.services.p2p.StopDownloadRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string client_identity = 1;
  if (!this->_internal_client_identity().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_client_identity().data(), static_cast<int>(this->_internal_client_identity().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "v6.services.p2p.StopDownloadRequest.client_identity");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_client_identity(), target);
  }

  // string content_identity = 2;
  if (!this->_internal_content_identity().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_content_identity().data(), static_cast<int>(this->_internal_content_identity().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "v6.services.p2p.StopDownloadRequest.content_identity");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_content_identity(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:v6.services.p2p.StopDownloadRequest)
  return target;
}

size_t StopDownloadRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:v6.services.p2p.StopDownloadRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string client_identity = 1;
  if (!this->_internal_client_identity().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_client_identity());
  }

  // string content_identity = 2;
  if (!this->_internal_content_identity().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_content_identity());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StopDownloadRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    StopDownloadRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StopDownloadRequest::GetClassData() const { return &_class_data_; }


void StopDownloadRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<StopDownloadRequest*>(&to_msg);
  auto& from = static_cast<const StopDownloadRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:v6.services.p2p.StopDownloadRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_client_identity().empty()) {
    _this->_internal_set_client_identity(from._internal_client_identity());
  }
  if (!from._internal_content_identity().empty()) {
    _this->_internal_set_content_identity(from._internal_content_identity());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StopDownloadRequest::CopyFrom(const StopDownloadRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:v6.services.p2p.StopDownloadRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StopDownloadRequest::IsInitialized() const {
  return true;
}

void StopDownloadRequest::InternalSwap(StopDownloadRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.client_identity_, lhs_arena,
      &other->_impl_.client_identity_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.content_identity_, lhs_arena,
      &other->_impl_.content_identity_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata StopDownloadRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_webrtc_5fmanager_2eproto_getter, &descriptor_table_webrtc_5fmanager_2eproto_once,
      file_level_metadata_webrtc_5fmanager_2eproto[3]);
}

// ===================================================================

class StopDownloadResponse::_Internal {
 public:
};

StopDownloadResponse::StopDownloadResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:v6.services.p2p.StopDownloadResponse)
}
StopDownloadResponse::StopDownloadResponse(const StopDownloadResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  StopDownloadResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.content_identity_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.content_identity_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.content_identity_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_content_identity().empty()) {
    _this->_impl_.content_identity_.Set(from._internal_content_identity(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:v6.services.p2p.StopDownloadResponse)
}

inline void StopDownloadResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.content_identity_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.content_identity_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.content_identity_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

StopDownloadResponse::~StopDownloadResponse() {
  // @@protoc_insertion_point(destructor:v6.services.p2p.StopDownloadResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void StopDownloadResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.content_identity_.Destroy();
}

void StopDownloadResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void StopDownloadResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:v6.services.p2p.StopDownloadResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.content_identity_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StopDownloadResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string content_identity = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_content_identity();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "v6.services.p2p.StopDownloadResponse.content_identity"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* StopDownloadResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:v6.services.p2p.StopDownloadResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string content_identity = 1;
  if (!this->_internal_content_identity().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_content_identity().data(), static_cast<int>(this->_internal_content_identity().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "v6.services.p2p.StopDownloadResponse.content_identity");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_content_identity(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:v6.services.p2p.StopDownloadResponse)
  return target;
}

size_t StopDownloadResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:v6.services.p2p.StopDownloadResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string content_identity = 1;
  if (!this->_internal_content_identity().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_content_identity());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StopDownloadResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    StopDownloadResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StopDownloadResponse::GetClassData() const { return &_class_data_; }


void StopDownloadResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<StopDownloadResponse*>(&to_msg);
  auto& from = static_cast<const StopDownloadResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:v6.services.p2p.StopDownloadResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_content_identity().empty()) {
    _this->_internal_set_content_identity(from._internal_content_identity());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StopDownloadResponse::CopyFrom(const StopDownloadResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:v6.services.p2p.StopDownloadResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StopDownloadResponse::IsInitialized() const {
  return true;
}

void StopDownloadResponse::InternalSwap(StopDownloadResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.content_identity_, lhs_arena,
      &other->_impl_.content_identity_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata StopDownloadResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_webrtc_5fmanager_2eproto_getter, &descriptor_table_webrtc_5fmanager_2eproto_once,
      file_level_metadata_webrtc_5fmanager_2eproto[4]);
}

// ===================================================================

class DisconnectRequest::_Internal {
 public:
};

DisconnectRequest::DisconnectRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:v6.services.p2p.DisconnectRequest)
}
DisconnectRequest::DisconnectRequest(const DisconnectRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DisconnectRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.client_identity_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.client_identity_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.client_identity_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_client_identity().empty()) {
    _this->_impl_.client_identity_.Set(from._internal_client_identity(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:v6.services.p2p.DisconnectRequest)
}

inline void DisconnectRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.client_identity_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.client_identity_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.client_identity_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

DisconnectRequest::~DisconnectRequest() {
  // @@protoc_insertion_point(destructor:v6.services.p2p.DisconnectRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DisconnectRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.client_identity_.Destroy();
}

void DisconnectRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DisconnectRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:v6.services.p2p.DisconnectRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.client_identity_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DisconnectRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string client_identity = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_client_identity();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "v6.services.p2p.DisconnectRequest.client_identity"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DisconnectRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:v6.services.p2p.DisconnectRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string client_identity = 1;
  if (!this->_internal_client_identity().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_client_identity().data(), static_cast<int>(this->_internal_client_identity().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "v6.services.p2p.DisconnectRequest.client_identity");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_client_identity(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:v6.services.p2p.DisconnectRequest)
  return target;
}

size_t DisconnectRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:v6.services.p2p.DisconnectRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string client_identity = 1;
  if (!this->_internal_client_identity().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_client_identity());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DisconnectRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DisconnectRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DisconnectRequest::GetClassData() const { return &_class_data_; }


void DisconnectRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DisconnectRequest*>(&to_msg);
  auto& from = static_cast<const DisconnectRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:v6.services.p2p.DisconnectRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_client_identity().empty()) {
    _this->_internal_set_client_identity(from._internal_client_identity());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DisconnectRequest::CopyFrom(const DisconnectRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:v6.services.p2p.DisconnectRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DisconnectRequest::IsInitialized() const {
  return true;
}

void DisconnectRequest::InternalSwap(DisconnectRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.client_identity_, lhs_arena,
      &other->_impl_.client_identity_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata DisconnectRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_webrtc_5fmanager_2eproto_getter, &descriptor_table_webrtc_5fmanager_2eproto_once,
      file_level_metadata_webrtc_5fmanager_2eproto[5]);
}

// ===================================================================

class DisconnectResponse::_Internal {
 public:
};

DisconnectResponse::DisconnectResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:v6.services.p2p.DisconnectResponse)
}
DisconnectResponse::DisconnectResponse(const DisconnectResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DisconnectResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.client_identity_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.client_identity_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.client_identity_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_client_identity().empty()) {
    _this->_impl_.client_identity_.Set(from._internal_client_identity(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:v6.services.p2p.DisconnectResponse)
}

inline void DisconnectResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.client_identity_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.client_identity_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.client_identity_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

DisconnectResponse::~DisconnectResponse() {
  // @@protoc_insertion_point(destructor:v6.services.p2p.DisconnectResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DisconnectResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.client_identity_.Destroy();
}

void DisconnectResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DisconnectResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:v6.services.p2p.DisconnectResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.client_identity_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DisconnectResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string client_identity = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_client_identity();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "v6.services.p2p.DisconnectResponse.client_identity"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DisconnectResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:v6.services.p2p.DisconnectResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string client_identity = 1;
  if (!this->_internal_client_identity().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_client_identity().data(), static_cast<int>(this->_internal_client_identity().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "v6.services.p2p.DisconnectResponse.client_identity");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_client_identity(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:v6.services.p2p.DisconnectResponse)
  return target;
}

size_t DisconnectResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:v6.services.p2p.DisconnectResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string client_identity = 1;
  if (!this->_internal_client_identity().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_client_identity());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DisconnectResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DisconnectResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DisconnectResponse::GetClassData() const { return &_class_data_; }


void DisconnectResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DisconnectResponse*>(&to_msg);
  auto& from = static_cast<const DisconnectResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:v6.services.p2p.DisconnectResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_client_identity().empty()) {
    _this->_internal_set_client_identity(from._internal_client_identity());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DisconnectResponse::CopyFrom(const DisconnectResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:v6.services.p2p.DisconnectResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DisconnectResponse::IsInitialized() const {
  return true;
}

void DisconnectResponse::InternalSwap(DisconnectResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.client_identity_, lhs_arena,
      &other->_impl_.client_identity_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata DisconnectResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_webrtc_5fmanager_2eproto_getter, &descriptor_table_webrtc_5fmanager_2eproto_once,
      file_level_metadata_webrtc_5fmanager_2eproto[6]);
}

// ===================================================================

class SendPeerIceCandidateRequest::_Internal {
 public:
};

SendPeerIceCandidateRequest::SendPeerIceCandidateRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:v6.services.p2p.SendPeerIceCandidateRequest)
}
SendPeerIceCandidateRequest::SendPeerIceCandidateRequest(const SendPeerIceCandidateRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SendPeerIceCandidateRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.client_identity_){}
    , decltype(_impl_.candidate_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.client_identity_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.client_identity_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_client_identity().empty()) {
    _this->_impl_.client_identity_.Set(from._internal_client_identity(), 
      _this->GetArenaForAllocation());
  }
  _impl_.candidate_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.candidate_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_candidate().empty()) {
    _this->_impl_.candidate_.Set(from._internal_candidate(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:v6.services.p2p.SendPeerIceCandidateRequest)
}

inline void SendPeerIceCandidateRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.client_identity_){}
    , decltype(_impl_.candidate_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.client_identity_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.client_identity_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.candidate_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.candidate_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SendPeerIceCandidateRequest::~SendPeerIceCandidateRequest() {
  // @@protoc_insertion_point(destructor:v6.services.p2p.SendPeerIceCandidateRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SendPeerIceCandidateRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.client_identity_.Destroy();
  _impl_.candidate_.Destroy();
}

void SendPeerIceCandidateRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SendPeerIceCandidateRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:v6.services.p2p.SendPeerIceCandidateRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.client_identity_.ClearToEmpty();
  _impl_.candidate_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SendPeerIceCandidateRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string client_identity = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_client_identity();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "v6.services.p2p.SendPeerIceCandidateRequest.client_identity"));
        } else
          goto handle_unusual;
        continue;
      // string candidate = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_candidate();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "v6.services.p2p.SendPeerIceCandidateRequest.candidate"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SendPeerIceCandidateRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:v6.services.p2p.SendPeerIceCandidateRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string client_identity = 1;
  if (!this->_internal_client_identity().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_client_identity().data(), static_cast<int>(this->_internal_client_identity().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "v6.services.p2p.SendPeerIceCandidateRequest.client_identity");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_client_identity(), target);
  }

  // string candidate = 3;
  if (!this->_internal_candidate().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_candidate().data(), static_cast<int>(this->_internal_candidate().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "v6.services.p2p.SendPeerIceCandidateRequest.candidate");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_candidate(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:v6.services.p2p.SendPeerIceCandidateRequest)
  return target;
}

size_t SendPeerIceCandidateRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:v6.services.p2p.SendPeerIceCandidateRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string client_identity = 1;
  if (!this->_internal_client_identity().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_client_identity());
  }

  // string candidate = 3;
  if (!this->_internal_candidate().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_candidate());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SendPeerIceCandidateRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SendPeerIceCandidateRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SendPeerIceCandidateRequest::GetClassData() const { return &_class_data_; }


void SendPeerIceCandidateRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SendPeerIceCandidateRequest*>(&to_msg);
  auto& from = static_cast<const SendPeerIceCandidateRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:v6.services.p2p.SendPeerIceCandidateRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_client_identity().empty()) {
    _this->_internal_set_client_identity(from._internal_client_identity());
  }
  if (!from._internal_candidate().empty()) {
    _this->_internal_set_candidate(from._internal_candidate());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SendPeerIceCandidateRequest::CopyFrom(const SendPeerIceCandidateRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:v6.services.p2p.SendPeerIceCandidateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SendPeerIceCandidateRequest::IsInitialized() const {
  return true;
}

void SendPeerIceCandidateRequest::InternalSwap(SendPeerIceCandidateRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.client_identity_, lhs_arena,
      &other->_impl_.client_identity_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.candidate_, lhs_arena,
      &other->_impl_.candidate_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata SendPeerIceCandidateRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_webrtc_5fmanager_2eproto_getter, &descriptor_table_webrtc_5fmanager_2eproto_once,
      file_level_metadata_webrtc_5fmanager_2eproto[7]);
}

// ===================================================================

class SendPeerIceCandidateResponse::_Internal {
 public:
};

SendPeerIceCandidateResponse::SendPeerIceCandidateResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:v6.services.p2p.SendPeerIceCandidateResponse)
}
SendPeerIceCandidateResponse::SendPeerIceCandidateResponse(const SendPeerIceCandidateResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SendPeerIceCandidateResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.client_identity_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.client_identity_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.client_identity_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_client_identity().empty()) {
    _this->_impl_.client_identity_.Set(from._internal_client_identity(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:v6.services.p2p.SendPeerIceCandidateResponse)
}

inline void SendPeerIceCandidateResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.client_identity_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.client_identity_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.client_identity_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SendPeerIceCandidateResponse::~SendPeerIceCandidateResponse() {
  // @@protoc_insertion_point(destructor:v6.services.p2p.SendPeerIceCandidateResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SendPeerIceCandidateResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.client_identity_.Destroy();
}

void SendPeerIceCandidateResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SendPeerIceCandidateResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:v6.services.p2p.SendPeerIceCandidateResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.client_identity_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SendPeerIceCandidateResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string client_identity = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_client_identity();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "v6.services.p2p.SendPeerIceCandidateResponse.client_identity"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SendPeerIceCandidateResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:v6.services.p2p.SendPeerIceCandidateResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string client_identity = 1;
  if (!this->_internal_client_identity().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_client_identity().data(), static_cast<int>(this->_internal_client_identity().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "v6.services.p2p.SendPeerIceCandidateResponse.client_identity");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_client_identity(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:v6.services.p2p.SendPeerIceCandidateResponse)
  return target;
}

size_t SendPeerIceCandidateResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:v6.services.p2p.SendPeerIceCandidateResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string client_identity = 1;
  if (!this->_internal_client_identity().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_client_identity());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SendPeerIceCandidateResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SendPeerIceCandidateResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SendPeerIceCandidateResponse::GetClassData() const { return &_class_data_; }


void SendPeerIceCandidateResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SendPeerIceCandidateResponse*>(&to_msg);
  auto& from = static_cast<const SendPeerIceCandidateResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:v6.services.p2p.SendPeerIceCandidateResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_client_identity().empty()) {
    _this->_internal_set_client_identity(from._internal_client_identity());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SendPeerIceCandidateResponse::CopyFrom(const SendPeerIceCandidateResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:v6.services.p2p.SendPeerIceCandidateResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SendPeerIceCandidateResponse::IsInitialized() const {
  return true;
}

void SendPeerIceCandidateResponse::InternalSwap(SendPeerIceCandidateResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.client_identity_, lhs_arena,
      &other->_impl_.client_identity_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata SendPeerIceCandidateResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_webrtc_5fmanager_2eproto_getter, &descriptor_table_webrtc_5fmanager_2eproto_once,
      file_level_metadata_webrtc_5fmanager_2eproto[8]);
}

// ===================================================================

class ReceiveRequest::_Internal {
 public:
};

ReceiveRequest::ReceiveRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:v6.services.p2p.ReceiveRequest)
}
ReceiveRequest::ReceiveRequest(const ReceiveRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ReceiveRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id().empty()) {
    _this->_impl_.id_.Set(from._internal_id(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:v6.services.p2p.ReceiveRequest)
}

inline void ReceiveRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ReceiveRequest::~ReceiveRequest() {
  // @@protoc_insertion_point(destructor:v6.services.p2p.ReceiveRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ReceiveRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.id_.Destroy();
}

void ReceiveRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ReceiveRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:v6.services.p2p.ReceiveRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReceiveRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "v6.services.p2p.ReceiveRequest.id"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ReceiveRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:v6.services.p2p.ReceiveRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "v6.services.p2p.ReceiveRequest.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:v6.services.p2p.ReceiveRequest)
  return target;
}

size_t ReceiveRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:v6.services.p2p.ReceiveRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ReceiveRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ReceiveRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ReceiveRequest::GetClassData() const { return &_class_data_; }


void ReceiveRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ReceiveRequest*>(&to_msg);
  auto& from = static_cast<const ReceiveRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:v6.services.p2p.ReceiveRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_id().empty()) {
    _this->_internal_set_id(from._internal_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ReceiveRequest::CopyFrom(const ReceiveRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:v6.services.p2p.ReceiveRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReceiveRequest::IsInitialized() const {
  return true;
}

void ReceiveRequest::InternalSwap(ReceiveRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.id_, lhs_arena,
      &other->_impl_.id_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata ReceiveRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_webrtc_5fmanager_2eproto_getter, &descriptor_table_webrtc_5fmanager_2eproto_once,
      file_level_metadata_webrtc_5fmanager_2eproto[9]);
}

// ===================================================================

class ReceiveResponse::_Internal {
 public:
};

ReceiveResponse::ReceiveResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:v6.services.p2p.ReceiveResponse)
}
ReceiveResponse::ReceiveResponse(const ReceiveResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ReceiveResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.data_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_data().empty()) {
    _this->_impl_.data_.Set(from._internal_data(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:v6.services.p2p.ReceiveResponse)
}

inline void ReceiveResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.data_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ReceiveResponse::~ReceiveResponse() {
  // @@protoc_insertion_point(destructor:v6.services.p2p.ReceiveResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ReceiveResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.data_.Destroy();
}

void ReceiveResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ReceiveResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:v6.services.p2p.ReceiveResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.data_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReceiveResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_data();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "v6.services.p2p.ReceiveResponse.data"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ReceiveResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:v6.services.p2p.ReceiveResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string data = 1;
  if (!this->_internal_data().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_data().data(), static_cast<int>(this->_internal_data().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "v6.services.p2p.ReceiveResponse.data");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:v6.services.p2p.ReceiveResponse)
  return target;
}

size_t ReceiveResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:v6.services.p2p.ReceiveResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string data = 1;
  if (!this->_internal_data().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_data());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ReceiveResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ReceiveResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ReceiveResponse::GetClassData() const { return &_class_data_; }


void ReceiveResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ReceiveResponse*>(&to_msg);
  auto& from = static_cast<const ReceiveResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:v6.services.p2p.ReceiveResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_data().empty()) {
    _this->_internal_set_data(from._internal_data());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ReceiveResponse::CopyFrom(const ReceiveResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:v6.services.p2p.ReceiveResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReceiveResponse::IsInitialized() const {
  return true;
}

void ReceiveResponse::InternalSwap(ReceiveResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.data_, lhs_arena,
      &other->_impl_.data_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata ReceiveResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_webrtc_5fmanager_2eproto_getter, &descriptor_table_webrtc_5fmanager_2eproto_once,
      file_level_metadata_webrtc_5fmanager_2eproto[10]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace p2p
}  // namespace services
}  // namespace v6
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::v6::services::p2p::StartDownloadRequest*
Arena::CreateMaybeMessage< ::v6::services::p2p::StartDownloadRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::v6::services::p2p::StartDownloadRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::v6::services::p2p::RtcPeerInfo*
Arena::CreateMaybeMessage< ::v6::services::p2p::RtcPeerInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::v6::services::p2p::RtcPeerInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::v6::services::p2p::StartDownloadResponse*
Arena::CreateMaybeMessage< ::v6::services::p2p::StartDownloadResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::v6::services::p2p::StartDownloadResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::v6::services::p2p::StopDownloadRequest*
Arena::CreateMaybeMessage< ::v6::services::p2p::StopDownloadRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::v6::services::p2p::StopDownloadRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::v6::services::p2p::StopDownloadResponse*
Arena::CreateMaybeMessage< ::v6::services::p2p::StopDownloadResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::v6::services::p2p::StopDownloadResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::v6::services::p2p::DisconnectRequest*
Arena::CreateMaybeMessage< ::v6::services::p2p::DisconnectRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::v6::services::p2p::DisconnectRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::v6::services::p2p::DisconnectResponse*
Arena::CreateMaybeMessage< ::v6::services::p2p::DisconnectResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::v6::services::p2p::DisconnectResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::v6::services::p2p::SendPeerIceCandidateRequest*
Arena::CreateMaybeMessage< ::v6::services::p2p::SendPeerIceCandidateRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::v6::services::p2p::SendPeerIceCandidateRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::v6::services::p2p::SendPeerIceCandidateResponse*
Arena::CreateMaybeMessage< ::v6::services::p2p::SendPeerIceCandidateResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::v6::services::p2p::SendPeerIceCandidateResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::v6::services::p2p::ReceiveRequest*
Arena::CreateMaybeMessage< ::v6::services::p2p::ReceiveRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::v6::services::p2p::ReceiveRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::v6::services::p2p::ReceiveResponse*
Arena::CreateMaybeMessage< ::v6::services::p2p::ReceiveResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::v6::services::p2p::ReceiveResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
