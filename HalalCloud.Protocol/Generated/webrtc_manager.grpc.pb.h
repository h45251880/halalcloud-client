// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: webrtc_manager.proto
#ifndef GRPC_webrtc_5fmanager_2eproto__INCLUDED
#define GRPC_webrtc_5fmanager_2eproto__INCLUDED

#include "webrtc_manager.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>

namespace v6 {
namespace services {
namespace p2p {

class WebRTCManageService final {
 public:
  static constexpr char const* service_full_name() {
    return "v6.services.p2p.WebRTCManageService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status StartDownload(::grpc::ClientContext* context, const ::v6::services::p2p::StartDownloadRequest& request, ::v6::services::p2p::StartDownloadResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::v6::services::p2p::StartDownloadResponse>> AsyncStartDownload(::grpc::ClientContext* context, const ::v6::services::p2p::StartDownloadRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::v6::services::p2p::StartDownloadResponse>>(AsyncStartDownloadRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::v6::services::p2p::StartDownloadResponse>> PrepareAsyncStartDownload(::grpc::ClientContext* context, const ::v6::services::p2p::StartDownloadRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::v6::services::p2p::StartDownloadResponse>>(PrepareAsyncStartDownloadRaw(context, request, cq));
    }
    virtual ::grpc::Status StopDownload(::grpc::ClientContext* context, const ::v6::services::p2p::StopDownloadRequest& request, ::v6::services::p2p::StopDownloadResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::v6::services::p2p::StopDownloadResponse>> AsyncStopDownload(::grpc::ClientContext* context, const ::v6::services::p2p::StopDownloadRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::v6::services::p2p::StopDownloadResponse>>(AsyncStopDownloadRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::v6::services::p2p::StopDownloadResponse>> PrepareAsyncStopDownload(::grpc::ClientContext* context, const ::v6::services::p2p::StopDownloadRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::v6::services::p2p::StopDownloadResponse>>(PrepareAsyncStopDownloadRaw(context, request, cq));
    }
    virtual ::grpc::Status Disconnect(::grpc::ClientContext* context, const ::v6::services::p2p::DisconnectRequest& request, ::v6::services::p2p::DisconnectResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::v6::services::p2p::DisconnectResponse>> AsyncDisconnect(::grpc::ClientContext* context, const ::v6::services::p2p::DisconnectRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::v6::services::p2p::DisconnectResponse>>(AsyncDisconnectRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::v6::services::p2p::DisconnectResponse>> PrepareAsyncDisconnect(::grpc::ClientContext* context, const ::v6::services::p2p::DisconnectRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::v6::services::p2p::DisconnectResponse>>(PrepareAsyncDisconnectRaw(context, request, cq));
    }
    virtual ::grpc::Status SendPeerIceCandidate(::grpc::ClientContext* context, const ::v6::services::p2p::SendPeerIceCandidateRequest& request, ::v6::services::p2p::SendPeerIceCandidateResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::v6::services::p2p::SendPeerIceCandidateResponse>> AsyncSendPeerIceCandidate(::grpc::ClientContext* context, const ::v6::services::p2p::SendPeerIceCandidateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::v6::services::p2p::SendPeerIceCandidateResponse>>(AsyncSendPeerIceCandidateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::v6::services::p2p::SendPeerIceCandidateResponse>> PrepareAsyncSendPeerIceCandidate(::grpc::ClientContext* context, const ::v6::services::p2p::SendPeerIceCandidateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::v6::services::p2p::SendPeerIceCandidateResponse>>(PrepareAsyncSendPeerIceCandidateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderInterface< ::v6::services::p2p::ReceiveResponse>> Receive(::grpc::ClientContext* context, const ::v6::services::p2p::ReceiveRequest& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::v6::services::p2p::ReceiveResponse>>(ReceiveRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::v6::services::p2p::ReceiveResponse>> AsyncReceive(::grpc::ClientContext* context, const ::v6::services::p2p::ReceiveRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::v6::services::p2p::ReceiveResponse>>(AsyncReceiveRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::v6::services::p2p::ReceiveResponse>> PrepareAsyncReceive(::grpc::ClientContext* context, const ::v6::services::p2p::ReceiveRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::v6::services::p2p::ReceiveResponse>>(PrepareAsyncReceiveRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void StartDownload(::grpc::ClientContext* context, const ::v6::services::p2p::StartDownloadRequest* request, ::v6::services::p2p::StartDownloadResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void StartDownload(::grpc::ClientContext* context, const ::v6::services::p2p::StartDownloadRequest* request, ::v6::services::p2p::StartDownloadResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void StopDownload(::grpc::ClientContext* context, const ::v6::services::p2p::StopDownloadRequest* request, ::v6::services::p2p::StopDownloadResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void StopDownload(::grpc::ClientContext* context, const ::v6::services::p2p::StopDownloadRequest* request, ::v6::services::p2p::StopDownloadResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void Disconnect(::grpc::ClientContext* context, const ::v6::services::p2p::DisconnectRequest* request, ::v6::services::p2p::DisconnectResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Disconnect(::grpc::ClientContext* context, const ::v6::services::p2p::DisconnectRequest* request, ::v6::services::p2p::DisconnectResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void SendPeerIceCandidate(::grpc::ClientContext* context, const ::v6::services::p2p::SendPeerIceCandidateRequest* request, ::v6::services::p2p::SendPeerIceCandidateResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SendPeerIceCandidate(::grpc::ClientContext* context, const ::v6::services::p2p::SendPeerIceCandidateRequest* request, ::v6::services::p2p::SendPeerIceCandidateResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void Receive(::grpc::ClientContext* context, const ::v6::services::p2p::ReceiveRequest* request, ::grpc::ClientReadReactor< ::v6::services::p2p::ReceiveResponse>* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::v6::services::p2p::StartDownloadResponse>* AsyncStartDownloadRaw(::grpc::ClientContext* context, const ::v6::services::p2p::StartDownloadRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::v6::services::p2p::StartDownloadResponse>* PrepareAsyncStartDownloadRaw(::grpc::ClientContext* context, const ::v6::services::p2p::StartDownloadRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::v6::services::p2p::StopDownloadResponse>* AsyncStopDownloadRaw(::grpc::ClientContext* context, const ::v6::services::p2p::StopDownloadRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::v6::services::p2p::StopDownloadResponse>* PrepareAsyncStopDownloadRaw(::grpc::ClientContext* context, const ::v6::services::p2p::StopDownloadRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::v6::services::p2p::DisconnectResponse>* AsyncDisconnectRaw(::grpc::ClientContext* context, const ::v6::services::p2p::DisconnectRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::v6::services::p2p::DisconnectResponse>* PrepareAsyncDisconnectRaw(::grpc::ClientContext* context, const ::v6::services::p2p::DisconnectRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::v6::services::p2p::SendPeerIceCandidateResponse>* AsyncSendPeerIceCandidateRaw(::grpc::ClientContext* context, const ::v6::services::p2p::SendPeerIceCandidateRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::v6::services::p2p::SendPeerIceCandidateResponse>* PrepareAsyncSendPeerIceCandidateRaw(::grpc::ClientContext* context, const ::v6::services::p2p::SendPeerIceCandidateRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::v6::services::p2p::ReceiveResponse>* ReceiveRaw(::grpc::ClientContext* context, const ::v6::services::p2p::ReceiveRequest& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::v6::services::p2p::ReceiveResponse>* AsyncReceiveRaw(::grpc::ClientContext* context, const ::v6::services::p2p::ReceiveRequest& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::v6::services::p2p::ReceiveResponse>* PrepareAsyncReceiveRaw(::grpc::ClientContext* context, const ::v6::services::p2p::ReceiveRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status StartDownload(::grpc::ClientContext* context, const ::v6::services::p2p::StartDownloadRequest& request, ::v6::services::p2p::StartDownloadResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::v6::services::p2p::StartDownloadResponse>> AsyncStartDownload(::grpc::ClientContext* context, const ::v6::services::p2p::StartDownloadRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::v6::services::p2p::StartDownloadResponse>>(AsyncStartDownloadRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::v6::services::p2p::StartDownloadResponse>> PrepareAsyncStartDownload(::grpc::ClientContext* context, const ::v6::services::p2p::StartDownloadRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::v6::services::p2p::StartDownloadResponse>>(PrepareAsyncStartDownloadRaw(context, request, cq));
    }
    ::grpc::Status StopDownload(::grpc::ClientContext* context, const ::v6::services::p2p::StopDownloadRequest& request, ::v6::services::p2p::StopDownloadResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::v6::services::p2p::StopDownloadResponse>> AsyncStopDownload(::grpc::ClientContext* context, const ::v6::services::p2p::StopDownloadRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::v6::services::p2p::StopDownloadResponse>>(AsyncStopDownloadRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::v6::services::p2p::StopDownloadResponse>> PrepareAsyncStopDownload(::grpc::ClientContext* context, const ::v6::services::p2p::StopDownloadRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::v6::services::p2p::StopDownloadResponse>>(PrepareAsyncStopDownloadRaw(context, request, cq));
    }
    ::grpc::Status Disconnect(::grpc::ClientContext* context, const ::v6::services::p2p::DisconnectRequest& request, ::v6::services::p2p::DisconnectResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::v6::services::p2p::DisconnectResponse>> AsyncDisconnect(::grpc::ClientContext* context, const ::v6::services::p2p::DisconnectRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::v6::services::p2p::DisconnectResponse>>(AsyncDisconnectRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::v6::services::p2p::DisconnectResponse>> PrepareAsyncDisconnect(::grpc::ClientContext* context, const ::v6::services::p2p::DisconnectRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::v6::services::p2p::DisconnectResponse>>(PrepareAsyncDisconnectRaw(context, request, cq));
    }
    ::grpc::Status SendPeerIceCandidate(::grpc::ClientContext* context, const ::v6::services::p2p::SendPeerIceCandidateRequest& request, ::v6::services::p2p::SendPeerIceCandidateResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::v6::services::p2p::SendPeerIceCandidateResponse>> AsyncSendPeerIceCandidate(::grpc::ClientContext* context, const ::v6::services::p2p::SendPeerIceCandidateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::v6::services::p2p::SendPeerIceCandidateResponse>>(AsyncSendPeerIceCandidateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::v6::services::p2p::SendPeerIceCandidateResponse>> PrepareAsyncSendPeerIceCandidate(::grpc::ClientContext* context, const ::v6::services::p2p::SendPeerIceCandidateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::v6::services::p2p::SendPeerIceCandidateResponse>>(PrepareAsyncSendPeerIceCandidateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::v6::services::p2p::ReceiveResponse>> Receive(::grpc::ClientContext* context, const ::v6::services::p2p::ReceiveRequest& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::v6::services::p2p::ReceiveResponse>>(ReceiveRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::v6::services::p2p::ReceiveResponse>> AsyncReceive(::grpc::ClientContext* context, const ::v6::services::p2p::ReceiveRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::v6::services::p2p::ReceiveResponse>>(AsyncReceiveRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::v6::services::p2p::ReceiveResponse>> PrepareAsyncReceive(::grpc::ClientContext* context, const ::v6::services::p2p::ReceiveRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::v6::services::p2p::ReceiveResponse>>(PrepareAsyncReceiveRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void StartDownload(::grpc::ClientContext* context, const ::v6::services::p2p::StartDownloadRequest* request, ::v6::services::p2p::StartDownloadResponse* response, std::function<void(::grpc::Status)>) override;
      void StartDownload(::grpc::ClientContext* context, const ::v6::services::p2p::StartDownloadRequest* request, ::v6::services::p2p::StartDownloadResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void StopDownload(::grpc::ClientContext* context, const ::v6::services::p2p::StopDownloadRequest* request, ::v6::services::p2p::StopDownloadResponse* response, std::function<void(::grpc::Status)>) override;
      void StopDownload(::grpc::ClientContext* context, const ::v6::services::p2p::StopDownloadRequest* request, ::v6::services::p2p::StopDownloadResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void Disconnect(::grpc::ClientContext* context, const ::v6::services::p2p::DisconnectRequest* request, ::v6::services::p2p::DisconnectResponse* response, std::function<void(::grpc::Status)>) override;
      void Disconnect(::grpc::ClientContext* context, const ::v6::services::p2p::DisconnectRequest* request, ::v6::services::p2p::DisconnectResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void SendPeerIceCandidate(::grpc::ClientContext* context, const ::v6::services::p2p::SendPeerIceCandidateRequest* request, ::v6::services::p2p::SendPeerIceCandidateResponse* response, std::function<void(::grpc::Status)>) override;
      void SendPeerIceCandidate(::grpc::ClientContext* context, const ::v6::services::p2p::SendPeerIceCandidateRequest* request, ::v6::services::p2p::SendPeerIceCandidateResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void Receive(::grpc::ClientContext* context, const ::v6::services::p2p::ReceiveRequest* request, ::grpc::ClientReadReactor< ::v6::services::p2p::ReceiveResponse>* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::v6::services::p2p::StartDownloadResponse>* AsyncStartDownloadRaw(::grpc::ClientContext* context, const ::v6::services::p2p::StartDownloadRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::v6::services::p2p::StartDownloadResponse>* PrepareAsyncStartDownloadRaw(::grpc::ClientContext* context, const ::v6::services::p2p::StartDownloadRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::v6::services::p2p::StopDownloadResponse>* AsyncStopDownloadRaw(::grpc::ClientContext* context, const ::v6::services::p2p::StopDownloadRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::v6::services::p2p::StopDownloadResponse>* PrepareAsyncStopDownloadRaw(::grpc::ClientContext* context, const ::v6::services::p2p::StopDownloadRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::v6::services::p2p::DisconnectResponse>* AsyncDisconnectRaw(::grpc::ClientContext* context, const ::v6::services::p2p::DisconnectRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::v6::services::p2p::DisconnectResponse>* PrepareAsyncDisconnectRaw(::grpc::ClientContext* context, const ::v6::services::p2p::DisconnectRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::v6::services::p2p::SendPeerIceCandidateResponse>* AsyncSendPeerIceCandidateRaw(::grpc::ClientContext* context, const ::v6::services::p2p::SendPeerIceCandidateRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::v6::services::p2p::SendPeerIceCandidateResponse>* PrepareAsyncSendPeerIceCandidateRaw(::grpc::ClientContext* context, const ::v6::services::p2p::SendPeerIceCandidateRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::v6::services::p2p::ReceiveResponse>* ReceiveRaw(::grpc::ClientContext* context, const ::v6::services::p2p::ReceiveRequest& request) override;
    ::grpc::ClientAsyncReader< ::v6::services::p2p::ReceiveResponse>* AsyncReceiveRaw(::grpc::ClientContext* context, const ::v6::services::p2p::ReceiveRequest& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::v6::services::p2p::ReceiveResponse>* PrepareAsyncReceiveRaw(::grpc::ClientContext* context, const ::v6::services::p2p::ReceiveRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_StartDownload_;
    const ::grpc::internal::RpcMethod rpcmethod_StopDownload_;
    const ::grpc::internal::RpcMethod rpcmethod_Disconnect_;
    const ::grpc::internal::RpcMethod rpcmethod_SendPeerIceCandidate_;
    const ::grpc::internal::RpcMethod rpcmethod_Receive_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status StartDownload(::grpc::ServerContext* context, const ::v6::services::p2p::StartDownloadRequest* request, ::v6::services::p2p::StartDownloadResponse* response);
    virtual ::grpc::Status StopDownload(::grpc::ServerContext* context, const ::v6::services::p2p::StopDownloadRequest* request, ::v6::services::p2p::StopDownloadResponse* response);
    virtual ::grpc::Status Disconnect(::grpc::ServerContext* context, const ::v6::services::p2p::DisconnectRequest* request, ::v6::services::p2p::DisconnectResponse* response);
    virtual ::grpc::Status SendPeerIceCandidate(::grpc::ServerContext* context, const ::v6::services::p2p::SendPeerIceCandidateRequest* request, ::v6::services::p2p::SendPeerIceCandidateResponse* response);
    virtual ::grpc::Status Receive(::grpc::ServerContext* context, const ::v6::services::p2p::ReceiveRequest* request, ::grpc::ServerWriter< ::v6::services::p2p::ReceiveResponse>* writer);
  };
  template <class BaseClass>
  class WithAsyncMethod_StartDownload : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_StartDownload() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_StartDownload() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StartDownload(::grpc::ServerContext* /*context*/, const ::v6::services::p2p::StartDownloadRequest* /*request*/, ::v6::services::p2p::StartDownloadResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStartDownload(::grpc::ServerContext* context, ::v6::services::p2p::StartDownloadRequest* request, ::grpc::ServerAsyncResponseWriter< ::v6::services::p2p::StartDownloadResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_StopDownload : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_StopDownload() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_StopDownload() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StopDownload(::grpc::ServerContext* /*context*/, const ::v6::services::p2p::StopDownloadRequest* /*request*/, ::v6::services::p2p::StopDownloadResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStopDownload(::grpc::ServerContext* context, ::v6::services::p2p::StopDownloadRequest* request, ::grpc::ServerAsyncResponseWriter< ::v6::services::p2p::StopDownloadResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Disconnect : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Disconnect() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_Disconnect() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Disconnect(::grpc::ServerContext* /*context*/, const ::v6::services::p2p::DisconnectRequest* /*request*/, ::v6::services::p2p::DisconnectResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDisconnect(::grpc::ServerContext* context, ::v6::services::p2p::DisconnectRequest* request, ::grpc::ServerAsyncResponseWriter< ::v6::services::p2p::DisconnectResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SendPeerIceCandidate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SendPeerIceCandidate() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_SendPeerIceCandidate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendPeerIceCandidate(::grpc::ServerContext* /*context*/, const ::v6::services::p2p::SendPeerIceCandidateRequest* /*request*/, ::v6::services::p2p::SendPeerIceCandidateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSendPeerIceCandidate(::grpc::ServerContext* context, ::v6::services::p2p::SendPeerIceCandidateRequest* request, ::grpc::ServerAsyncResponseWriter< ::v6::services::p2p::SendPeerIceCandidateResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Receive : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Receive() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_Receive() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Receive(::grpc::ServerContext* /*context*/, const ::v6::services::p2p::ReceiveRequest* /*request*/, ::grpc::ServerWriter< ::v6::services::p2p::ReceiveResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestReceive(::grpc::ServerContext* context, ::v6::services::p2p::ReceiveRequest* request, ::grpc::ServerAsyncWriter< ::v6::services::p2p::ReceiveResponse>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(4, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_StartDownload<WithAsyncMethod_StopDownload<WithAsyncMethod_Disconnect<WithAsyncMethod_SendPeerIceCandidate<WithAsyncMethod_Receive<Service > > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_StartDownload : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_StartDownload() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::v6::services::p2p::StartDownloadRequest, ::v6::services::p2p::StartDownloadResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::v6::services::p2p::StartDownloadRequest* request, ::v6::services::p2p::StartDownloadResponse* response) { return this->StartDownload(context, request, response); }));}
    void SetMessageAllocatorFor_StartDownload(
        ::grpc::MessageAllocator< ::v6::services::p2p::StartDownloadRequest, ::v6::services::p2p::StartDownloadResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::v6::services::p2p::StartDownloadRequest, ::v6::services::p2p::StartDownloadResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_StartDownload() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StartDownload(::grpc::ServerContext* /*context*/, const ::v6::services::p2p::StartDownloadRequest* /*request*/, ::v6::services::p2p::StartDownloadResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* StartDownload(
      ::grpc::CallbackServerContext* /*context*/, const ::v6::services::p2p::StartDownloadRequest* /*request*/, ::v6::services::p2p::StartDownloadResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_StopDownload : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_StopDownload() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::v6::services::p2p::StopDownloadRequest, ::v6::services::p2p::StopDownloadResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::v6::services::p2p::StopDownloadRequest* request, ::v6::services::p2p::StopDownloadResponse* response) { return this->StopDownload(context, request, response); }));}
    void SetMessageAllocatorFor_StopDownload(
        ::grpc::MessageAllocator< ::v6::services::p2p::StopDownloadRequest, ::v6::services::p2p::StopDownloadResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::v6::services::p2p::StopDownloadRequest, ::v6::services::p2p::StopDownloadResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_StopDownload() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StopDownload(::grpc::ServerContext* /*context*/, const ::v6::services::p2p::StopDownloadRequest* /*request*/, ::v6::services::p2p::StopDownloadResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* StopDownload(
      ::grpc::CallbackServerContext* /*context*/, const ::v6::services::p2p::StopDownloadRequest* /*request*/, ::v6::services::p2p::StopDownloadResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_Disconnect : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Disconnect() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::v6::services::p2p::DisconnectRequest, ::v6::services::p2p::DisconnectResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::v6::services::p2p::DisconnectRequest* request, ::v6::services::p2p::DisconnectResponse* response) { return this->Disconnect(context, request, response); }));}
    void SetMessageAllocatorFor_Disconnect(
        ::grpc::MessageAllocator< ::v6::services::p2p::DisconnectRequest, ::v6::services::p2p::DisconnectResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::v6::services::p2p::DisconnectRequest, ::v6::services::p2p::DisconnectResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Disconnect() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Disconnect(::grpc::ServerContext* /*context*/, const ::v6::services::p2p::DisconnectRequest* /*request*/, ::v6::services::p2p::DisconnectResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Disconnect(
      ::grpc::CallbackServerContext* /*context*/, const ::v6::services::p2p::DisconnectRequest* /*request*/, ::v6::services::p2p::DisconnectResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_SendPeerIceCandidate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_SendPeerIceCandidate() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::v6::services::p2p::SendPeerIceCandidateRequest, ::v6::services::p2p::SendPeerIceCandidateResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::v6::services::p2p::SendPeerIceCandidateRequest* request, ::v6::services::p2p::SendPeerIceCandidateResponse* response) { return this->SendPeerIceCandidate(context, request, response); }));}
    void SetMessageAllocatorFor_SendPeerIceCandidate(
        ::grpc::MessageAllocator< ::v6::services::p2p::SendPeerIceCandidateRequest, ::v6::services::p2p::SendPeerIceCandidateResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::v6::services::p2p::SendPeerIceCandidateRequest, ::v6::services::p2p::SendPeerIceCandidateResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_SendPeerIceCandidate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendPeerIceCandidate(::grpc::ServerContext* /*context*/, const ::v6::services::p2p::SendPeerIceCandidateRequest* /*request*/, ::v6::services::p2p::SendPeerIceCandidateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SendPeerIceCandidate(
      ::grpc::CallbackServerContext* /*context*/, const ::v6::services::p2p::SendPeerIceCandidateRequest* /*request*/, ::v6::services::p2p::SendPeerIceCandidateResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_Receive : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Receive() {
      ::grpc::Service::MarkMethodCallback(4,
          new ::grpc::internal::CallbackServerStreamingHandler< ::v6::services::p2p::ReceiveRequest, ::v6::services::p2p::ReceiveResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::v6::services::p2p::ReceiveRequest* request) { return this->Receive(context, request); }));
    }
    ~WithCallbackMethod_Receive() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Receive(::grpc::ServerContext* /*context*/, const ::v6::services::p2p::ReceiveRequest* /*request*/, ::grpc::ServerWriter< ::v6::services::p2p::ReceiveResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::v6::services::p2p::ReceiveResponse>* Receive(
      ::grpc::CallbackServerContext* /*context*/, const ::v6::services::p2p::ReceiveRequest* /*request*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_StartDownload<WithCallbackMethod_StopDownload<WithCallbackMethod_Disconnect<WithCallbackMethod_SendPeerIceCandidate<WithCallbackMethod_Receive<Service > > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_StartDownload : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_StartDownload() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_StartDownload() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StartDownload(::grpc::ServerContext* /*context*/, const ::v6::services::p2p::StartDownloadRequest* /*request*/, ::v6::services::p2p::StartDownloadResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_StopDownload : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_StopDownload() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_StopDownload() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StopDownload(::grpc::ServerContext* /*context*/, const ::v6::services::p2p::StopDownloadRequest* /*request*/, ::v6::services::p2p::StopDownloadResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Disconnect : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Disconnect() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_Disconnect() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Disconnect(::grpc::ServerContext* /*context*/, const ::v6::services::p2p::DisconnectRequest* /*request*/, ::v6::services::p2p::DisconnectResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SendPeerIceCandidate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SendPeerIceCandidate() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_SendPeerIceCandidate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendPeerIceCandidate(::grpc::ServerContext* /*context*/, const ::v6::services::p2p::SendPeerIceCandidateRequest* /*request*/, ::v6::services::p2p::SendPeerIceCandidateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Receive : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Receive() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_Receive() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Receive(::grpc::ServerContext* /*context*/, const ::v6::services::p2p::ReceiveRequest* /*request*/, ::grpc::ServerWriter< ::v6::services::p2p::ReceiveResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_StartDownload : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_StartDownload() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_StartDownload() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StartDownload(::grpc::ServerContext* /*context*/, const ::v6::services::p2p::StartDownloadRequest* /*request*/, ::v6::services::p2p::StartDownloadResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStartDownload(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_StopDownload : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_StopDownload() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_StopDownload() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StopDownload(::grpc::ServerContext* /*context*/, const ::v6::services::p2p::StopDownloadRequest* /*request*/, ::v6::services::p2p::StopDownloadResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStopDownload(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Disconnect : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Disconnect() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_Disconnect() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Disconnect(::grpc::ServerContext* /*context*/, const ::v6::services::p2p::DisconnectRequest* /*request*/, ::v6::services::p2p::DisconnectResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDisconnect(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SendPeerIceCandidate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SendPeerIceCandidate() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_SendPeerIceCandidate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendPeerIceCandidate(::grpc::ServerContext* /*context*/, const ::v6::services::p2p::SendPeerIceCandidateRequest* /*request*/, ::v6::services::p2p::SendPeerIceCandidateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSendPeerIceCandidate(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Receive : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Receive() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_Receive() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Receive(::grpc::ServerContext* /*context*/, const ::v6::services::p2p::ReceiveRequest* /*request*/, ::grpc::ServerWriter< ::v6::services::p2p::ReceiveResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestReceive(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(4, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_StartDownload : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_StartDownload() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->StartDownload(context, request, response); }));
    }
    ~WithRawCallbackMethod_StartDownload() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StartDownload(::grpc::ServerContext* /*context*/, const ::v6::services::p2p::StartDownloadRequest* /*request*/, ::v6::services::p2p::StartDownloadResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* StartDownload(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_StopDownload : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_StopDownload() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->StopDownload(context, request, response); }));
    }
    ~WithRawCallbackMethod_StopDownload() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StopDownload(::grpc::ServerContext* /*context*/, const ::v6::services::p2p::StopDownloadRequest* /*request*/, ::v6::services::p2p::StopDownloadResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* StopDownload(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Disconnect : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Disconnect() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Disconnect(context, request, response); }));
    }
    ~WithRawCallbackMethod_Disconnect() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Disconnect(::grpc::ServerContext* /*context*/, const ::v6::services::p2p::DisconnectRequest* /*request*/, ::v6::services::p2p::DisconnectResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Disconnect(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_SendPeerIceCandidate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_SendPeerIceCandidate() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SendPeerIceCandidate(context, request, response); }));
    }
    ~WithRawCallbackMethod_SendPeerIceCandidate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendPeerIceCandidate(::grpc::ServerContext* /*context*/, const ::v6::services::p2p::SendPeerIceCandidateRequest* /*request*/, ::v6::services::p2p::SendPeerIceCandidateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SendPeerIceCandidate(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Receive : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Receive() {
      ::grpc::Service::MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const::grpc::ByteBuffer* request) { return this->Receive(context, request); }));
    }
    ~WithRawCallbackMethod_Receive() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Receive(::grpc::ServerContext* /*context*/, const ::v6::services::p2p::ReceiveRequest* /*request*/, ::grpc::ServerWriter< ::v6::services::p2p::ReceiveResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* Receive(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_StartDownload : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_StartDownload() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::v6::services::p2p::StartDownloadRequest, ::v6::services::p2p::StartDownloadResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::v6::services::p2p::StartDownloadRequest, ::v6::services::p2p::StartDownloadResponse>* streamer) {
                       return this->StreamedStartDownload(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_StartDownload() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status StartDownload(::grpc::ServerContext* /*context*/, const ::v6::services::p2p::StartDownloadRequest* /*request*/, ::v6::services::p2p::StartDownloadResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedStartDownload(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::v6::services::p2p::StartDownloadRequest,::v6::services::p2p::StartDownloadResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_StopDownload : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_StopDownload() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::v6::services::p2p::StopDownloadRequest, ::v6::services::p2p::StopDownloadResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::v6::services::p2p::StopDownloadRequest, ::v6::services::p2p::StopDownloadResponse>* streamer) {
                       return this->StreamedStopDownload(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_StopDownload() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status StopDownload(::grpc::ServerContext* /*context*/, const ::v6::services::p2p::StopDownloadRequest* /*request*/, ::v6::services::p2p::StopDownloadResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedStopDownload(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::v6::services::p2p::StopDownloadRequest,::v6::services::p2p::StopDownloadResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Disconnect : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Disconnect() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::v6::services::p2p::DisconnectRequest, ::v6::services::p2p::DisconnectResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::v6::services::p2p::DisconnectRequest, ::v6::services::p2p::DisconnectResponse>* streamer) {
                       return this->StreamedDisconnect(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Disconnect() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Disconnect(::grpc::ServerContext* /*context*/, const ::v6::services::p2p::DisconnectRequest* /*request*/, ::v6::services::p2p::DisconnectResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDisconnect(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::v6::services::p2p::DisconnectRequest,::v6::services::p2p::DisconnectResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SendPeerIceCandidate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SendPeerIceCandidate() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::v6::services::p2p::SendPeerIceCandidateRequest, ::v6::services::p2p::SendPeerIceCandidateResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::v6::services::p2p::SendPeerIceCandidateRequest, ::v6::services::p2p::SendPeerIceCandidateResponse>* streamer) {
                       return this->StreamedSendPeerIceCandidate(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SendPeerIceCandidate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SendPeerIceCandidate(::grpc::ServerContext* /*context*/, const ::v6::services::p2p::SendPeerIceCandidateRequest* /*request*/, ::v6::services::p2p::SendPeerIceCandidateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSendPeerIceCandidate(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::v6::services::p2p::SendPeerIceCandidateRequest,::v6::services::p2p::SendPeerIceCandidateResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_StartDownload<WithStreamedUnaryMethod_StopDownload<WithStreamedUnaryMethod_Disconnect<WithStreamedUnaryMethod_SendPeerIceCandidate<Service > > > > StreamedUnaryService;
  template <class BaseClass>
  class WithSplitStreamingMethod_Receive : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_Receive() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::SplitServerStreamingHandler<
          ::v6::services::p2p::ReceiveRequest, ::v6::services::p2p::ReceiveResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerSplitStreamer<
                     ::v6::services::p2p::ReceiveRequest, ::v6::services::p2p::ReceiveResponse>* streamer) {
                       return this->StreamedReceive(context,
                         streamer);
                  }));
    }
    ~WithSplitStreamingMethod_Receive() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Receive(::grpc::ServerContext* /*context*/, const ::v6::services::p2p::ReceiveRequest* /*request*/, ::grpc::ServerWriter< ::v6::services::p2p::ReceiveResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedReceive(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::v6::services::p2p::ReceiveRequest,::v6::services::p2p::ReceiveResponse>* server_split_streamer) = 0;
  };
  typedef WithSplitStreamingMethod_Receive<Service > SplitStreamedService;
  typedef WithStreamedUnaryMethod_StartDownload<WithStreamedUnaryMethod_StopDownload<WithStreamedUnaryMethod_Disconnect<WithStreamedUnaryMethod_SendPeerIceCandidate<WithSplitStreamingMethod_Receive<Service > > > > > StreamedService;
};

}  // namespace p2p
}  // namespace services
}  // namespace v6


#endif  // GRPC_webrtc_5fmanager_2eproto__INCLUDED
