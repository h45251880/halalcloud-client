// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: slice_svc.proto
#ifndef GRPC_slice_5fsvc_2eproto__INCLUDED
#define GRPC_slice_5fsvc_2eproto__INCLUDED

#include "slice_svc.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>

namespace v6 {
namespace services {
namespace pub {

class PubSlice final {
 public:
  static constexpr char const* service_full_name() {
    return "v6.services.pub.PubSlice";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status GetSlice(::grpc::ClientContext* context, const ::v6::services::pub::Slice& request, ::v6::services::pub::Slice* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::v6::services::pub::Slice>> AsyncGetSlice(::grpc::ClientContext* context, const ::v6::services::pub::Slice& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::v6::services::pub::Slice>>(AsyncGetSliceRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::v6::services::pub::Slice>> PrepareAsyncGetSlice(::grpc::ClientContext* context, const ::v6::services::pub::Slice& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::v6::services::pub::Slice>>(PrepareAsyncGetSliceRaw(context, request, cq));
    }
    virtual ::grpc::Status CreateSlice(::grpc::ClientContext* context, const ::v6::services::pub::Slice& request, ::v6::services::pub::Slice* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::v6::services::pub::Slice>> AsyncCreateSlice(::grpc::ClientContext* context, const ::v6::services::pub::Slice& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::v6::services::pub::Slice>>(AsyncCreateSliceRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::v6::services::pub::Slice>> PrepareAsyncCreateSlice(::grpc::ClientContext* context, const ::v6::services::pub::Slice& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::v6::services::pub::Slice>>(PrepareAsyncCreateSliceRaw(context, request, cq));
    }
    virtual ::grpc::Status GetMeta(::grpc::ClientContext* context, const ::v6::services::pub::Meta& request, ::v6::services::pub::Meta* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::v6::services::pub::Meta>> AsyncGetMeta(::grpc::ClientContext* context, const ::v6::services::pub::Meta& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::v6::services::pub::Meta>>(AsyncGetMetaRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::v6::services::pub::Meta>> PrepareAsyncGetMeta(::grpc::ClientContext* context, const ::v6::services::pub::Meta& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::v6::services::pub::Meta>>(PrepareAsyncGetMetaRaw(context, request, cq));
    }
    virtual ::grpc::Status CreateMeta(::grpc::ClientContext* context, const ::v6::services::pub::Meta& request, ::v6::services::pub::Meta* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::v6::services::pub::Meta>> AsyncCreateMeta(::grpc::ClientContext* context, const ::v6::services::pub::Meta& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::v6::services::pub::Meta>>(AsyncCreateMetaRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::v6::services::pub::Meta>> PrepareAsyncCreateMeta(::grpc::ClientContext* context, const ::v6::services::pub::Meta& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::v6::services::pub::Meta>>(PrepareAsyncCreateMetaRaw(context, request, cq));
    }
    virtual ::grpc::Status AddFastLookup(::grpc::ClientContext* context, const ::v6::services::pub::FastLookup& request, ::v6::services::pub::FastLookup* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::v6::services::pub::FastLookup>> AsyncAddFastLookup(::grpc::ClientContext* context, const ::v6::services::pub::FastLookup& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::v6::services::pub::FastLookup>>(AsyncAddFastLookupRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::v6::services::pub::FastLookup>> PrepareAsyncAddFastLookup(::grpc::ClientContext* context, const ::v6::services::pub::FastLookup& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::v6::services::pub::FastLookup>>(PrepareAsyncAddFastLookupRaw(context, request, cq));
    }
    virtual ::grpc::Status GetFastLookup(::grpc::ClientContext* context, const ::v6::services::pub::FastLookupRequest& request, ::v6::services::pub::FastLookup* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::v6::services::pub::FastLookup>> AsyncGetFastLookup(::grpc::ClientContext* context, const ::v6::services::pub::FastLookupRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::v6::services::pub::FastLookup>>(AsyncGetFastLookupRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::v6::services::pub::FastLookup>> PrepareAsyncGetFastLookup(::grpc::ClientContext* context, const ::v6::services::pub::FastLookupRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::v6::services::pub::FastLookup>>(PrepareAsyncGetFastLookupRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void GetSlice(::grpc::ClientContext* context, const ::v6::services::pub::Slice* request, ::v6::services::pub::Slice* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetSlice(::grpc::ClientContext* context, const ::v6::services::pub::Slice* request, ::v6::services::pub::Slice* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void CreateSlice(::grpc::ClientContext* context, const ::v6::services::pub::Slice* request, ::v6::services::pub::Slice* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CreateSlice(::grpc::ClientContext* context, const ::v6::services::pub::Slice* request, ::v6::services::pub::Slice* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void GetMeta(::grpc::ClientContext* context, const ::v6::services::pub::Meta* request, ::v6::services::pub::Meta* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetMeta(::grpc::ClientContext* context, const ::v6::services::pub::Meta* request, ::v6::services::pub::Meta* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void CreateMeta(::grpc::ClientContext* context, const ::v6::services::pub::Meta* request, ::v6::services::pub::Meta* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CreateMeta(::grpc::ClientContext* context, const ::v6::services::pub::Meta* request, ::v6::services::pub::Meta* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void AddFastLookup(::grpc::ClientContext* context, const ::v6::services::pub::FastLookup* request, ::v6::services::pub::FastLookup* response, std::function<void(::grpc::Status)>) = 0;
      virtual void AddFastLookup(::grpc::ClientContext* context, const ::v6::services::pub::FastLookup* request, ::v6::services::pub::FastLookup* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void GetFastLookup(::grpc::ClientContext* context, const ::v6::services::pub::FastLookupRequest* request, ::v6::services::pub::FastLookup* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetFastLookup(::grpc::ClientContext* context, const ::v6::services::pub::FastLookupRequest* request, ::v6::services::pub::FastLookup* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::v6::services::pub::Slice>* AsyncGetSliceRaw(::grpc::ClientContext* context, const ::v6::services::pub::Slice& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::v6::services::pub::Slice>* PrepareAsyncGetSliceRaw(::grpc::ClientContext* context, const ::v6::services::pub::Slice& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::v6::services::pub::Slice>* AsyncCreateSliceRaw(::grpc::ClientContext* context, const ::v6::services::pub::Slice& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::v6::services::pub::Slice>* PrepareAsyncCreateSliceRaw(::grpc::ClientContext* context, const ::v6::services::pub::Slice& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::v6::services::pub::Meta>* AsyncGetMetaRaw(::grpc::ClientContext* context, const ::v6::services::pub::Meta& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::v6::services::pub::Meta>* PrepareAsyncGetMetaRaw(::grpc::ClientContext* context, const ::v6::services::pub::Meta& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::v6::services::pub::Meta>* AsyncCreateMetaRaw(::grpc::ClientContext* context, const ::v6::services::pub::Meta& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::v6::services::pub::Meta>* PrepareAsyncCreateMetaRaw(::grpc::ClientContext* context, const ::v6::services::pub::Meta& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::v6::services::pub::FastLookup>* AsyncAddFastLookupRaw(::grpc::ClientContext* context, const ::v6::services::pub::FastLookup& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::v6::services::pub::FastLookup>* PrepareAsyncAddFastLookupRaw(::grpc::ClientContext* context, const ::v6::services::pub::FastLookup& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::v6::services::pub::FastLookup>* AsyncGetFastLookupRaw(::grpc::ClientContext* context, const ::v6::services::pub::FastLookupRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::v6::services::pub::FastLookup>* PrepareAsyncGetFastLookupRaw(::grpc::ClientContext* context, const ::v6::services::pub::FastLookupRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status GetSlice(::grpc::ClientContext* context, const ::v6::services::pub::Slice& request, ::v6::services::pub::Slice* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::v6::services::pub::Slice>> AsyncGetSlice(::grpc::ClientContext* context, const ::v6::services::pub::Slice& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::v6::services::pub::Slice>>(AsyncGetSliceRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::v6::services::pub::Slice>> PrepareAsyncGetSlice(::grpc::ClientContext* context, const ::v6::services::pub::Slice& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::v6::services::pub::Slice>>(PrepareAsyncGetSliceRaw(context, request, cq));
    }
    ::grpc::Status CreateSlice(::grpc::ClientContext* context, const ::v6::services::pub::Slice& request, ::v6::services::pub::Slice* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::v6::services::pub::Slice>> AsyncCreateSlice(::grpc::ClientContext* context, const ::v6::services::pub::Slice& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::v6::services::pub::Slice>>(AsyncCreateSliceRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::v6::services::pub::Slice>> PrepareAsyncCreateSlice(::grpc::ClientContext* context, const ::v6::services::pub::Slice& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::v6::services::pub::Slice>>(PrepareAsyncCreateSliceRaw(context, request, cq));
    }
    ::grpc::Status GetMeta(::grpc::ClientContext* context, const ::v6::services::pub::Meta& request, ::v6::services::pub::Meta* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::v6::services::pub::Meta>> AsyncGetMeta(::grpc::ClientContext* context, const ::v6::services::pub::Meta& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::v6::services::pub::Meta>>(AsyncGetMetaRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::v6::services::pub::Meta>> PrepareAsyncGetMeta(::grpc::ClientContext* context, const ::v6::services::pub::Meta& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::v6::services::pub::Meta>>(PrepareAsyncGetMetaRaw(context, request, cq));
    }
    ::grpc::Status CreateMeta(::grpc::ClientContext* context, const ::v6::services::pub::Meta& request, ::v6::services::pub::Meta* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::v6::services::pub::Meta>> AsyncCreateMeta(::grpc::ClientContext* context, const ::v6::services::pub::Meta& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::v6::services::pub::Meta>>(AsyncCreateMetaRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::v6::services::pub::Meta>> PrepareAsyncCreateMeta(::grpc::ClientContext* context, const ::v6::services::pub::Meta& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::v6::services::pub::Meta>>(PrepareAsyncCreateMetaRaw(context, request, cq));
    }
    ::grpc::Status AddFastLookup(::grpc::ClientContext* context, const ::v6::services::pub::FastLookup& request, ::v6::services::pub::FastLookup* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::v6::services::pub::FastLookup>> AsyncAddFastLookup(::grpc::ClientContext* context, const ::v6::services::pub::FastLookup& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::v6::services::pub::FastLookup>>(AsyncAddFastLookupRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::v6::services::pub::FastLookup>> PrepareAsyncAddFastLookup(::grpc::ClientContext* context, const ::v6::services::pub::FastLookup& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::v6::services::pub::FastLookup>>(PrepareAsyncAddFastLookupRaw(context, request, cq));
    }
    ::grpc::Status GetFastLookup(::grpc::ClientContext* context, const ::v6::services::pub::FastLookupRequest& request, ::v6::services::pub::FastLookup* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::v6::services::pub::FastLookup>> AsyncGetFastLookup(::grpc::ClientContext* context, const ::v6::services::pub::FastLookupRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::v6::services::pub::FastLookup>>(AsyncGetFastLookupRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::v6::services::pub::FastLookup>> PrepareAsyncGetFastLookup(::grpc::ClientContext* context, const ::v6::services::pub::FastLookupRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::v6::services::pub::FastLookup>>(PrepareAsyncGetFastLookupRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void GetSlice(::grpc::ClientContext* context, const ::v6::services::pub::Slice* request, ::v6::services::pub::Slice* response, std::function<void(::grpc::Status)>) override;
      void GetSlice(::grpc::ClientContext* context, const ::v6::services::pub::Slice* request, ::v6::services::pub::Slice* response, ::grpc::ClientUnaryReactor* reactor) override;
      void CreateSlice(::grpc::ClientContext* context, const ::v6::services::pub::Slice* request, ::v6::services::pub::Slice* response, std::function<void(::grpc::Status)>) override;
      void CreateSlice(::grpc::ClientContext* context, const ::v6::services::pub::Slice* request, ::v6::services::pub::Slice* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetMeta(::grpc::ClientContext* context, const ::v6::services::pub::Meta* request, ::v6::services::pub::Meta* response, std::function<void(::grpc::Status)>) override;
      void GetMeta(::grpc::ClientContext* context, const ::v6::services::pub::Meta* request, ::v6::services::pub::Meta* response, ::grpc::ClientUnaryReactor* reactor) override;
      void CreateMeta(::grpc::ClientContext* context, const ::v6::services::pub::Meta* request, ::v6::services::pub::Meta* response, std::function<void(::grpc::Status)>) override;
      void CreateMeta(::grpc::ClientContext* context, const ::v6::services::pub::Meta* request, ::v6::services::pub::Meta* response, ::grpc::ClientUnaryReactor* reactor) override;
      void AddFastLookup(::grpc::ClientContext* context, const ::v6::services::pub::FastLookup* request, ::v6::services::pub::FastLookup* response, std::function<void(::grpc::Status)>) override;
      void AddFastLookup(::grpc::ClientContext* context, const ::v6::services::pub::FastLookup* request, ::v6::services::pub::FastLookup* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetFastLookup(::grpc::ClientContext* context, const ::v6::services::pub::FastLookupRequest* request, ::v6::services::pub::FastLookup* response, std::function<void(::grpc::Status)>) override;
      void GetFastLookup(::grpc::ClientContext* context, const ::v6::services::pub::FastLookupRequest* request, ::v6::services::pub::FastLookup* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::v6::services::pub::Slice>* AsyncGetSliceRaw(::grpc::ClientContext* context, const ::v6::services::pub::Slice& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::v6::services::pub::Slice>* PrepareAsyncGetSliceRaw(::grpc::ClientContext* context, const ::v6::services::pub::Slice& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::v6::services::pub::Slice>* AsyncCreateSliceRaw(::grpc::ClientContext* context, const ::v6::services::pub::Slice& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::v6::services::pub::Slice>* PrepareAsyncCreateSliceRaw(::grpc::ClientContext* context, const ::v6::services::pub::Slice& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::v6::services::pub::Meta>* AsyncGetMetaRaw(::grpc::ClientContext* context, const ::v6::services::pub::Meta& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::v6::services::pub::Meta>* PrepareAsyncGetMetaRaw(::grpc::ClientContext* context, const ::v6::services::pub::Meta& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::v6::services::pub::Meta>* AsyncCreateMetaRaw(::grpc::ClientContext* context, const ::v6::services::pub::Meta& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::v6::services::pub::Meta>* PrepareAsyncCreateMetaRaw(::grpc::ClientContext* context, const ::v6::services::pub::Meta& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::v6::services::pub::FastLookup>* AsyncAddFastLookupRaw(::grpc::ClientContext* context, const ::v6::services::pub::FastLookup& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::v6::services::pub::FastLookup>* PrepareAsyncAddFastLookupRaw(::grpc::ClientContext* context, const ::v6::services::pub::FastLookup& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::v6::services::pub::FastLookup>* AsyncGetFastLookupRaw(::grpc::ClientContext* context, const ::v6::services::pub::FastLookupRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::v6::services::pub::FastLookup>* PrepareAsyncGetFastLookupRaw(::grpc::ClientContext* context, const ::v6::services::pub::FastLookupRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_GetSlice_;
    const ::grpc::internal::RpcMethod rpcmethod_CreateSlice_;
    const ::grpc::internal::RpcMethod rpcmethod_GetMeta_;
    const ::grpc::internal::RpcMethod rpcmethod_CreateMeta_;
    const ::grpc::internal::RpcMethod rpcmethod_AddFastLookup_;
    const ::grpc::internal::RpcMethod rpcmethod_GetFastLookup_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status GetSlice(::grpc::ServerContext* context, const ::v6::services::pub::Slice* request, ::v6::services::pub::Slice* response);
    virtual ::grpc::Status CreateSlice(::grpc::ServerContext* context, const ::v6::services::pub::Slice* request, ::v6::services::pub::Slice* response);
    virtual ::grpc::Status GetMeta(::grpc::ServerContext* context, const ::v6::services::pub::Meta* request, ::v6::services::pub::Meta* response);
    virtual ::grpc::Status CreateMeta(::grpc::ServerContext* context, const ::v6::services::pub::Meta* request, ::v6::services::pub::Meta* response);
    virtual ::grpc::Status AddFastLookup(::grpc::ServerContext* context, const ::v6::services::pub::FastLookup* request, ::v6::services::pub::FastLookup* response);
    virtual ::grpc::Status GetFastLookup(::grpc::ServerContext* context, const ::v6::services::pub::FastLookupRequest* request, ::v6::services::pub::FastLookup* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_GetSlice : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetSlice() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_GetSlice() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetSlice(::grpc::ServerContext* /*context*/, const ::v6::services::pub::Slice* /*request*/, ::v6::services::pub::Slice* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetSlice(::grpc::ServerContext* context, ::v6::services::pub::Slice* request, ::grpc::ServerAsyncResponseWriter< ::v6::services::pub::Slice>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_CreateSlice : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_CreateSlice() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_CreateSlice() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateSlice(::grpc::ServerContext* /*context*/, const ::v6::services::pub::Slice* /*request*/, ::v6::services::pub::Slice* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateSlice(::grpc::ServerContext* context, ::v6::services::pub::Slice* request, ::grpc::ServerAsyncResponseWriter< ::v6::services::pub::Slice>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetMeta : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetMeta() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_GetMeta() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetMeta(::grpc::ServerContext* /*context*/, const ::v6::services::pub::Meta* /*request*/, ::v6::services::pub::Meta* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetMeta(::grpc::ServerContext* context, ::v6::services::pub::Meta* request, ::grpc::ServerAsyncResponseWriter< ::v6::services::pub::Meta>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_CreateMeta : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_CreateMeta() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_CreateMeta() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateMeta(::grpc::ServerContext* /*context*/, const ::v6::services::pub::Meta* /*request*/, ::v6::services::pub::Meta* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateMeta(::grpc::ServerContext* context, ::v6::services::pub::Meta* request, ::grpc::ServerAsyncResponseWriter< ::v6::services::pub::Meta>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_AddFastLookup : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_AddFastLookup() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_AddFastLookup() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddFastLookup(::grpc::ServerContext* /*context*/, const ::v6::services::pub::FastLookup* /*request*/, ::v6::services::pub::FastLookup* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAddFastLookup(::grpc::ServerContext* context, ::v6::services::pub::FastLookup* request, ::grpc::ServerAsyncResponseWriter< ::v6::services::pub::FastLookup>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetFastLookup : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetFastLookup() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_GetFastLookup() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetFastLookup(::grpc::ServerContext* /*context*/, const ::v6::services::pub::FastLookupRequest* /*request*/, ::v6::services::pub::FastLookup* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetFastLookup(::grpc::ServerContext* context, ::v6::services::pub::FastLookupRequest* request, ::grpc::ServerAsyncResponseWriter< ::v6::services::pub::FastLookup>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_GetSlice<WithAsyncMethod_CreateSlice<WithAsyncMethod_GetMeta<WithAsyncMethod_CreateMeta<WithAsyncMethod_AddFastLookup<WithAsyncMethod_GetFastLookup<Service > > > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_GetSlice : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetSlice() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::v6::services::pub::Slice, ::v6::services::pub::Slice>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::v6::services::pub::Slice* request, ::v6::services::pub::Slice* response) { return this->GetSlice(context, request, response); }));}
    void SetMessageAllocatorFor_GetSlice(
        ::grpc::MessageAllocator< ::v6::services::pub::Slice, ::v6::services::pub::Slice>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::v6::services::pub::Slice, ::v6::services::pub::Slice>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetSlice() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetSlice(::grpc::ServerContext* /*context*/, const ::v6::services::pub::Slice* /*request*/, ::v6::services::pub::Slice* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetSlice(
      ::grpc::CallbackServerContext* /*context*/, const ::v6::services::pub::Slice* /*request*/, ::v6::services::pub::Slice* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_CreateSlice : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_CreateSlice() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::v6::services::pub::Slice, ::v6::services::pub::Slice>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::v6::services::pub::Slice* request, ::v6::services::pub::Slice* response) { return this->CreateSlice(context, request, response); }));}
    void SetMessageAllocatorFor_CreateSlice(
        ::grpc::MessageAllocator< ::v6::services::pub::Slice, ::v6::services::pub::Slice>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::v6::services::pub::Slice, ::v6::services::pub::Slice>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_CreateSlice() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateSlice(::grpc::ServerContext* /*context*/, const ::v6::services::pub::Slice* /*request*/, ::v6::services::pub::Slice* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CreateSlice(
      ::grpc::CallbackServerContext* /*context*/, const ::v6::services::pub::Slice* /*request*/, ::v6::services::pub::Slice* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetMeta : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetMeta() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::v6::services::pub::Meta, ::v6::services::pub::Meta>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::v6::services::pub::Meta* request, ::v6::services::pub::Meta* response) { return this->GetMeta(context, request, response); }));}
    void SetMessageAllocatorFor_GetMeta(
        ::grpc::MessageAllocator< ::v6::services::pub::Meta, ::v6::services::pub::Meta>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::v6::services::pub::Meta, ::v6::services::pub::Meta>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetMeta() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetMeta(::grpc::ServerContext* /*context*/, const ::v6::services::pub::Meta* /*request*/, ::v6::services::pub::Meta* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetMeta(
      ::grpc::CallbackServerContext* /*context*/, const ::v6::services::pub::Meta* /*request*/, ::v6::services::pub::Meta* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_CreateMeta : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_CreateMeta() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::v6::services::pub::Meta, ::v6::services::pub::Meta>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::v6::services::pub::Meta* request, ::v6::services::pub::Meta* response) { return this->CreateMeta(context, request, response); }));}
    void SetMessageAllocatorFor_CreateMeta(
        ::grpc::MessageAllocator< ::v6::services::pub::Meta, ::v6::services::pub::Meta>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::v6::services::pub::Meta, ::v6::services::pub::Meta>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_CreateMeta() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateMeta(::grpc::ServerContext* /*context*/, const ::v6::services::pub::Meta* /*request*/, ::v6::services::pub::Meta* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CreateMeta(
      ::grpc::CallbackServerContext* /*context*/, const ::v6::services::pub::Meta* /*request*/, ::v6::services::pub::Meta* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_AddFastLookup : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_AddFastLookup() {
      ::grpc::Service::MarkMethodCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::v6::services::pub::FastLookup, ::v6::services::pub::FastLookup>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::v6::services::pub::FastLookup* request, ::v6::services::pub::FastLookup* response) { return this->AddFastLookup(context, request, response); }));}
    void SetMessageAllocatorFor_AddFastLookup(
        ::grpc::MessageAllocator< ::v6::services::pub::FastLookup, ::v6::services::pub::FastLookup>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::v6::services::pub::FastLookup, ::v6::services::pub::FastLookup>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_AddFastLookup() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddFastLookup(::grpc::ServerContext* /*context*/, const ::v6::services::pub::FastLookup* /*request*/, ::v6::services::pub::FastLookup* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* AddFastLookup(
      ::grpc::CallbackServerContext* /*context*/, const ::v6::services::pub::FastLookup* /*request*/, ::v6::services::pub::FastLookup* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetFastLookup : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetFastLookup() {
      ::grpc::Service::MarkMethodCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::v6::services::pub::FastLookupRequest, ::v6::services::pub::FastLookup>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::v6::services::pub::FastLookupRequest* request, ::v6::services::pub::FastLookup* response) { return this->GetFastLookup(context, request, response); }));}
    void SetMessageAllocatorFor_GetFastLookup(
        ::grpc::MessageAllocator< ::v6::services::pub::FastLookupRequest, ::v6::services::pub::FastLookup>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(5);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::v6::services::pub::FastLookupRequest, ::v6::services::pub::FastLookup>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetFastLookup() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetFastLookup(::grpc::ServerContext* /*context*/, const ::v6::services::pub::FastLookupRequest* /*request*/, ::v6::services::pub::FastLookup* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetFastLookup(
      ::grpc::CallbackServerContext* /*context*/, const ::v6::services::pub::FastLookupRequest* /*request*/, ::v6::services::pub::FastLookup* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_GetSlice<WithCallbackMethod_CreateSlice<WithCallbackMethod_GetMeta<WithCallbackMethod_CreateMeta<WithCallbackMethod_AddFastLookup<WithCallbackMethod_GetFastLookup<Service > > > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_GetSlice : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetSlice() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_GetSlice() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetSlice(::grpc::ServerContext* /*context*/, const ::v6::services::pub::Slice* /*request*/, ::v6::services::pub::Slice* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_CreateSlice : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_CreateSlice() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_CreateSlice() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateSlice(::grpc::ServerContext* /*context*/, const ::v6::services::pub::Slice* /*request*/, ::v6::services::pub::Slice* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetMeta : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetMeta() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_GetMeta() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetMeta(::grpc::ServerContext* /*context*/, const ::v6::services::pub::Meta* /*request*/, ::v6::services::pub::Meta* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_CreateMeta : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_CreateMeta() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_CreateMeta() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateMeta(::grpc::ServerContext* /*context*/, const ::v6::services::pub::Meta* /*request*/, ::v6::services::pub::Meta* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_AddFastLookup : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_AddFastLookup() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_AddFastLookup() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddFastLookup(::grpc::ServerContext* /*context*/, const ::v6::services::pub::FastLookup* /*request*/, ::v6::services::pub::FastLookup* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetFastLookup : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetFastLookup() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_GetFastLookup() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetFastLookup(::grpc::ServerContext* /*context*/, const ::v6::services::pub::FastLookupRequest* /*request*/, ::v6::services::pub::FastLookup* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetSlice : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetSlice() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_GetSlice() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetSlice(::grpc::ServerContext* /*context*/, const ::v6::services::pub::Slice* /*request*/, ::v6::services::pub::Slice* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetSlice(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_CreateSlice : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_CreateSlice() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_CreateSlice() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateSlice(::grpc::ServerContext* /*context*/, const ::v6::services::pub::Slice* /*request*/, ::v6::services::pub::Slice* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateSlice(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetMeta : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetMeta() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_GetMeta() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetMeta(::grpc::ServerContext* /*context*/, const ::v6::services::pub::Meta* /*request*/, ::v6::services::pub::Meta* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetMeta(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_CreateMeta : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_CreateMeta() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_CreateMeta() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateMeta(::grpc::ServerContext* /*context*/, const ::v6::services::pub::Meta* /*request*/, ::v6::services::pub::Meta* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateMeta(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_AddFastLookup : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_AddFastLookup() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_AddFastLookup() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddFastLookup(::grpc::ServerContext* /*context*/, const ::v6::services::pub::FastLookup* /*request*/, ::v6::services::pub::FastLookup* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAddFastLookup(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetFastLookup : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetFastLookup() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_GetFastLookup() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetFastLookup(::grpc::ServerContext* /*context*/, const ::v6::services::pub::FastLookupRequest* /*request*/, ::v6::services::pub::FastLookup* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetFastLookup(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetSlice : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetSlice() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetSlice(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetSlice() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetSlice(::grpc::ServerContext* /*context*/, const ::v6::services::pub::Slice* /*request*/, ::v6::services::pub::Slice* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetSlice(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_CreateSlice : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_CreateSlice() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->CreateSlice(context, request, response); }));
    }
    ~WithRawCallbackMethod_CreateSlice() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateSlice(::grpc::ServerContext* /*context*/, const ::v6::services::pub::Slice* /*request*/, ::v6::services::pub::Slice* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CreateSlice(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetMeta : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetMeta() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetMeta(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetMeta() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetMeta(::grpc::ServerContext* /*context*/, const ::v6::services::pub::Meta* /*request*/, ::v6::services::pub::Meta* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetMeta(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_CreateMeta : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_CreateMeta() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->CreateMeta(context, request, response); }));
    }
    ~WithRawCallbackMethod_CreateMeta() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateMeta(::grpc::ServerContext* /*context*/, const ::v6::services::pub::Meta* /*request*/, ::v6::services::pub::Meta* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CreateMeta(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_AddFastLookup : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_AddFastLookup() {
      ::grpc::Service::MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->AddFastLookup(context, request, response); }));
    }
    ~WithRawCallbackMethod_AddFastLookup() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddFastLookup(::grpc::ServerContext* /*context*/, const ::v6::services::pub::FastLookup* /*request*/, ::v6::services::pub::FastLookup* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* AddFastLookup(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetFastLookup : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetFastLookup() {
      ::grpc::Service::MarkMethodRawCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetFastLookup(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetFastLookup() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetFastLookup(::grpc::ServerContext* /*context*/, const ::v6::services::pub::FastLookupRequest* /*request*/, ::v6::services::pub::FastLookup* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetFastLookup(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetSlice : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetSlice() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::v6::services::pub::Slice, ::v6::services::pub::Slice>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::v6::services::pub::Slice, ::v6::services::pub::Slice>* streamer) {
                       return this->StreamedGetSlice(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetSlice() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetSlice(::grpc::ServerContext* /*context*/, const ::v6::services::pub::Slice* /*request*/, ::v6::services::pub::Slice* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetSlice(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::v6::services::pub::Slice,::v6::services::pub::Slice>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CreateSlice : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_CreateSlice() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::v6::services::pub::Slice, ::v6::services::pub::Slice>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::v6::services::pub::Slice, ::v6::services::pub::Slice>* streamer) {
                       return this->StreamedCreateSlice(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_CreateSlice() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CreateSlice(::grpc::ServerContext* /*context*/, const ::v6::services::pub::Slice* /*request*/, ::v6::services::pub::Slice* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCreateSlice(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::v6::services::pub::Slice,::v6::services::pub::Slice>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetMeta : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetMeta() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::v6::services::pub::Meta, ::v6::services::pub::Meta>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::v6::services::pub::Meta, ::v6::services::pub::Meta>* streamer) {
                       return this->StreamedGetMeta(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetMeta() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetMeta(::grpc::ServerContext* /*context*/, const ::v6::services::pub::Meta* /*request*/, ::v6::services::pub::Meta* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetMeta(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::v6::services::pub::Meta,::v6::services::pub::Meta>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CreateMeta : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_CreateMeta() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::v6::services::pub::Meta, ::v6::services::pub::Meta>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::v6::services::pub::Meta, ::v6::services::pub::Meta>* streamer) {
                       return this->StreamedCreateMeta(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_CreateMeta() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CreateMeta(::grpc::ServerContext* /*context*/, const ::v6::services::pub::Meta* /*request*/, ::v6::services::pub::Meta* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCreateMeta(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::v6::services::pub::Meta,::v6::services::pub::Meta>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_AddFastLookup : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_AddFastLookup() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler<
          ::v6::services::pub::FastLookup, ::v6::services::pub::FastLookup>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::v6::services::pub::FastLookup, ::v6::services::pub::FastLookup>* streamer) {
                       return this->StreamedAddFastLookup(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_AddFastLookup() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status AddFastLookup(::grpc::ServerContext* /*context*/, const ::v6::services::pub::FastLookup* /*request*/, ::v6::services::pub::FastLookup* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedAddFastLookup(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::v6::services::pub::FastLookup,::v6::services::pub::FastLookup>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetFastLookup : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetFastLookup() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler<
          ::v6::services::pub::FastLookupRequest, ::v6::services::pub::FastLookup>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::v6::services::pub::FastLookupRequest, ::v6::services::pub::FastLookup>* streamer) {
                       return this->StreamedGetFastLookup(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetFastLookup() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetFastLookup(::grpc::ServerContext* /*context*/, const ::v6::services::pub::FastLookupRequest* /*request*/, ::v6::services::pub::FastLookup* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetFastLookup(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::v6::services::pub::FastLookupRequest,::v6::services::pub::FastLookup>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_GetSlice<WithStreamedUnaryMethod_CreateSlice<WithStreamedUnaryMethod_GetMeta<WithStreamedUnaryMethod_CreateMeta<WithStreamedUnaryMethod_AddFastLookup<WithStreamedUnaryMethod_GetFastLookup<Service > > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_GetSlice<WithStreamedUnaryMethod_CreateSlice<WithStreamedUnaryMethod_GetMeta<WithStreamedUnaryMethod_CreateMeta<WithStreamedUnaryMethod_AddFastLookup<WithStreamedUnaryMethod_GetFastLookup<Service > > > > > > StreamedService;
};

}  // namespace pub
}  // namespace services
}  // namespace v6


#endif  // GRPC_slice_5fsvc_2eproto__INCLUDED
