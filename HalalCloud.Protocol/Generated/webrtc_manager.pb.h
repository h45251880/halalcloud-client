// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: webrtc_manager.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_webrtc_5fmanager_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_webrtc_5fmanager_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_webrtc_5fmanager_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_webrtc_5fmanager_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_webrtc_5fmanager_2eproto;
namespace v6 {
namespace services {
namespace p2p {
class DisconnectRequest;
struct DisconnectRequestDefaultTypeInternal;
extern DisconnectRequestDefaultTypeInternal _DisconnectRequest_default_instance_;
class DisconnectResponse;
struct DisconnectResponseDefaultTypeInternal;
extern DisconnectResponseDefaultTypeInternal _DisconnectResponse_default_instance_;
class ReceiveRequest;
struct ReceiveRequestDefaultTypeInternal;
extern ReceiveRequestDefaultTypeInternal _ReceiveRequest_default_instance_;
class ReceiveResponse;
struct ReceiveResponseDefaultTypeInternal;
extern ReceiveResponseDefaultTypeInternal _ReceiveResponse_default_instance_;
class RtcPeerInfo;
struct RtcPeerInfoDefaultTypeInternal;
extern RtcPeerInfoDefaultTypeInternal _RtcPeerInfo_default_instance_;
class SendPeerIceCandidateRequest;
struct SendPeerIceCandidateRequestDefaultTypeInternal;
extern SendPeerIceCandidateRequestDefaultTypeInternal _SendPeerIceCandidateRequest_default_instance_;
class SendPeerIceCandidateResponse;
struct SendPeerIceCandidateResponseDefaultTypeInternal;
extern SendPeerIceCandidateResponseDefaultTypeInternal _SendPeerIceCandidateResponse_default_instance_;
class StartDownloadRequest;
struct StartDownloadRequestDefaultTypeInternal;
extern StartDownloadRequestDefaultTypeInternal _StartDownloadRequest_default_instance_;
class StartDownloadResponse;
struct StartDownloadResponseDefaultTypeInternal;
extern StartDownloadResponseDefaultTypeInternal _StartDownloadResponse_default_instance_;
class StopDownloadRequest;
struct StopDownloadRequestDefaultTypeInternal;
extern StopDownloadRequestDefaultTypeInternal _StopDownloadRequest_default_instance_;
class StopDownloadResponse;
struct StopDownloadResponseDefaultTypeInternal;
extern StopDownloadResponseDefaultTypeInternal _StopDownloadResponse_default_instance_;
}  // namespace p2p
}  // namespace services
}  // namespace v6
PROTOBUF_NAMESPACE_OPEN
template<> ::v6::services::p2p::DisconnectRequest* Arena::CreateMaybeMessage<::v6::services::p2p::DisconnectRequest>(Arena*);
template<> ::v6::services::p2p::DisconnectResponse* Arena::CreateMaybeMessage<::v6::services::p2p::DisconnectResponse>(Arena*);
template<> ::v6::services::p2p::ReceiveRequest* Arena::CreateMaybeMessage<::v6::services::p2p::ReceiveRequest>(Arena*);
template<> ::v6::services::p2p::ReceiveResponse* Arena::CreateMaybeMessage<::v6::services::p2p::ReceiveResponse>(Arena*);
template<> ::v6::services::p2p::RtcPeerInfo* Arena::CreateMaybeMessage<::v6::services::p2p::RtcPeerInfo>(Arena*);
template<> ::v6::services::p2p::SendPeerIceCandidateRequest* Arena::CreateMaybeMessage<::v6::services::p2p::SendPeerIceCandidateRequest>(Arena*);
template<> ::v6::services::p2p::SendPeerIceCandidateResponse* Arena::CreateMaybeMessage<::v6::services::p2p::SendPeerIceCandidateResponse>(Arena*);
template<> ::v6::services::p2p::StartDownloadRequest* Arena::CreateMaybeMessage<::v6::services::p2p::StartDownloadRequest>(Arena*);
template<> ::v6::services::p2p::StartDownloadResponse* Arena::CreateMaybeMessage<::v6::services::p2p::StartDownloadResponse>(Arena*);
template<> ::v6::services::p2p::StopDownloadRequest* Arena::CreateMaybeMessage<::v6::services::p2p::StopDownloadRequest>(Arena*);
template<> ::v6::services::p2p::StopDownloadResponse* Arena::CreateMaybeMessage<::v6::services::p2p::StopDownloadResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace v6 {
namespace services {
namespace p2p {

// ===================================================================

class StartDownloadRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:v6.services.p2p.StartDownloadRequest) */ {
 public:
  inline StartDownloadRequest() : StartDownloadRequest(nullptr) {}
  ~StartDownloadRequest() override;
  explicit PROTOBUF_CONSTEXPR StartDownloadRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StartDownloadRequest(const StartDownloadRequest& from);
  StartDownloadRequest(StartDownloadRequest&& from) noexcept
    : StartDownloadRequest() {
    *this = ::std::move(from);
  }

  inline StartDownloadRequest& operator=(const StartDownloadRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline StartDownloadRequest& operator=(StartDownloadRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StartDownloadRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const StartDownloadRequest* internal_default_instance() {
    return reinterpret_cast<const StartDownloadRequest*>(
               &_StartDownloadRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(StartDownloadRequest& a, StartDownloadRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(StartDownloadRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StartDownloadRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StartDownloadRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<StartDownloadRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const StartDownloadRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const StartDownloadRequest& from) {
    StartDownloadRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StartDownloadRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "v6.services.p2p.StartDownloadRequest";
  }
  protected:
  explicit StartDownloadRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kClientIdentityFieldNumber = 1,
    kContentIdentityFieldNumber = 2,
    kPeerLimitFieldNumber = 3,
  };
  // string client_identity = 1;
  void clear_client_identity();
  const std::string& client_identity() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_client_identity(ArgT0&& arg0, ArgT... args);
  std::string* mutable_client_identity();
  PROTOBUF_NODISCARD std::string* release_client_identity();
  void set_allocated_client_identity(std::string* client_identity);
  private:
  const std::string& _internal_client_identity() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_client_identity(const std::string& value);
  std::string* _internal_mutable_client_identity();
  public:

  // string content_identity = 2;
  void clear_content_identity();
  const std::string& content_identity() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_content_identity(ArgT0&& arg0, ArgT... args);
  std::string* mutable_content_identity();
  PROTOBUF_NODISCARD std::string* release_content_identity();
  void set_allocated_content_identity(std::string* content_identity);
  private:
  const std::string& _internal_content_identity() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_content_identity(const std::string& value);
  std::string* _internal_mutable_content_identity();
  public:

  // int64 peer_limit = 3;
  void clear_peer_limit();
  int64_t peer_limit() const;
  void set_peer_limit(int64_t value);
  private:
  int64_t _internal_peer_limit() const;
  void _internal_set_peer_limit(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:v6.services.p2p.StartDownloadRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr client_identity_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr content_identity_;
    int64_t peer_limit_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_webrtc_5fmanager_2eproto;
};
// -------------------------------------------------------------------

class RtcPeerInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:v6.services.p2p.RtcPeerInfo) */ {
 public:
  inline RtcPeerInfo() : RtcPeerInfo(nullptr) {}
  ~RtcPeerInfo() override;
  explicit PROTOBUF_CONSTEXPR RtcPeerInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RtcPeerInfo(const RtcPeerInfo& from);
  RtcPeerInfo(RtcPeerInfo&& from) noexcept
    : RtcPeerInfo() {
    *this = ::std::move(from);
  }

  inline RtcPeerInfo& operator=(const RtcPeerInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline RtcPeerInfo& operator=(RtcPeerInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RtcPeerInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const RtcPeerInfo* internal_default_instance() {
    return reinterpret_cast<const RtcPeerInfo*>(
               &_RtcPeerInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(RtcPeerInfo& a, RtcPeerInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(RtcPeerInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RtcPeerInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RtcPeerInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RtcPeerInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RtcPeerInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RtcPeerInfo& from) {
    RtcPeerInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RtcPeerInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "v6.services.p2p.RtcPeerInfo";
  }
  protected:
  explicit RtcPeerInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kClientIdentityFieldNumber = 1,
    kContentIdentityFieldNumber = 2,
    kSdpFieldNumber = 3,
  };
  // string client_identity = 1;
  void clear_client_identity();
  const std::string& client_identity() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_client_identity(ArgT0&& arg0, ArgT... args);
  std::string* mutable_client_identity();
  PROTOBUF_NODISCARD std::string* release_client_identity();
  void set_allocated_client_identity(std::string* client_identity);
  private:
  const std::string& _internal_client_identity() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_client_identity(const std::string& value);
  std::string* _internal_mutable_client_identity();
  public:

  // string content_identity = 2;
  void clear_content_identity();
  const std::string& content_identity() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_content_identity(ArgT0&& arg0, ArgT... args);
  std::string* mutable_content_identity();
  PROTOBUF_NODISCARD std::string* release_content_identity();
  void set_allocated_content_identity(std::string* content_identity);
  private:
  const std::string& _internal_content_identity() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_content_identity(const std::string& value);
  std::string* _internal_mutable_content_identity();
  public:

  // string sdp = 3;
  void clear_sdp();
  const std::string& sdp() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_sdp(ArgT0&& arg0, ArgT... args);
  std::string* mutable_sdp();
  PROTOBUF_NODISCARD std::string* release_sdp();
  void set_allocated_sdp(std::string* sdp);
  private:
  const std::string& _internal_sdp() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_sdp(const std::string& value);
  std::string* _internal_mutable_sdp();
  public:

  // @@protoc_insertion_point(class_scope:v6.services.p2p.RtcPeerInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr client_identity_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr content_identity_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sdp_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_webrtc_5fmanager_2eproto;
};
// -------------------------------------------------------------------

class StartDownloadResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:v6.services.p2p.StartDownloadResponse) */ {
 public:
  inline StartDownloadResponse() : StartDownloadResponse(nullptr) {}
  ~StartDownloadResponse() override;
  explicit PROTOBUF_CONSTEXPR StartDownloadResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StartDownloadResponse(const StartDownloadResponse& from);
  StartDownloadResponse(StartDownloadResponse&& from) noexcept
    : StartDownloadResponse() {
    *this = ::std::move(from);
  }

  inline StartDownloadResponse& operator=(const StartDownloadResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline StartDownloadResponse& operator=(StartDownloadResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StartDownloadResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const StartDownloadResponse* internal_default_instance() {
    return reinterpret_cast<const StartDownloadResponse*>(
               &_StartDownloadResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(StartDownloadResponse& a, StartDownloadResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(StartDownloadResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StartDownloadResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StartDownloadResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<StartDownloadResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const StartDownloadResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const StartDownloadResponse& from) {
    StartDownloadResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StartDownloadResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "v6.services.p2p.StartDownloadResponse";
  }
  protected:
  explicit StartDownloadResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPeersFieldNumber = 2,
    kBackendPeersFieldNumber = 3,
    kContentIdentityFieldNumber = 1,
  };
  // repeated .v6.services.p2p.RtcPeerInfo peers = 2;
  int peers_size() const;
  private:
  int _internal_peers_size() const;
  public:
  void clear_peers();
  ::v6::services::p2p::RtcPeerInfo* mutable_peers(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::v6::services::p2p::RtcPeerInfo >*
      mutable_peers();
  private:
  const ::v6::services::p2p::RtcPeerInfo& _internal_peers(int index) const;
  ::v6::services::p2p::RtcPeerInfo* _internal_add_peers();
  public:
  const ::v6::services::p2p::RtcPeerInfo& peers(int index) const;
  ::v6::services::p2p::RtcPeerInfo* add_peers();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::v6::services::p2p::RtcPeerInfo >&
      peers() const;

  // repeated .v6.services.p2p.RtcPeerInfo backend_peers = 3;
  int backend_peers_size() const;
  private:
  int _internal_backend_peers_size() const;
  public:
  void clear_backend_peers();
  ::v6::services::p2p::RtcPeerInfo* mutable_backend_peers(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::v6::services::p2p::RtcPeerInfo >*
      mutable_backend_peers();
  private:
  const ::v6::services::p2p::RtcPeerInfo& _internal_backend_peers(int index) const;
  ::v6::services::p2p::RtcPeerInfo* _internal_add_backend_peers();
  public:
  const ::v6::services::p2p::RtcPeerInfo& backend_peers(int index) const;
  ::v6::services::p2p::RtcPeerInfo* add_backend_peers();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::v6::services::p2p::RtcPeerInfo >&
      backend_peers() const;

  // string content_identity = 1;
  void clear_content_identity();
  const std::string& content_identity() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_content_identity(ArgT0&& arg0, ArgT... args);
  std::string* mutable_content_identity();
  PROTOBUF_NODISCARD std::string* release_content_identity();
  void set_allocated_content_identity(std::string* content_identity);
  private:
  const std::string& _internal_content_identity() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_content_identity(const std::string& value);
  std::string* _internal_mutable_content_identity();
  public:

  // @@protoc_insertion_point(class_scope:v6.services.p2p.StartDownloadResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::v6::services::p2p::RtcPeerInfo > peers_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::v6::services::p2p::RtcPeerInfo > backend_peers_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr content_identity_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_webrtc_5fmanager_2eproto;
};
// -------------------------------------------------------------------

class StopDownloadRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:v6.services.p2p.StopDownloadRequest) */ {
 public:
  inline StopDownloadRequest() : StopDownloadRequest(nullptr) {}
  ~StopDownloadRequest() override;
  explicit PROTOBUF_CONSTEXPR StopDownloadRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StopDownloadRequest(const StopDownloadRequest& from);
  StopDownloadRequest(StopDownloadRequest&& from) noexcept
    : StopDownloadRequest() {
    *this = ::std::move(from);
  }

  inline StopDownloadRequest& operator=(const StopDownloadRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline StopDownloadRequest& operator=(StopDownloadRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StopDownloadRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const StopDownloadRequest* internal_default_instance() {
    return reinterpret_cast<const StopDownloadRequest*>(
               &_StopDownloadRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(StopDownloadRequest& a, StopDownloadRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(StopDownloadRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StopDownloadRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StopDownloadRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<StopDownloadRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const StopDownloadRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const StopDownloadRequest& from) {
    StopDownloadRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StopDownloadRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "v6.services.p2p.StopDownloadRequest";
  }
  protected:
  explicit StopDownloadRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kClientIdentityFieldNumber = 1,
    kContentIdentityFieldNumber = 2,
  };
  // string client_identity = 1;
  void clear_client_identity();
  const std::string& client_identity() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_client_identity(ArgT0&& arg0, ArgT... args);
  std::string* mutable_client_identity();
  PROTOBUF_NODISCARD std::string* release_client_identity();
  void set_allocated_client_identity(std::string* client_identity);
  private:
  const std::string& _internal_client_identity() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_client_identity(const std::string& value);
  std::string* _internal_mutable_client_identity();
  public:

  // string content_identity = 2;
  void clear_content_identity();
  const std::string& content_identity() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_content_identity(ArgT0&& arg0, ArgT... args);
  std::string* mutable_content_identity();
  PROTOBUF_NODISCARD std::string* release_content_identity();
  void set_allocated_content_identity(std::string* content_identity);
  private:
  const std::string& _internal_content_identity() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_content_identity(const std::string& value);
  std::string* _internal_mutable_content_identity();
  public:

  // @@protoc_insertion_point(class_scope:v6.services.p2p.StopDownloadRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr client_identity_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr content_identity_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_webrtc_5fmanager_2eproto;
};
// -------------------------------------------------------------------

class StopDownloadResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:v6.services.p2p.StopDownloadResponse) */ {
 public:
  inline StopDownloadResponse() : StopDownloadResponse(nullptr) {}
  ~StopDownloadResponse() override;
  explicit PROTOBUF_CONSTEXPR StopDownloadResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StopDownloadResponse(const StopDownloadResponse& from);
  StopDownloadResponse(StopDownloadResponse&& from) noexcept
    : StopDownloadResponse() {
    *this = ::std::move(from);
  }

  inline StopDownloadResponse& operator=(const StopDownloadResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline StopDownloadResponse& operator=(StopDownloadResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StopDownloadResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const StopDownloadResponse* internal_default_instance() {
    return reinterpret_cast<const StopDownloadResponse*>(
               &_StopDownloadResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(StopDownloadResponse& a, StopDownloadResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(StopDownloadResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StopDownloadResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StopDownloadResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<StopDownloadResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const StopDownloadResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const StopDownloadResponse& from) {
    StopDownloadResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StopDownloadResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "v6.services.p2p.StopDownloadResponse";
  }
  protected:
  explicit StopDownloadResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kContentIdentityFieldNumber = 1,
  };
  // string content_identity = 1;
  void clear_content_identity();
  const std::string& content_identity() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_content_identity(ArgT0&& arg0, ArgT... args);
  std::string* mutable_content_identity();
  PROTOBUF_NODISCARD std::string* release_content_identity();
  void set_allocated_content_identity(std::string* content_identity);
  private:
  const std::string& _internal_content_identity() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_content_identity(const std::string& value);
  std::string* _internal_mutable_content_identity();
  public:

  // @@protoc_insertion_point(class_scope:v6.services.p2p.StopDownloadResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr content_identity_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_webrtc_5fmanager_2eproto;
};
// -------------------------------------------------------------------

class DisconnectRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:v6.services.p2p.DisconnectRequest) */ {
 public:
  inline DisconnectRequest() : DisconnectRequest(nullptr) {}
  ~DisconnectRequest() override;
  explicit PROTOBUF_CONSTEXPR DisconnectRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DisconnectRequest(const DisconnectRequest& from);
  DisconnectRequest(DisconnectRequest&& from) noexcept
    : DisconnectRequest() {
    *this = ::std::move(from);
  }

  inline DisconnectRequest& operator=(const DisconnectRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DisconnectRequest& operator=(DisconnectRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DisconnectRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const DisconnectRequest* internal_default_instance() {
    return reinterpret_cast<const DisconnectRequest*>(
               &_DisconnectRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(DisconnectRequest& a, DisconnectRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DisconnectRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DisconnectRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DisconnectRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DisconnectRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DisconnectRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DisconnectRequest& from) {
    DisconnectRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DisconnectRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "v6.services.p2p.DisconnectRequest";
  }
  protected:
  explicit DisconnectRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kClientIdentityFieldNumber = 1,
  };
  // string client_identity = 1;
  void clear_client_identity();
  const std::string& client_identity() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_client_identity(ArgT0&& arg0, ArgT... args);
  std::string* mutable_client_identity();
  PROTOBUF_NODISCARD std::string* release_client_identity();
  void set_allocated_client_identity(std::string* client_identity);
  private:
  const std::string& _internal_client_identity() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_client_identity(const std::string& value);
  std::string* _internal_mutable_client_identity();
  public:

  // @@protoc_insertion_point(class_scope:v6.services.p2p.DisconnectRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr client_identity_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_webrtc_5fmanager_2eproto;
};
// -------------------------------------------------------------------

class DisconnectResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:v6.services.p2p.DisconnectResponse) */ {
 public:
  inline DisconnectResponse() : DisconnectResponse(nullptr) {}
  ~DisconnectResponse() override;
  explicit PROTOBUF_CONSTEXPR DisconnectResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DisconnectResponse(const DisconnectResponse& from);
  DisconnectResponse(DisconnectResponse&& from) noexcept
    : DisconnectResponse() {
    *this = ::std::move(from);
  }

  inline DisconnectResponse& operator=(const DisconnectResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline DisconnectResponse& operator=(DisconnectResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DisconnectResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const DisconnectResponse* internal_default_instance() {
    return reinterpret_cast<const DisconnectResponse*>(
               &_DisconnectResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(DisconnectResponse& a, DisconnectResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(DisconnectResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DisconnectResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DisconnectResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DisconnectResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DisconnectResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DisconnectResponse& from) {
    DisconnectResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DisconnectResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "v6.services.p2p.DisconnectResponse";
  }
  protected:
  explicit DisconnectResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kClientIdentityFieldNumber = 1,
  };
  // string client_identity = 1;
  void clear_client_identity();
  const std::string& client_identity() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_client_identity(ArgT0&& arg0, ArgT... args);
  std::string* mutable_client_identity();
  PROTOBUF_NODISCARD std::string* release_client_identity();
  void set_allocated_client_identity(std::string* client_identity);
  private:
  const std::string& _internal_client_identity() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_client_identity(const std::string& value);
  std::string* _internal_mutable_client_identity();
  public:

  // @@protoc_insertion_point(class_scope:v6.services.p2p.DisconnectResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr client_identity_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_webrtc_5fmanager_2eproto;
};
// -------------------------------------------------------------------

class SendPeerIceCandidateRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:v6.services.p2p.SendPeerIceCandidateRequest) */ {
 public:
  inline SendPeerIceCandidateRequest() : SendPeerIceCandidateRequest(nullptr) {}
  ~SendPeerIceCandidateRequest() override;
  explicit PROTOBUF_CONSTEXPR SendPeerIceCandidateRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SendPeerIceCandidateRequest(const SendPeerIceCandidateRequest& from);
  SendPeerIceCandidateRequest(SendPeerIceCandidateRequest&& from) noexcept
    : SendPeerIceCandidateRequest() {
    *this = ::std::move(from);
  }

  inline SendPeerIceCandidateRequest& operator=(const SendPeerIceCandidateRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SendPeerIceCandidateRequest& operator=(SendPeerIceCandidateRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SendPeerIceCandidateRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SendPeerIceCandidateRequest* internal_default_instance() {
    return reinterpret_cast<const SendPeerIceCandidateRequest*>(
               &_SendPeerIceCandidateRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(SendPeerIceCandidateRequest& a, SendPeerIceCandidateRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SendPeerIceCandidateRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SendPeerIceCandidateRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SendPeerIceCandidateRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SendPeerIceCandidateRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SendPeerIceCandidateRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SendPeerIceCandidateRequest& from) {
    SendPeerIceCandidateRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SendPeerIceCandidateRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "v6.services.p2p.SendPeerIceCandidateRequest";
  }
  protected:
  explicit SendPeerIceCandidateRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kClientIdentityFieldNumber = 1,
    kCandidateFieldNumber = 3,
  };
  // string client_identity = 1;
  void clear_client_identity();
  const std::string& client_identity() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_client_identity(ArgT0&& arg0, ArgT... args);
  std::string* mutable_client_identity();
  PROTOBUF_NODISCARD std::string* release_client_identity();
  void set_allocated_client_identity(std::string* client_identity);
  private:
  const std::string& _internal_client_identity() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_client_identity(const std::string& value);
  std::string* _internal_mutable_client_identity();
  public:

  // string candidate = 3;
  void clear_candidate();
  const std::string& candidate() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_candidate(ArgT0&& arg0, ArgT... args);
  std::string* mutable_candidate();
  PROTOBUF_NODISCARD std::string* release_candidate();
  void set_allocated_candidate(std::string* candidate);
  private:
  const std::string& _internal_candidate() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_candidate(const std::string& value);
  std::string* _internal_mutable_candidate();
  public:

  // @@protoc_insertion_point(class_scope:v6.services.p2p.SendPeerIceCandidateRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr client_identity_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr candidate_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_webrtc_5fmanager_2eproto;
};
// -------------------------------------------------------------------

class SendPeerIceCandidateResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:v6.services.p2p.SendPeerIceCandidateResponse) */ {
 public:
  inline SendPeerIceCandidateResponse() : SendPeerIceCandidateResponse(nullptr) {}
  ~SendPeerIceCandidateResponse() override;
  explicit PROTOBUF_CONSTEXPR SendPeerIceCandidateResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SendPeerIceCandidateResponse(const SendPeerIceCandidateResponse& from);
  SendPeerIceCandidateResponse(SendPeerIceCandidateResponse&& from) noexcept
    : SendPeerIceCandidateResponse() {
    *this = ::std::move(from);
  }

  inline SendPeerIceCandidateResponse& operator=(const SendPeerIceCandidateResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SendPeerIceCandidateResponse& operator=(SendPeerIceCandidateResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SendPeerIceCandidateResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const SendPeerIceCandidateResponse* internal_default_instance() {
    return reinterpret_cast<const SendPeerIceCandidateResponse*>(
               &_SendPeerIceCandidateResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(SendPeerIceCandidateResponse& a, SendPeerIceCandidateResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SendPeerIceCandidateResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SendPeerIceCandidateResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SendPeerIceCandidateResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SendPeerIceCandidateResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SendPeerIceCandidateResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SendPeerIceCandidateResponse& from) {
    SendPeerIceCandidateResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SendPeerIceCandidateResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "v6.services.p2p.SendPeerIceCandidateResponse";
  }
  protected:
  explicit SendPeerIceCandidateResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kClientIdentityFieldNumber = 1,
  };
  // string client_identity = 1;
  void clear_client_identity();
  const std::string& client_identity() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_client_identity(ArgT0&& arg0, ArgT... args);
  std::string* mutable_client_identity();
  PROTOBUF_NODISCARD std::string* release_client_identity();
  void set_allocated_client_identity(std::string* client_identity);
  private:
  const std::string& _internal_client_identity() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_client_identity(const std::string& value);
  std::string* _internal_mutable_client_identity();
  public:

  // @@protoc_insertion_point(class_scope:v6.services.p2p.SendPeerIceCandidateResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr client_identity_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_webrtc_5fmanager_2eproto;
};
// -------------------------------------------------------------------

class ReceiveRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:v6.services.p2p.ReceiveRequest) */ {
 public:
  inline ReceiveRequest() : ReceiveRequest(nullptr) {}
  ~ReceiveRequest() override;
  explicit PROTOBUF_CONSTEXPR ReceiveRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReceiveRequest(const ReceiveRequest& from);
  ReceiveRequest(ReceiveRequest&& from) noexcept
    : ReceiveRequest() {
    *this = ::std::move(from);
  }

  inline ReceiveRequest& operator=(const ReceiveRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReceiveRequest& operator=(ReceiveRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReceiveRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReceiveRequest* internal_default_instance() {
    return reinterpret_cast<const ReceiveRequest*>(
               &_ReceiveRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(ReceiveRequest& a, ReceiveRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ReceiveRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReceiveRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ReceiveRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ReceiveRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ReceiveRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ReceiveRequest& from) {
    ReceiveRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReceiveRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "v6.services.p2p.ReceiveRequest";
  }
  protected:
  explicit ReceiveRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // string id = 1;
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // @@protoc_insertion_point(class_scope:v6.services.p2p.ReceiveRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_webrtc_5fmanager_2eproto;
};
// -------------------------------------------------------------------

class ReceiveResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:v6.services.p2p.ReceiveResponse) */ {
 public:
  inline ReceiveResponse() : ReceiveResponse(nullptr) {}
  ~ReceiveResponse() override;
  explicit PROTOBUF_CONSTEXPR ReceiveResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReceiveResponse(const ReceiveResponse& from);
  ReceiveResponse(ReceiveResponse&& from) noexcept
    : ReceiveResponse() {
    *this = ::std::move(from);
  }

  inline ReceiveResponse& operator=(const ReceiveResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReceiveResponse& operator=(ReceiveResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReceiveResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReceiveResponse* internal_default_instance() {
    return reinterpret_cast<const ReceiveResponse*>(
               &_ReceiveResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(ReceiveResponse& a, ReceiveResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ReceiveResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReceiveResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ReceiveResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ReceiveResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ReceiveResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ReceiveResponse& from) {
    ReceiveResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReceiveResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "v6.services.p2p.ReceiveResponse";
  }
  protected:
  explicit ReceiveResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 1,
  };
  // string data = 1;
  void clear_data();
  const std::string& data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_data();
  PROTOBUF_NODISCARD std::string* release_data();
  void set_allocated_data(std::string* data);
  private:
  const std::string& _internal_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // @@protoc_insertion_point(class_scope:v6.services.p2p.ReceiveResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_webrtc_5fmanager_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// StartDownloadRequest

// string client_identity = 1;
inline void StartDownloadRequest::clear_client_identity() {
  _impl_.client_identity_.ClearToEmpty();
}
inline const std::string& StartDownloadRequest::client_identity() const {
  // @@protoc_insertion_point(field_get:v6.services.p2p.StartDownloadRequest.client_identity)
  return _internal_client_identity();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void StartDownloadRequest::set_client_identity(ArgT0&& arg0, ArgT... args) {
 
 _impl_.client_identity_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:v6.services.p2p.StartDownloadRequest.client_identity)
}
inline std::string* StartDownloadRequest::mutable_client_identity() {
  std::string* _s = _internal_mutable_client_identity();
  // @@protoc_insertion_point(field_mutable:v6.services.p2p.StartDownloadRequest.client_identity)
  return _s;
}
inline const std::string& StartDownloadRequest::_internal_client_identity() const {
  return _impl_.client_identity_.Get();
}
inline void StartDownloadRequest::_internal_set_client_identity(const std::string& value) {
  
  _impl_.client_identity_.Set(value, GetArenaForAllocation());
}
inline std::string* StartDownloadRequest::_internal_mutable_client_identity() {
  
  return _impl_.client_identity_.Mutable(GetArenaForAllocation());
}
inline std::string* StartDownloadRequest::release_client_identity() {
  // @@protoc_insertion_point(field_release:v6.services.p2p.StartDownloadRequest.client_identity)
  return _impl_.client_identity_.Release();
}
inline void StartDownloadRequest::set_allocated_client_identity(std::string* client_identity) {
  if (client_identity != nullptr) {
    
  } else {
    
  }
  _impl_.client_identity_.SetAllocated(client_identity, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.client_identity_.IsDefault()) {
    _impl_.client_identity_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:v6.services.p2p.StartDownloadRequest.client_identity)
}

// string content_identity = 2;
inline void StartDownloadRequest::clear_content_identity() {
  _impl_.content_identity_.ClearToEmpty();
}
inline const std::string& StartDownloadRequest::content_identity() const {
  // @@protoc_insertion_point(field_get:v6.services.p2p.StartDownloadRequest.content_identity)
  return _internal_content_identity();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void StartDownloadRequest::set_content_identity(ArgT0&& arg0, ArgT... args) {
 
 _impl_.content_identity_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:v6.services.p2p.StartDownloadRequest.content_identity)
}
inline std::string* StartDownloadRequest::mutable_content_identity() {
  std::string* _s = _internal_mutable_content_identity();
  // @@protoc_insertion_point(field_mutable:v6.services.p2p.StartDownloadRequest.content_identity)
  return _s;
}
inline const std::string& StartDownloadRequest::_internal_content_identity() const {
  return _impl_.content_identity_.Get();
}
inline void StartDownloadRequest::_internal_set_content_identity(const std::string& value) {
  
  _impl_.content_identity_.Set(value, GetArenaForAllocation());
}
inline std::string* StartDownloadRequest::_internal_mutable_content_identity() {
  
  return _impl_.content_identity_.Mutable(GetArenaForAllocation());
}
inline std::string* StartDownloadRequest::release_content_identity() {
  // @@protoc_insertion_point(field_release:v6.services.p2p.StartDownloadRequest.content_identity)
  return _impl_.content_identity_.Release();
}
inline void StartDownloadRequest::set_allocated_content_identity(std::string* content_identity) {
  if (content_identity != nullptr) {
    
  } else {
    
  }
  _impl_.content_identity_.SetAllocated(content_identity, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.content_identity_.IsDefault()) {
    _impl_.content_identity_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:v6.services.p2p.StartDownloadRequest.content_identity)
}

// int64 peer_limit = 3;
inline void StartDownloadRequest::clear_peer_limit() {
  _impl_.peer_limit_ = int64_t{0};
}
inline int64_t StartDownloadRequest::_internal_peer_limit() const {
  return _impl_.peer_limit_;
}
inline int64_t StartDownloadRequest::peer_limit() const {
  // @@protoc_insertion_point(field_get:v6.services.p2p.StartDownloadRequest.peer_limit)
  return _internal_peer_limit();
}
inline void StartDownloadRequest::_internal_set_peer_limit(int64_t value) {
  
  _impl_.peer_limit_ = value;
}
inline void StartDownloadRequest::set_peer_limit(int64_t value) {
  _internal_set_peer_limit(value);
  // @@protoc_insertion_point(field_set:v6.services.p2p.StartDownloadRequest.peer_limit)
}

// -------------------------------------------------------------------

// RtcPeerInfo

// string client_identity = 1;
inline void RtcPeerInfo::clear_client_identity() {
  _impl_.client_identity_.ClearToEmpty();
}
inline const std::string& RtcPeerInfo::client_identity() const {
  // @@protoc_insertion_point(field_get:v6.services.p2p.RtcPeerInfo.client_identity)
  return _internal_client_identity();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RtcPeerInfo::set_client_identity(ArgT0&& arg0, ArgT... args) {
 
 _impl_.client_identity_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:v6.services.p2p.RtcPeerInfo.client_identity)
}
inline std::string* RtcPeerInfo::mutable_client_identity() {
  std::string* _s = _internal_mutable_client_identity();
  // @@protoc_insertion_point(field_mutable:v6.services.p2p.RtcPeerInfo.client_identity)
  return _s;
}
inline const std::string& RtcPeerInfo::_internal_client_identity() const {
  return _impl_.client_identity_.Get();
}
inline void RtcPeerInfo::_internal_set_client_identity(const std::string& value) {
  
  _impl_.client_identity_.Set(value, GetArenaForAllocation());
}
inline std::string* RtcPeerInfo::_internal_mutable_client_identity() {
  
  return _impl_.client_identity_.Mutable(GetArenaForAllocation());
}
inline std::string* RtcPeerInfo::release_client_identity() {
  // @@protoc_insertion_point(field_release:v6.services.p2p.RtcPeerInfo.client_identity)
  return _impl_.client_identity_.Release();
}
inline void RtcPeerInfo::set_allocated_client_identity(std::string* client_identity) {
  if (client_identity != nullptr) {
    
  } else {
    
  }
  _impl_.client_identity_.SetAllocated(client_identity, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.client_identity_.IsDefault()) {
    _impl_.client_identity_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:v6.services.p2p.RtcPeerInfo.client_identity)
}

// string content_identity = 2;
inline void RtcPeerInfo::clear_content_identity() {
  _impl_.content_identity_.ClearToEmpty();
}
inline const std::string& RtcPeerInfo::content_identity() const {
  // @@protoc_insertion_point(field_get:v6.services.p2p.RtcPeerInfo.content_identity)
  return _internal_content_identity();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RtcPeerInfo::set_content_identity(ArgT0&& arg0, ArgT... args) {
 
 _impl_.content_identity_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:v6.services.p2p.RtcPeerInfo.content_identity)
}
inline std::string* RtcPeerInfo::mutable_content_identity() {
  std::string* _s = _internal_mutable_content_identity();
  // @@protoc_insertion_point(field_mutable:v6.services.p2p.RtcPeerInfo.content_identity)
  return _s;
}
inline const std::string& RtcPeerInfo::_internal_content_identity() const {
  return _impl_.content_identity_.Get();
}
inline void RtcPeerInfo::_internal_set_content_identity(const std::string& value) {
  
  _impl_.content_identity_.Set(value, GetArenaForAllocation());
}
inline std::string* RtcPeerInfo::_internal_mutable_content_identity() {
  
  return _impl_.content_identity_.Mutable(GetArenaForAllocation());
}
inline std::string* RtcPeerInfo::release_content_identity() {
  // @@protoc_insertion_point(field_release:v6.services.p2p.RtcPeerInfo.content_identity)
  return _impl_.content_identity_.Release();
}
inline void RtcPeerInfo::set_allocated_content_identity(std::string* content_identity) {
  if (content_identity != nullptr) {
    
  } else {
    
  }
  _impl_.content_identity_.SetAllocated(content_identity, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.content_identity_.IsDefault()) {
    _impl_.content_identity_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:v6.services.p2p.RtcPeerInfo.content_identity)
}

// string sdp = 3;
inline void RtcPeerInfo::clear_sdp() {
  _impl_.sdp_.ClearToEmpty();
}
inline const std::string& RtcPeerInfo::sdp() const {
  // @@protoc_insertion_point(field_get:v6.services.p2p.RtcPeerInfo.sdp)
  return _internal_sdp();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RtcPeerInfo::set_sdp(ArgT0&& arg0, ArgT... args) {
 
 _impl_.sdp_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:v6.services.p2p.RtcPeerInfo.sdp)
}
inline std::string* RtcPeerInfo::mutable_sdp() {
  std::string* _s = _internal_mutable_sdp();
  // @@protoc_insertion_point(field_mutable:v6.services.p2p.RtcPeerInfo.sdp)
  return _s;
}
inline const std::string& RtcPeerInfo::_internal_sdp() const {
  return _impl_.sdp_.Get();
}
inline void RtcPeerInfo::_internal_set_sdp(const std::string& value) {
  
  _impl_.sdp_.Set(value, GetArenaForAllocation());
}
inline std::string* RtcPeerInfo::_internal_mutable_sdp() {
  
  return _impl_.sdp_.Mutable(GetArenaForAllocation());
}
inline std::string* RtcPeerInfo::release_sdp() {
  // @@protoc_insertion_point(field_release:v6.services.p2p.RtcPeerInfo.sdp)
  return _impl_.sdp_.Release();
}
inline void RtcPeerInfo::set_allocated_sdp(std::string* sdp) {
  if (sdp != nullptr) {
    
  } else {
    
  }
  _impl_.sdp_.SetAllocated(sdp, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.sdp_.IsDefault()) {
    _impl_.sdp_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:v6.services.p2p.RtcPeerInfo.sdp)
}

// -------------------------------------------------------------------

// StartDownloadResponse

// string content_identity = 1;
inline void StartDownloadResponse::clear_content_identity() {
  _impl_.content_identity_.ClearToEmpty();
}
inline const std::string& StartDownloadResponse::content_identity() const {
  // @@protoc_insertion_point(field_get:v6.services.p2p.StartDownloadResponse.content_identity)
  return _internal_content_identity();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void StartDownloadResponse::set_content_identity(ArgT0&& arg0, ArgT... args) {
 
 _impl_.content_identity_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:v6.services.p2p.StartDownloadResponse.content_identity)
}
inline std::string* StartDownloadResponse::mutable_content_identity() {
  std::string* _s = _internal_mutable_content_identity();
  // @@protoc_insertion_point(field_mutable:v6.services.p2p.StartDownloadResponse.content_identity)
  return _s;
}
inline const std::string& StartDownloadResponse::_internal_content_identity() const {
  return _impl_.content_identity_.Get();
}
inline void StartDownloadResponse::_internal_set_content_identity(const std::string& value) {
  
  _impl_.content_identity_.Set(value, GetArenaForAllocation());
}
inline std::string* StartDownloadResponse::_internal_mutable_content_identity() {
  
  return _impl_.content_identity_.Mutable(GetArenaForAllocation());
}
inline std::string* StartDownloadResponse::release_content_identity() {
  // @@protoc_insertion_point(field_release:v6.services.p2p.StartDownloadResponse.content_identity)
  return _impl_.content_identity_.Release();
}
inline void StartDownloadResponse::set_allocated_content_identity(std::string* content_identity) {
  if (content_identity != nullptr) {
    
  } else {
    
  }
  _impl_.content_identity_.SetAllocated(content_identity, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.content_identity_.IsDefault()) {
    _impl_.content_identity_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:v6.services.p2p.StartDownloadResponse.content_identity)
}

// repeated .v6.services.p2p.RtcPeerInfo peers = 2;
inline int StartDownloadResponse::_internal_peers_size() const {
  return _impl_.peers_.size();
}
inline int StartDownloadResponse::peers_size() const {
  return _internal_peers_size();
}
inline void StartDownloadResponse::clear_peers() {
  _impl_.peers_.Clear();
}
inline ::v6::services::p2p::RtcPeerInfo* StartDownloadResponse::mutable_peers(int index) {
  // @@protoc_insertion_point(field_mutable:v6.services.p2p.StartDownloadResponse.peers)
  return _impl_.peers_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::v6::services::p2p::RtcPeerInfo >*
StartDownloadResponse::mutable_peers() {
  // @@protoc_insertion_point(field_mutable_list:v6.services.p2p.StartDownloadResponse.peers)
  return &_impl_.peers_;
}
inline const ::v6::services::p2p::RtcPeerInfo& StartDownloadResponse::_internal_peers(int index) const {
  return _impl_.peers_.Get(index);
}
inline const ::v6::services::p2p::RtcPeerInfo& StartDownloadResponse::peers(int index) const {
  // @@protoc_insertion_point(field_get:v6.services.p2p.StartDownloadResponse.peers)
  return _internal_peers(index);
}
inline ::v6::services::p2p::RtcPeerInfo* StartDownloadResponse::_internal_add_peers() {
  return _impl_.peers_.Add();
}
inline ::v6::services::p2p::RtcPeerInfo* StartDownloadResponse::add_peers() {
  ::v6::services::p2p::RtcPeerInfo* _add = _internal_add_peers();
  // @@protoc_insertion_point(field_add:v6.services.p2p.StartDownloadResponse.peers)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::v6::services::p2p::RtcPeerInfo >&
StartDownloadResponse::peers() const {
  // @@protoc_insertion_point(field_list:v6.services.p2p.StartDownloadResponse.peers)
  return _impl_.peers_;
}

// repeated .v6.services.p2p.RtcPeerInfo backend_peers = 3;
inline int StartDownloadResponse::_internal_backend_peers_size() const {
  return _impl_.backend_peers_.size();
}
inline int StartDownloadResponse::backend_peers_size() const {
  return _internal_backend_peers_size();
}
inline void StartDownloadResponse::clear_backend_peers() {
  _impl_.backend_peers_.Clear();
}
inline ::v6::services::p2p::RtcPeerInfo* StartDownloadResponse::mutable_backend_peers(int index) {
  // @@protoc_insertion_point(field_mutable:v6.services.p2p.StartDownloadResponse.backend_peers)
  return _impl_.backend_peers_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::v6::services::p2p::RtcPeerInfo >*
StartDownloadResponse::mutable_backend_peers() {
  // @@protoc_insertion_point(field_mutable_list:v6.services.p2p.StartDownloadResponse.backend_peers)
  return &_impl_.backend_peers_;
}
inline const ::v6::services::p2p::RtcPeerInfo& StartDownloadResponse::_internal_backend_peers(int index) const {
  return _impl_.backend_peers_.Get(index);
}
inline const ::v6::services::p2p::RtcPeerInfo& StartDownloadResponse::backend_peers(int index) const {
  // @@protoc_insertion_point(field_get:v6.services.p2p.StartDownloadResponse.backend_peers)
  return _internal_backend_peers(index);
}
inline ::v6::services::p2p::RtcPeerInfo* StartDownloadResponse::_internal_add_backend_peers() {
  return _impl_.backend_peers_.Add();
}
inline ::v6::services::p2p::RtcPeerInfo* StartDownloadResponse::add_backend_peers() {
  ::v6::services::p2p::RtcPeerInfo* _add = _internal_add_backend_peers();
  // @@protoc_insertion_point(field_add:v6.services.p2p.StartDownloadResponse.backend_peers)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::v6::services::p2p::RtcPeerInfo >&
StartDownloadResponse::backend_peers() const {
  // @@protoc_insertion_point(field_list:v6.services.p2p.StartDownloadResponse.backend_peers)
  return _impl_.backend_peers_;
}

// -------------------------------------------------------------------

// StopDownloadRequest

// string client_identity = 1;
inline void StopDownloadRequest::clear_client_identity() {
  _impl_.client_identity_.ClearToEmpty();
}
inline const std::string& StopDownloadRequest::client_identity() const {
  // @@protoc_insertion_point(field_get:v6.services.p2p.StopDownloadRequest.client_identity)
  return _internal_client_identity();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void StopDownloadRequest::set_client_identity(ArgT0&& arg0, ArgT... args) {
 
 _impl_.client_identity_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:v6.services.p2p.StopDownloadRequest.client_identity)
}
inline std::string* StopDownloadRequest::mutable_client_identity() {
  std::string* _s = _internal_mutable_client_identity();
  // @@protoc_insertion_point(field_mutable:v6.services.p2p.StopDownloadRequest.client_identity)
  return _s;
}
inline const std::string& StopDownloadRequest::_internal_client_identity() const {
  return _impl_.client_identity_.Get();
}
inline void StopDownloadRequest::_internal_set_client_identity(const std::string& value) {
  
  _impl_.client_identity_.Set(value, GetArenaForAllocation());
}
inline std::string* StopDownloadRequest::_internal_mutable_client_identity() {
  
  return _impl_.client_identity_.Mutable(GetArenaForAllocation());
}
inline std::string* StopDownloadRequest::release_client_identity() {
  // @@protoc_insertion_point(field_release:v6.services.p2p.StopDownloadRequest.client_identity)
  return _impl_.client_identity_.Release();
}
inline void StopDownloadRequest::set_allocated_client_identity(std::string* client_identity) {
  if (client_identity != nullptr) {
    
  } else {
    
  }
  _impl_.client_identity_.SetAllocated(client_identity, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.client_identity_.IsDefault()) {
    _impl_.client_identity_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:v6.services.p2p.StopDownloadRequest.client_identity)
}

// string content_identity = 2;
inline void StopDownloadRequest::clear_content_identity() {
  _impl_.content_identity_.ClearToEmpty();
}
inline const std::string& StopDownloadRequest::content_identity() const {
  // @@protoc_insertion_point(field_get:v6.services.p2p.StopDownloadRequest.content_identity)
  return _internal_content_identity();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void StopDownloadRequest::set_content_identity(ArgT0&& arg0, ArgT... args) {
 
 _impl_.content_identity_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:v6.services.p2p.StopDownloadRequest.content_identity)
}
inline std::string* StopDownloadRequest::mutable_content_identity() {
  std::string* _s = _internal_mutable_content_identity();
  // @@protoc_insertion_point(field_mutable:v6.services.p2p.StopDownloadRequest.content_identity)
  return _s;
}
inline const std::string& StopDownloadRequest::_internal_content_identity() const {
  return _impl_.content_identity_.Get();
}
inline void StopDownloadRequest::_internal_set_content_identity(const std::string& value) {
  
  _impl_.content_identity_.Set(value, GetArenaForAllocation());
}
inline std::string* StopDownloadRequest::_internal_mutable_content_identity() {
  
  return _impl_.content_identity_.Mutable(GetArenaForAllocation());
}
inline std::string* StopDownloadRequest::release_content_identity() {
  // @@protoc_insertion_point(field_release:v6.services.p2p.StopDownloadRequest.content_identity)
  return _impl_.content_identity_.Release();
}
inline void StopDownloadRequest::set_allocated_content_identity(std::string* content_identity) {
  if (content_identity != nullptr) {
    
  } else {
    
  }
  _impl_.content_identity_.SetAllocated(content_identity, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.content_identity_.IsDefault()) {
    _impl_.content_identity_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:v6.services.p2p.StopDownloadRequest.content_identity)
}

// -------------------------------------------------------------------

// StopDownloadResponse

// string content_identity = 1;
inline void StopDownloadResponse::clear_content_identity() {
  _impl_.content_identity_.ClearToEmpty();
}
inline const std::string& StopDownloadResponse::content_identity() const {
  // @@protoc_insertion_point(field_get:v6.services.p2p.StopDownloadResponse.content_identity)
  return _internal_content_identity();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void StopDownloadResponse::set_content_identity(ArgT0&& arg0, ArgT... args) {
 
 _impl_.content_identity_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:v6.services.p2p.StopDownloadResponse.content_identity)
}
inline std::string* StopDownloadResponse::mutable_content_identity() {
  std::string* _s = _internal_mutable_content_identity();
  // @@protoc_insertion_point(field_mutable:v6.services.p2p.StopDownloadResponse.content_identity)
  return _s;
}
inline const std::string& StopDownloadResponse::_internal_content_identity() const {
  return _impl_.content_identity_.Get();
}
inline void StopDownloadResponse::_internal_set_content_identity(const std::string& value) {
  
  _impl_.content_identity_.Set(value, GetArenaForAllocation());
}
inline std::string* StopDownloadResponse::_internal_mutable_content_identity() {
  
  return _impl_.content_identity_.Mutable(GetArenaForAllocation());
}
inline std::string* StopDownloadResponse::release_content_identity() {
  // @@protoc_insertion_point(field_release:v6.services.p2p.StopDownloadResponse.content_identity)
  return _impl_.content_identity_.Release();
}
inline void StopDownloadResponse::set_allocated_content_identity(std::string* content_identity) {
  if (content_identity != nullptr) {
    
  } else {
    
  }
  _impl_.content_identity_.SetAllocated(content_identity, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.content_identity_.IsDefault()) {
    _impl_.content_identity_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:v6.services.p2p.StopDownloadResponse.content_identity)
}

// -------------------------------------------------------------------

// DisconnectRequest

// string client_identity = 1;
inline void DisconnectRequest::clear_client_identity() {
  _impl_.client_identity_.ClearToEmpty();
}
inline const std::string& DisconnectRequest::client_identity() const {
  // @@protoc_insertion_point(field_get:v6.services.p2p.DisconnectRequest.client_identity)
  return _internal_client_identity();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DisconnectRequest::set_client_identity(ArgT0&& arg0, ArgT... args) {
 
 _impl_.client_identity_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:v6.services.p2p.DisconnectRequest.client_identity)
}
inline std::string* DisconnectRequest::mutable_client_identity() {
  std::string* _s = _internal_mutable_client_identity();
  // @@protoc_insertion_point(field_mutable:v6.services.p2p.DisconnectRequest.client_identity)
  return _s;
}
inline const std::string& DisconnectRequest::_internal_client_identity() const {
  return _impl_.client_identity_.Get();
}
inline void DisconnectRequest::_internal_set_client_identity(const std::string& value) {
  
  _impl_.client_identity_.Set(value, GetArenaForAllocation());
}
inline std::string* DisconnectRequest::_internal_mutable_client_identity() {
  
  return _impl_.client_identity_.Mutable(GetArenaForAllocation());
}
inline std::string* DisconnectRequest::release_client_identity() {
  // @@protoc_insertion_point(field_release:v6.services.p2p.DisconnectRequest.client_identity)
  return _impl_.client_identity_.Release();
}
inline void DisconnectRequest::set_allocated_client_identity(std::string* client_identity) {
  if (client_identity != nullptr) {
    
  } else {
    
  }
  _impl_.client_identity_.SetAllocated(client_identity, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.client_identity_.IsDefault()) {
    _impl_.client_identity_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:v6.services.p2p.DisconnectRequest.client_identity)
}

// -------------------------------------------------------------------

// DisconnectResponse

// string client_identity = 1;
inline void DisconnectResponse::clear_client_identity() {
  _impl_.client_identity_.ClearToEmpty();
}
inline const std::string& DisconnectResponse::client_identity() const {
  // @@protoc_insertion_point(field_get:v6.services.p2p.DisconnectResponse.client_identity)
  return _internal_client_identity();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DisconnectResponse::set_client_identity(ArgT0&& arg0, ArgT... args) {
 
 _impl_.client_identity_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:v6.services.p2p.DisconnectResponse.client_identity)
}
inline std::string* DisconnectResponse::mutable_client_identity() {
  std::string* _s = _internal_mutable_client_identity();
  // @@protoc_insertion_point(field_mutable:v6.services.p2p.DisconnectResponse.client_identity)
  return _s;
}
inline const std::string& DisconnectResponse::_internal_client_identity() const {
  return _impl_.client_identity_.Get();
}
inline void DisconnectResponse::_internal_set_client_identity(const std::string& value) {
  
  _impl_.client_identity_.Set(value, GetArenaForAllocation());
}
inline std::string* DisconnectResponse::_internal_mutable_client_identity() {
  
  return _impl_.client_identity_.Mutable(GetArenaForAllocation());
}
inline std::string* DisconnectResponse::release_client_identity() {
  // @@protoc_insertion_point(field_release:v6.services.p2p.DisconnectResponse.client_identity)
  return _impl_.client_identity_.Release();
}
inline void DisconnectResponse::set_allocated_client_identity(std::string* client_identity) {
  if (client_identity != nullptr) {
    
  } else {
    
  }
  _impl_.client_identity_.SetAllocated(client_identity, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.client_identity_.IsDefault()) {
    _impl_.client_identity_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:v6.services.p2p.DisconnectResponse.client_identity)
}

// -------------------------------------------------------------------

// SendPeerIceCandidateRequest

// string client_identity = 1;
inline void SendPeerIceCandidateRequest::clear_client_identity() {
  _impl_.client_identity_.ClearToEmpty();
}
inline const std::string& SendPeerIceCandidateRequest::client_identity() const {
  // @@protoc_insertion_point(field_get:v6.services.p2p.SendPeerIceCandidateRequest.client_identity)
  return _internal_client_identity();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SendPeerIceCandidateRequest::set_client_identity(ArgT0&& arg0, ArgT... args) {
 
 _impl_.client_identity_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:v6.services.p2p.SendPeerIceCandidateRequest.client_identity)
}
inline std::string* SendPeerIceCandidateRequest::mutable_client_identity() {
  std::string* _s = _internal_mutable_client_identity();
  // @@protoc_insertion_point(field_mutable:v6.services.p2p.SendPeerIceCandidateRequest.client_identity)
  return _s;
}
inline const std::string& SendPeerIceCandidateRequest::_internal_client_identity() const {
  return _impl_.client_identity_.Get();
}
inline void SendPeerIceCandidateRequest::_internal_set_client_identity(const std::string& value) {
  
  _impl_.client_identity_.Set(value, GetArenaForAllocation());
}
inline std::string* SendPeerIceCandidateRequest::_internal_mutable_client_identity() {
  
  return _impl_.client_identity_.Mutable(GetArenaForAllocation());
}
inline std::string* SendPeerIceCandidateRequest::release_client_identity() {
  // @@protoc_insertion_point(field_release:v6.services.p2p.SendPeerIceCandidateRequest.client_identity)
  return _impl_.client_identity_.Release();
}
inline void SendPeerIceCandidateRequest::set_allocated_client_identity(std::string* client_identity) {
  if (client_identity != nullptr) {
    
  } else {
    
  }
  _impl_.client_identity_.SetAllocated(client_identity, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.client_identity_.IsDefault()) {
    _impl_.client_identity_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:v6.services.p2p.SendPeerIceCandidateRequest.client_identity)
}

// string candidate = 3;
inline void SendPeerIceCandidateRequest::clear_candidate() {
  _impl_.candidate_.ClearToEmpty();
}
inline const std::string& SendPeerIceCandidateRequest::candidate() const {
  // @@protoc_insertion_point(field_get:v6.services.p2p.SendPeerIceCandidateRequest.candidate)
  return _internal_candidate();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SendPeerIceCandidateRequest::set_candidate(ArgT0&& arg0, ArgT... args) {
 
 _impl_.candidate_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:v6.services.p2p.SendPeerIceCandidateRequest.candidate)
}
inline std::string* SendPeerIceCandidateRequest::mutable_candidate() {
  std::string* _s = _internal_mutable_candidate();
  // @@protoc_insertion_point(field_mutable:v6.services.p2p.SendPeerIceCandidateRequest.candidate)
  return _s;
}
inline const std::string& SendPeerIceCandidateRequest::_internal_candidate() const {
  return _impl_.candidate_.Get();
}
inline void SendPeerIceCandidateRequest::_internal_set_candidate(const std::string& value) {
  
  _impl_.candidate_.Set(value, GetArenaForAllocation());
}
inline std::string* SendPeerIceCandidateRequest::_internal_mutable_candidate() {
  
  return _impl_.candidate_.Mutable(GetArenaForAllocation());
}
inline std::string* SendPeerIceCandidateRequest::release_candidate() {
  // @@protoc_insertion_point(field_release:v6.services.p2p.SendPeerIceCandidateRequest.candidate)
  return _impl_.candidate_.Release();
}
inline void SendPeerIceCandidateRequest::set_allocated_candidate(std::string* candidate) {
  if (candidate != nullptr) {
    
  } else {
    
  }
  _impl_.candidate_.SetAllocated(candidate, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.candidate_.IsDefault()) {
    _impl_.candidate_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:v6.services.p2p.SendPeerIceCandidateRequest.candidate)
}

// -------------------------------------------------------------------

// SendPeerIceCandidateResponse

// string client_identity = 1;
inline void SendPeerIceCandidateResponse::clear_client_identity() {
  _impl_.client_identity_.ClearToEmpty();
}
inline const std::string& SendPeerIceCandidateResponse::client_identity() const {
  // @@protoc_insertion_point(field_get:v6.services.p2p.SendPeerIceCandidateResponse.client_identity)
  return _internal_client_identity();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SendPeerIceCandidateResponse::set_client_identity(ArgT0&& arg0, ArgT... args) {
 
 _impl_.client_identity_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:v6.services.p2p.SendPeerIceCandidateResponse.client_identity)
}
inline std::string* SendPeerIceCandidateResponse::mutable_client_identity() {
  std::string* _s = _internal_mutable_client_identity();
  // @@protoc_insertion_point(field_mutable:v6.services.p2p.SendPeerIceCandidateResponse.client_identity)
  return _s;
}
inline const std::string& SendPeerIceCandidateResponse::_internal_client_identity() const {
  return _impl_.client_identity_.Get();
}
inline void SendPeerIceCandidateResponse::_internal_set_client_identity(const std::string& value) {
  
  _impl_.client_identity_.Set(value, GetArenaForAllocation());
}
inline std::string* SendPeerIceCandidateResponse::_internal_mutable_client_identity() {
  
  return _impl_.client_identity_.Mutable(GetArenaForAllocation());
}
inline std::string* SendPeerIceCandidateResponse::release_client_identity() {
  // @@protoc_insertion_point(field_release:v6.services.p2p.SendPeerIceCandidateResponse.client_identity)
  return _impl_.client_identity_.Release();
}
inline void SendPeerIceCandidateResponse::set_allocated_client_identity(std::string* client_identity) {
  if (client_identity != nullptr) {
    
  } else {
    
  }
  _impl_.client_identity_.SetAllocated(client_identity, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.client_identity_.IsDefault()) {
    _impl_.client_identity_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:v6.services.p2p.SendPeerIceCandidateResponse.client_identity)
}

// -------------------------------------------------------------------

// ReceiveRequest

// string id = 1;
inline void ReceiveRequest::clear_id() {
  _impl_.id_.ClearToEmpty();
}
inline const std::string& ReceiveRequest::id() const {
  // @@protoc_insertion_point(field_get:v6.services.p2p.ReceiveRequest.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ReceiveRequest::set_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:v6.services.p2p.ReceiveRequest.id)
}
inline std::string* ReceiveRequest::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:v6.services.p2p.ReceiveRequest.id)
  return _s;
}
inline const std::string& ReceiveRequest::_internal_id() const {
  return _impl_.id_.Get();
}
inline void ReceiveRequest::_internal_set_id(const std::string& value) {
  
  _impl_.id_.Set(value, GetArenaForAllocation());
}
inline std::string* ReceiveRequest::_internal_mutable_id() {
  
  return _impl_.id_.Mutable(GetArenaForAllocation());
}
inline std::string* ReceiveRequest::release_id() {
  // @@protoc_insertion_point(field_release:v6.services.p2p.ReceiveRequest.id)
  return _impl_.id_.Release();
}
inline void ReceiveRequest::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  _impl_.id_.SetAllocated(id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.id_.IsDefault()) {
    _impl_.id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:v6.services.p2p.ReceiveRequest.id)
}

// -------------------------------------------------------------------

// ReceiveResponse

// string data = 1;
inline void ReceiveResponse::clear_data() {
  _impl_.data_.ClearToEmpty();
}
inline const std::string& ReceiveResponse::data() const {
  // @@protoc_insertion_point(field_get:v6.services.p2p.ReceiveResponse.data)
  return _internal_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ReceiveResponse::set_data(ArgT0&& arg0, ArgT... args) {
 
 _impl_.data_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:v6.services.p2p.ReceiveResponse.data)
}
inline std::string* ReceiveResponse::mutable_data() {
  std::string* _s = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:v6.services.p2p.ReceiveResponse.data)
  return _s;
}
inline const std::string& ReceiveResponse::_internal_data() const {
  return _impl_.data_.Get();
}
inline void ReceiveResponse::_internal_set_data(const std::string& value) {
  
  _impl_.data_.Set(value, GetArenaForAllocation());
}
inline std::string* ReceiveResponse::_internal_mutable_data() {
  
  return _impl_.data_.Mutable(GetArenaForAllocation());
}
inline std::string* ReceiveResponse::release_data() {
  // @@protoc_insertion_point(field_release:v6.services.p2p.ReceiveResponse.data)
  return _impl_.data_.Release();
}
inline void ReceiveResponse::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  _impl_.data_.SetAllocated(data, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.data_.IsDefault()) {
    _impl_.data_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:v6.services.p2p.ReceiveResponse.data)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace p2p
}  // namespace services
}  // namespace v6

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_webrtc_5fmanager_2eproto
