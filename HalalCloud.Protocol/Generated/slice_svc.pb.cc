// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: slice_svc.proto

#include "slice_svc.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace v6 {
namespace services {
namespace pub {
PROTOBUF_CONSTEXPR Slice::Slice(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.identity_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.peer_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.server_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.data_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.type_)*/0
  , /*decltype(_impl_.status_)*/0
  , /*decltype(_impl_.update_ts_)*/int64_t{0}
  , /*decltype(_impl_.create_ts_)*/int64_t{0}
  , /*decltype(_impl_.need_data_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SliceDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SliceDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SliceDefaultTypeInternal() {}
  union {
    Slice _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SliceDefaultTypeInternal _Slice_default_instance_;
PROTOBUF_CONSTEXPR Meta::Meta(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.identity_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.data_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MetaDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MetaDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MetaDefaultTypeInternal() {}
  union {
    Meta _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MetaDefaultTypeInternal _Meta_default_instance_;
PROTOBUF_CONSTEXPR FastLookup::FastLookup(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.identity_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.wcs_etag_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.sha1_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.head_sha1_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.special_sha1_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.lh_hash_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.file_size_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct FastLookupDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FastLookupDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FastLookupDefaultTypeInternal() {}
  union {
    FastLookup _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FastLookupDefaultTypeInternal _FastLookup_default_instance_;
PROTOBUF_CONSTEXPR FastLookupRequest::FastLookupRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.info_)*/nullptr
  , /*decltype(_impl_.type_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct FastLookupRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FastLookupRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FastLookupRequestDefaultTypeInternal() {}
  union {
    FastLookupRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FastLookupRequestDefaultTypeInternal _FastLookupRequest_default_instance_;
}  // namespace pub
}  // namespace services
}  // namespace v6
static ::_pb::Metadata file_level_metadata_slice_5fsvc_2eproto[4];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_slice_5fsvc_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_slice_5fsvc_2eproto = nullptr;

const uint32_t TableStruct_slice_5fsvc_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::v6::services::pub::Slice, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::v6::services::pub::Slice, _impl_.identity_),
  PROTOBUF_FIELD_OFFSET(::v6::services::pub::Slice, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::v6::services::pub::Slice, _impl_.status_),
  PROTOBUF_FIELD_OFFSET(::v6::services::pub::Slice, _impl_.update_ts_),
  PROTOBUF_FIELD_OFFSET(::v6::services::pub::Slice, _impl_.peer_),
  PROTOBUF_FIELD_OFFSET(::v6::services::pub::Slice, _impl_.create_ts_),
  PROTOBUF_FIELD_OFFSET(::v6::services::pub::Slice, _impl_.server_),
  PROTOBUF_FIELD_OFFSET(::v6::services::pub::Slice, _impl_.need_data_),
  PROTOBUF_FIELD_OFFSET(::v6::services::pub::Slice, _impl_.data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::v6::services::pub::Meta, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::v6::services::pub::Meta, _impl_.identity_),
  PROTOBUF_FIELD_OFFSET(::v6::services::pub::Meta, _impl_.data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::v6::services::pub::FastLookup, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::v6::services::pub::FastLookup, _impl_.identity_),
  PROTOBUF_FIELD_OFFSET(::v6::services::pub::FastLookup, _impl_.wcs_etag_),
  PROTOBUF_FIELD_OFFSET(::v6::services::pub::FastLookup, _impl_.sha1_),
  PROTOBUF_FIELD_OFFSET(::v6::services::pub::FastLookup, _impl_.head_sha1_),
  PROTOBUF_FIELD_OFFSET(::v6::services::pub::FastLookup, _impl_.file_size_),
  PROTOBUF_FIELD_OFFSET(::v6::services::pub::FastLookup, _impl_.special_sha1_),
  PROTOBUF_FIELD_OFFSET(::v6::services::pub::FastLookup, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::v6::services::pub::FastLookup, _impl_.lh_hash_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::v6::services::pub::FastLookupRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::v6::services::pub::FastLookupRequest, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::v6::services::pub::FastLookupRequest, _impl_.info_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::v6::services::pub::Slice)},
  { 15, -1, -1, sizeof(::v6::services::pub::Meta)},
  { 23, -1, -1, sizeof(::v6::services::pub::FastLookup)},
  { 37, -1, -1, sizeof(::v6::services::pub::FastLookupRequest)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::v6::services::pub::_Slice_default_instance_._instance,
  &::v6::services::pub::_Meta_default_instance_._instance,
  &::v6::services::pub::_FastLookup_default_instance_._instance,
  &::v6::services::pub::_FastLookupRequest_default_instance_._instance,
};

const char descriptor_table_protodef_slice_5fsvc_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\017slice_svc.proto\022\017v6.services.pub\"\234\001\n\005S"
  "lice\022\020\n\010identity\030\001 \001(\t\022\014\n\004type\030\002 \001(\005\022\016\n\006"
  "status\030\003 \001(\005\022\021\n\tupdate_ts\030\005 \001(\003\022\014\n\004peer\030"
  "\006 \001(\t\022\021\n\tcreate_ts\030\007 \001(\003\022\016\n\006server\030\010 \001(\t"
  "\022\021\n\tneed_data\030\t \001(\010\022\014\n\004data\030\n \001(\014\"&\n\004Met"
  "a\022\020\n\010identity\030\001 \001(\t\022\014\n\004data\030\002 \001(\014\"\231\001\n\nFa"
  "stLookup\022\020\n\010identity\030\001 \001(\t\022\020\n\010wcs_etag\030\002"
  " \001(\t\022\014\n\004sha1\030\003 \001(\t\022\021\n\thead_sha1\030\004 \001(\t\022\021\n"
  "\tfile_size\030\005 \001(\003\022\024\n\014special_sha1\030\006 \001(\t\022\014"
  "\n\004name\030\007 \001(\t\022\017\n\007lh_hash\030\010 \001(\t\"L\n\021FastLoo"
  "kupRequest\022\014\n\004type\030\001 \001(\005\022)\n\004info\030\002 \001(\0132\033"
  ".v6.services.pub.FastLookup2\243\003\n\010PubSlice"
  "\022<\n\010GetSlice\022\026.v6.services.pub.Slice\032\026.v"
  "6.services.pub.Slice\"\000\022\?\n\013CreateSlice\022\026."
  "v6.services.pub.Slice\032\026.v6.services.pub."
  "Slice\"\000\0229\n\007GetMeta\022\025.v6.services.pub.Met"
  "a\032\025.v6.services.pub.Meta\"\000\022<\n\nCreateMeta"
  "\022\025.v6.services.pub.Meta\032\025.v6.services.pu"
  "b.Meta\"\000\022K\n\rAddFastLookup\022\033.v6.services."
  "pub.FastLookup\032\033.v6.services.pub.FastLoo"
  "kup\"\000\022R\n\rGetFastLookup\022\".v6.services.pub"
  ".FastLookupRequest\032\033.v6.services.pub.Fas"
  "tLookup\"\000B4Z2github.com/city404/v6-publi"
  "c-rpc-proto/go/v6/sliceb\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_slice_5fsvc_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_slice_5fsvc_2eproto = {
    false, false, 951, descriptor_table_protodef_slice_5fsvc_2eproto,
    "slice_svc.proto",
    &descriptor_table_slice_5fsvc_2eproto_once, nullptr, 0, 4,
    schemas, file_default_instances, TableStruct_slice_5fsvc_2eproto::offsets,
    file_level_metadata_slice_5fsvc_2eproto, file_level_enum_descriptors_slice_5fsvc_2eproto,
    file_level_service_descriptors_slice_5fsvc_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_slice_5fsvc_2eproto_getter() {
  return &descriptor_table_slice_5fsvc_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_slice_5fsvc_2eproto(&descriptor_table_slice_5fsvc_2eproto);
namespace v6 {
namespace services {
namespace pub {

// ===================================================================

class Slice::_Internal {
 public:
};

Slice::Slice(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:v6.services.pub.Slice)
}
Slice::Slice(const Slice& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Slice* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.identity_){}
    , decltype(_impl_.peer_){}
    , decltype(_impl_.server_){}
    , decltype(_impl_.data_){}
    , decltype(_impl_.type_){}
    , decltype(_impl_.status_){}
    , decltype(_impl_.update_ts_){}
    , decltype(_impl_.create_ts_){}
    , decltype(_impl_.need_data_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.identity_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.identity_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_identity().empty()) {
    _this->_impl_.identity_.Set(from._internal_identity(), 
      _this->GetArenaForAllocation());
  }
  _impl_.peer_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.peer_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_peer().empty()) {
    _this->_impl_.peer_.Set(from._internal_peer(), 
      _this->GetArenaForAllocation());
  }
  _impl_.server_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.server_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_server().empty()) {
    _this->_impl_.server_.Set(from._internal_server(), 
      _this->GetArenaForAllocation());
  }
  _impl_.data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_data().empty()) {
    _this->_impl_.data_.Set(from._internal_data(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.type_, &from._impl_.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.need_data_) -
    reinterpret_cast<char*>(&_impl_.type_)) + sizeof(_impl_.need_data_));
  // @@protoc_insertion_point(copy_constructor:v6.services.pub.Slice)
}

inline void Slice::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.identity_){}
    , decltype(_impl_.peer_){}
    , decltype(_impl_.server_){}
    , decltype(_impl_.data_){}
    , decltype(_impl_.type_){0}
    , decltype(_impl_.status_){0}
    , decltype(_impl_.update_ts_){int64_t{0}}
    , decltype(_impl_.create_ts_){int64_t{0}}
    , decltype(_impl_.need_data_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.identity_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.identity_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.peer_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.peer_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.server_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.server_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Slice::~Slice() {
  // @@protoc_insertion_point(destructor:v6.services.pub.Slice)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Slice::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.identity_.Destroy();
  _impl_.peer_.Destroy();
  _impl_.server_.Destroy();
  _impl_.data_.Destroy();
}

void Slice::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Slice::Clear() {
// @@protoc_insertion_point(message_clear_start:v6.services.pub.Slice)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.identity_.ClearToEmpty();
  _impl_.peer_.ClearToEmpty();
  _impl_.server_.ClearToEmpty();
  _impl_.data_.ClearToEmpty();
  ::memset(&_impl_.type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.need_data_) -
      reinterpret_cast<char*>(&_impl_.type_)) + sizeof(_impl_.need_data_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Slice::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string identity = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_identity();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "v6.services.pub.Slice.identity"));
        } else
          goto handle_unusual;
        continue;
      // int32 type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 status = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 update_ts = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.update_ts_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string peer = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_peer();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "v6.services.pub.Slice.peer"));
        } else
          goto handle_unusual;
        continue;
      // int64 create_ts = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.create_ts_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string server = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_server();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "v6.services.pub.Slice.server"));
        } else
          goto handle_unusual;
        continue;
      // bool need_data = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _impl_.need_data_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes data = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          auto str = _internal_mutable_data();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Slice::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:v6.services.pub.Slice)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string identity = 1;
  if (!this->_internal_identity().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_identity().data(), static_cast<int>(this->_internal_identity().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "v6.services.pub.Slice.identity");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_identity(), target);
  }

  // int32 type = 2;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_type(), target);
  }

  // int32 status = 3;
  if (this->_internal_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_status(), target);
  }

  // int64 update_ts = 5;
  if (this->_internal_update_ts() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(5, this->_internal_update_ts(), target);
  }

  // string peer = 6;
  if (!this->_internal_peer().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_peer().data(), static_cast<int>(this->_internal_peer().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "v6.services.pub.Slice.peer");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_peer(), target);
  }

  // int64 create_ts = 7;
  if (this->_internal_create_ts() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(7, this->_internal_create_ts(), target);
  }

  // string server = 8;
  if (!this->_internal_server().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_server().data(), static_cast<int>(this->_internal_server().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "v6.services.pub.Slice.server");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_server(), target);
  }

  // bool need_data = 9;
  if (this->_internal_need_data() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(9, this->_internal_need_data(), target);
  }

  // bytes data = 10;
  if (!this->_internal_data().empty()) {
    target = stream->WriteBytesMaybeAliased(
        10, this->_internal_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:v6.services.pub.Slice)
  return target;
}

size_t Slice::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:v6.services.pub.Slice)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string identity = 1;
  if (!this->_internal_identity().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_identity());
  }

  // string peer = 6;
  if (!this->_internal_peer().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_peer());
  }

  // string server = 8;
  if (!this->_internal_server().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_server());
  }

  // bytes data = 10;
  if (!this->_internal_data().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_data());
  }

  // int32 type = 2;
  if (this->_internal_type() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_type());
  }

  // int32 status = 3;
  if (this->_internal_status() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_status());
  }

  // int64 update_ts = 5;
  if (this->_internal_update_ts() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_update_ts());
  }

  // int64 create_ts = 7;
  if (this->_internal_create_ts() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_create_ts());
  }

  // bool need_data = 9;
  if (this->_internal_need_data() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Slice::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Slice::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Slice::GetClassData() const { return &_class_data_; }


void Slice::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Slice*>(&to_msg);
  auto& from = static_cast<const Slice&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:v6.services.pub.Slice)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_identity().empty()) {
    _this->_internal_set_identity(from._internal_identity());
  }
  if (!from._internal_peer().empty()) {
    _this->_internal_set_peer(from._internal_peer());
  }
  if (!from._internal_server().empty()) {
    _this->_internal_set_server(from._internal_server());
  }
  if (!from._internal_data().empty()) {
    _this->_internal_set_data(from._internal_data());
  }
  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  if (from._internal_status() != 0) {
    _this->_internal_set_status(from._internal_status());
  }
  if (from._internal_update_ts() != 0) {
    _this->_internal_set_update_ts(from._internal_update_ts());
  }
  if (from._internal_create_ts() != 0) {
    _this->_internal_set_create_ts(from._internal_create_ts());
  }
  if (from._internal_need_data() != 0) {
    _this->_internal_set_need_data(from._internal_need_data());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Slice::CopyFrom(const Slice& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:v6.services.pub.Slice)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Slice::IsInitialized() const {
  return true;
}

void Slice::InternalSwap(Slice* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.identity_, lhs_arena,
      &other->_impl_.identity_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.peer_, lhs_arena,
      &other->_impl_.peer_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.server_, lhs_arena,
      &other->_impl_.server_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.data_, lhs_arena,
      &other->_impl_.data_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Slice, _impl_.need_data_)
      + sizeof(Slice::_impl_.need_data_)
      - PROTOBUF_FIELD_OFFSET(Slice, _impl_.type_)>(
          reinterpret_cast<char*>(&_impl_.type_),
          reinterpret_cast<char*>(&other->_impl_.type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Slice::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_slice_5fsvc_2eproto_getter, &descriptor_table_slice_5fsvc_2eproto_once,
      file_level_metadata_slice_5fsvc_2eproto[0]);
}

// ===================================================================

class Meta::_Internal {
 public:
};

Meta::Meta(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:v6.services.pub.Meta)
}
Meta::Meta(const Meta& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Meta* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.identity_){}
    , decltype(_impl_.data_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.identity_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.identity_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_identity().empty()) {
    _this->_impl_.identity_.Set(from._internal_identity(), 
      _this->GetArenaForAllocation());
  }
  _impl_.data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_data().empty()) {
    _this->_impl_.data_.Set(from._internal_data(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:v6.services.pub.Meta)
}

inline void Meta::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.identity_){}
    , decltype(_impl_.data_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.identity_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.identity_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Meta::~Meta() {
  // @@protoc_insertion_point(destructor:v6.services.pub.Meta)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Meta::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.identity_.Destroy();
  _impl_.data_.Destroy();
}

void Meta::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Meta::Clear() {
// @@protoc_insertion_point(message_clear_start:v6.services.pub.Meta)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.identity_.ClearToEmpty();
  _impl_.data_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Meta::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string identity = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_identity();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "v6.services.pub.Meta.identity"));
        } else
          goto handle_unusual;
        continue;
      // bytes data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_data();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Meta::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:v6.services.pub.Meta)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string identity = 1;
  if (!this->_internal_identity().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_identity().data(), static_cast<int>(this->_internal_identity().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "v6.services.pub.Meta.identity");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_identity(), target);
  }

  // bytes data = 2;
  if (!this->_internal_data().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:v6.services.pub.Meta)
  return target;
}

size_t Meta::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:v6.services.pub.Meta)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string identity = 1;
  if (!this->_internal_identity().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_identity());
  }

  // bytes data = 2;
  if (!this->_internal_data().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_data());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Meta::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Meta::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Meta::GetClassData() const { return &_class_data_; }


void Meta::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Meta*>(&to_msg);
  auto& from = static_cast<const Meta&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:v6.services.pub.Meta)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_identity().empty()) {
    _this->_internal_set_identity(from._internal_identity());
  }
  if (!from._internal_data().empty()) {
    _this->_internal_set_data(from._internal_data());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Meta::CopyFrom(const Meta& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:v6.services.pub.Meta)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Meta::IsInitialized() const {
  return true;
}

void Meta::InternalSwap(Meta* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.identity_, lhs_arena,
      &other->_impl_.identity_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.data_, lhs_arena,
      &other->_impl_.data_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata Meta::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_slice_5fsvc_2eproto_getter, &descriptor_table_slice_5fsvc_2eproto_once,
      file_level_metadata_slice_5fsvc_2eproto[1]);
}

// ===================================================================

class FastLookup::_Internal {
 public:
};

FastLookup::FastLookup(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:v6.services.pub.FastLookup)
}
FastLookup::FastLookup(const FastLookup& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  FastLookup* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.identity_){}
    , decltype(_impl_.wcs_etag_){}
    , decltype(_impl_.sha1_){}
    , decltype(_impl_.head_sha1_){}
    , decltype(_impl_.special_sha1_){}
    , decltype(_impl_.name_){}
    , decltype(_impl_.lh_hash_){}
    , decltype(_impl_.file_size_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.identity_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.identity_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_identity().empty()) {
    _this->_impl_.identity_.Set(from._internal_identity(), 
      _this->GetArenaForAllocation());
  }
  _impl_.wcs_etag_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.wcs_etag_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_wcs_etag().empty()) {
    _this->_impl_.wcs_etag_.Set(from._internal_wcs_etag(), 
      _this->GetArenaForAllocation());
  }
  _impl_.sha1_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sha1_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_sha1().empty()) {
    _this->_impl_.sha1_.Set(from._internal_sha1(), 
      _this->GetArenaForAllocation());
  }
  _impl_.head_sha1_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.head_sha1_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_head_sha1().empty()) {
    _this->_impl_.head_sha1_.Set(from._internal_head_sha1(), 
      _this->GetArenaForAllocation());
  }
  _impl_.special_sha1_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.special_sha1_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_special_sha1().empty()) {
    _this->_impl_.special_sha1_.Set(from._internal_special_sha1(), 
      _this->GetArenaForAllocation());
  }
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.lh_hash_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.lh_hash_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_lh_hash().empty()) {
    _this->_impl_.lh_hash_.Set(from._internal_lh_hash(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.file_size_ = from._impl_.file_size_;
  // @@protoc_insertion_point(copy_constructor:v6.services.pub.FastLookup)
}

inline void FastLookup::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.identity_){}
    , decltype(_impl_.wcs_etag_){}
    , decltype(_impl_.sha1_){}
    , decltype(_impl_.head_sha1_){}
    , decltype(_impl_.special_sha1_){}
    , decltype(_impl_.name_){}
    , decltype(_impl_.lh_hash_){}
    , decltype(_impl_.file_size_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.identity_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.identity_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.wcs_etag_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.wcs_etag_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.sha1_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sha1_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.head_sha1_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.head_sha1_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.special_sha1_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.special_sha1_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.lh_hash_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.lh_hash_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

FastLookup::~FastLookup() {
  // @@protoc_insertion_point(destructor:v6.services.pub.FastLookup)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FastLookup::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.identity_.Destroy();
  _impl_.wcs_etag_.Destroy();
  _impl_.sha1_.Destroy();
  _impl_.head_sha1_.Destroy();
  _impl_.special_sha1_.Destroy();
  _impl_.name_.Destroy();
  _impl_.lh_hash_.Destroy();
}

void FastLookup::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void FastLookup::Clear() {
// @@protoc_insertion_point(message_clear_start:v6.services.pub.FastLookup)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.identity_.ClearToEmpty();
  _impl_.wcs_etag_.ClearToEmpty();
  _impl_.sha1_.ClearToEmpty();
  _impl_.head_sha1_.ClearToEmpty();
  _impl_.special_sha1_.ClearToEmpty();
  _impl_.name_.ClearToEmpty();
  _impl_.lh_hash_.ClearToEmpty();
  _impl_.file_size_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FastLookup::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string identity = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_identity();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "v6.services.pub.FastLookup.identity"));
        } else
          goto handle_unusual;
        continue;
      // string wcs_etag = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_wcs_etag();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "v6.services.pub.FastLookup.wcs_etag"));
        } else
          goto handle_unusual;
        continue;
      // string sha1 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_sha1();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "v6.services.pub.FastLookup.sha1"));
        } else
          goto handle_unusual;
        continue;
      // string head_sha1 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_head_sha1();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "v6.services.pub.FastLookup.head_sha1"));
        } else
          goto handle_unusual;
        continue;
      // int64 file_size = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.file_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string special_sha1 = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_special_sha1();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "v6.services.pub.FastLookup.special_sha1"));
        } else
          goto handle_unusual;
        continue;
      // string name = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "v6.services.pub.FastLookup.name"));
        } else
          goto handle_unusual;
        continue;
      // string lh_hash = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_lh_hash();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "v6.services.pub.FastLookup.lh_hash"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FastLookup::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:v6.services.pub.FastLookup)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string identity = 1;
  if (!this->_internal_identity().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_identity().data(), static_cast<int>(this->_internal_identity().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "v6.services.pub.FastLookup.identity");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_identity(), target);
  }

  // string wcs_etag = 2;
  if (!this->_internal_wcs_etag().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_wcs_etag().data(), static_cast<int>(this->_internal_wcs_etag().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "v6.services.pub.FastLookup.wcs_etag");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_wcs_etag(), target);
  }

  // string sha1 = 3;
  if (!this->_internal_sha1().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_sha1().data(), static_cast<int>(this->_internal_sha1().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "v6.services.pub.FastLookup.sha1");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_sha1(), target);
  }

  // string head_sha1 = 4;
  if (!this->_internal_head_sha1().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_head_sha1().data(), static_cast<int>(this->_internal_head_sha1().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "v6.services.pub.FastLookup.head_sha1");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_head_sha1(), target);
  }

  // int64 file_size = 5;
  if (this->_internal_file_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(5, this->_internal_file_size(), target);
  }

  // string special_sha1 = 6;
  if (!this->_internal_special_sha1().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_special_sha1().data(), static_cast<int>(this->_internal_special_sha1().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "v6.services.pub.FastLookup.special_sha1");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_special_sha1(), target);
  }

  // string name = 7;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "v6.services.pub.FastLookup.name");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_name(), target);
  }

  // string lh_hash = 8;
  if (!this->_internal_lh_hash().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_lh_hash().data(), static_cast<int>(this->_internal_lh_hash().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "v6.services.pub.FastLookup.lh_hash");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_lh_hash(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:v6.services.pub.FastLookup)
  return target;
}

size_t FastLookup::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:v6.services.pub.FastLookup)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string identity = 1;
  if (!this->_internal_identity().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_identity());
  }

  // string wcs_etag = 2;
  if (!this->_internal_wcs_etag().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_wcs_etag());
  }

  // string sha1 = 3;
  if (!this->_internal_sha1().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sha1());
  }

  // string head_sha1 = 4;
  if (!this->_internal_head_sha1().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_head_sha1());
  }

  // string special_sha1 = 6;
  if (!this->_internal_special_sha1().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_special_sha1());
  }

  // string name = 7;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string lh_hash = 8;
  if (!this->_internal_lh_hash().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_lh_hash());
  }

  // int64 file_size = 5;
  if (this->_internal_file_size() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_file_size());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FastLookup::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    FastLookup::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FastLookup::GetClassData() const { return &_class_data_; }


void FastLookup::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<FastLookup*>(&to_msg);
  auto& from = static_cast<const FastLookup&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:v6.services.pub.FastLookup)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_identity().empty()) {
    _this->_internal_set_identity(from._internal_identity());
  }
  if (!from._internal_wcs_etag().empty()) {
    _this->_internal_set_wcs_etag(from._internal_wcs_etag());
  }
  if (!from._internal_sha1().empty()) {
    _this->_internal_set_sha1(from._internal_sha1());
  }
  if (!from._internal_head_sha1().empty()) {
    _this->_internal_set_head_sha1(from._internal_head_sha1());
  }
  if (!from._internal_special_sha1().empty()) {
    _this->_internal_set_special_sha1(from._internal_special_sha1());
  }
  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (!from._internal_lh_hash().empty()) {
    _this->_internal_set_lh_hash(from._internal_lh_hash());
  }
  if (from._internal_file_size() != 0) {
    _this->_internal_set_file_size(from._internal_file_size());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FastLookup::CopyFrom(const FastLookup& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:v6.services.pub.FastLookup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FastLookup::IsInitialized() const {
  return true;
}

void FastLookup::InternalSwap(FastLookup* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.identity_, lhs_arena,
      &other->_impl_.identity_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.wcs_etag_, lhs_arena,
      &other->_impl_.wcs_etag_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.sha1_, lhs_arena,
      &other->_impl_.sha1_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.head_sha1_, lhs_arena,
      &other->_impl_.head_sha1_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.special_sha1_, lhs_arena,
      &other->_impl_.special_sha1_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.lh_hash_, lhs_arena,
      &other->_impl_.lh_hash_, rhs_arena
  );
  swap(_impl_.file_size_, other->_impl_.file_size_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FastLookup::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_slice_5fsvc_2eproto_getter, &descriptor_table_slice_5fsvc_2eproto_once,
      file_level_metadata_slice_5fsvc_2eproto[2]);
}

// ===================================================================

class FastLookupRequest::_Internal {
 public:
  static const ::v6::services::pub::FastLookup& info(const FastLookupRequest* msg);
};

const ::v6::services::pub::FastLookup&
FastLookupRequest::_Internal::info(const FastLookupRequest* msg) {
  return *msg->_impl_.info_;
}
FastLookupRequest::FastLookupRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:v6.services.pub.FastLookupRequest)
}
FastLookupRequest::FastLookupRequest(const FastLookupRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  FastLookupRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.info_){nullptr}
    , decltype(_impl_.type_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_info()) {
    _this->_impl_.info_ = new ::v6::services::pub::FastLookup(*from._impl_.info_);
  }
  _this->_impl_.type_ = from._impl_.type_;
  // @@protoc_insertion_point(copy_constructor:v6.services.pub.FastLookupRequest)
}

inline void FastLookupRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.info_){nullptr}
    , decltype(_impl_.type_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

FastLookupRequest::~FastLookupRequest() {
  // @@protoc_insertion_point(destructor:v6.services.pub.FastLookupRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FastLookupRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.info_;
}

void FastLookupRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void FastLookupRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:v6.services.pub.FastLookupRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.info_ != nullptr) {
    delete _impl_.info_;
  }
  _impl_.info_ = nullptr;
  _impl_.type_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FastLookupRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .v6.services.pub.FastLookup info = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FastLookupRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:v6.services.pub.FastLookupRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 type = 1;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_type(), target);
  }

  // .v6.services.pub.FastLookup info = 2;
  if (this->_internal_has_info()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::info(this),
        _Internal::info(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:v6.services.pub.FastLookupRequest)
  return target;
}

size_t FastLookupRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:v6.services.pub.FastLookupRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .v6.services.pub.FastLookup info = 2;
  if (this->_internal_has_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.info_);
  }

  // int32 type = 1;
  if (this->_internal_type() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FastLookupRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    FastLookupRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FastLookupRequest::GetClassData() const { return &_class_data_; }


void FastLookupRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<FastLookupRequest*>(&to_msg);
  auto& from = static_cast<const FastLookupRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:v6.services.pub.FastLookupRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_info()) {
    _this->_internal_mutable_info()->::v6::services::pub::FastLookup::MergeFrom(
        from._internal_info());
  }
  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FastLookupRequest::CopyFrom(const FastLookupRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:v6.services.pub.FastLookupRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FastLookupRequest::IsInitialized() const {
  return true;
}

void FastLookupRequest::InternalSwap(FastLookupRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FastLookupRequest, _impl_.type_)
      + sizeof(FastLookupRequest::_impl_.type_)
      - PROTOBUF_FIELD_OFFSET(FastLookupRequest, _impl_.info_)>(
          reinterpret_cast<char*>(&_impl_.info_),
          reinterpret_cast<char*>(&other->_impl_.info_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FastLookupRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_slice_5fsvc_2eproto_getter, &descriptor_table_slice_5fsvc_2eproto_once,
      file_level_metadata_slice_5fsvc_2eproto[3]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace pub
}  // namespace services
}  // namespace v6
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::v6::services::pub::Slice*
Arena::CreateMaybeMessage< ::v6::services::pub::Slice >(Arena* arena) {
  return Arena::CreateMessageInternal< ::v6::services::pub::Slice >(arena);
}
template<> PROTOBUF_NOINLINE ::v6::services::pub::Meta*
Arena::CreateMaybeMessage< ::v6::services::pub::Meta >(Arena* arena) {
  return Arena::CreateMessageInternal< ::v6::services::pub::Meta >(arena);
}
template<> PROTOBUF_NOINLINE ::v6::services::pub::FastLookup*
Arena::CreateMaybeMessage< ::v6::services::pub::FastLookup >(Arena* arena) {
  return Arena::CreateMessageInternal< ::v6::services::pub::FastLookup >(arena);
}
template<> PROTOBUF_NOINLINE ::v6::services::pub::FastLookupRequest*
Arena::CreateMaybeMessage< ::v6::services::pub::FastLookupRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::v6::services::pub::FastLookupRequest >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
